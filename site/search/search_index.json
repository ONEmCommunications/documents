{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"At ONEm, we are building a Mobile Ecosystem first of a kind with interactive services, that will transform the way people communicate and get access to information on any mobile, including the 3 billion people who have no access to internet, who have no way to share nor create their own content. We aim to provide access to information and to make our services available to everyone. ONEm has created a global multi-service Platform that provides innovative services, using core connectivity as SMS and Voice but also the internet. We provide first of a kind interactive micro-applications that allow people to communicate in a completely new way through simple interaction with an intelligent platform that works on their behalf behind the scenes to connect, find, process and present communications, content and services across all types of networks and to any type of mobile device.","title":"Introduction"},{"location":"add-ons/","text":"v1.6.1 \u00b6 07/12/2018 \u00b6 Fixed parsing tags other than links #24 (Fix loading of a href element) v1.6.0 \u00b6 02/22/2018 \u00b6 Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files v1.5.3 \u00b6 02/18/2017 \u00b6 Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR) v1.5.2 \u00b6 02/17/2017 \u00b6 Added Russian translations #16 (Thanks to @ktaranov ) v1.5.1 \u00b6 02/10/2017 \u00b6 Fixed error in getting the remote image size v1.5.0 \u00b6 02/09/2017 \u00b6 Use tabs in admin panel settings for better user experience Use toggle buttons for page settings v1.4.4 \u00b6 01/11/2017 \u00b6 Fixed CURLOPT_AUTOREFERER constant v1.4.3 \u00b6 10/31/2016 \u00b6 Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing) v1.4.2 \u00b6 12/06/2015 \u00b6 Added French translations #8 (Thanks to @MATsxm ) v1.4.1 \u00b6 11/18/2015 \u00b6 Page specific options now respect the default configurations set in the admin panel v1.4.0 \u00b6 11/17/2015 \u00b6 Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function v1.3.1 \u00b6 09/09/2015 \u00b6 Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints) v1.3.0 \u00b6 08/08/2015 \u00b6 Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters) v1.2.2 \u00b6 05/10/2015 \u00b6 PSR fixes v1.2.1 \u00b6 03/24/2015 \u00b6 Fixed active mode condition v1.2.0 \u00b6 02/21/2015 \u00b6 Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code v1.1.3 \u00b6 02/10/2015 \u00b6 Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5) v1.1.2 \u00b6 02/10/2015 \u00b6 By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin) v1.1.1 \u00b6 02/06/2015 \u00b6 Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method v1.1.0 \u00b6 02/05/2015 \u00b6","title":"v1.6.1"},{"location":"add-ons/#v161","text":"","title":"v1.6.1"},{"location":"add-ons/#07122018","text":"Fixed parsing tags other than links #24 (Fix loading of a href element)","title":"07/12/2018"},{"location":"add-ons/#v160","text":"","title":"v1.6.0"},{"location":"add-ons/#02222018","text":"Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files","title":"02/22/2018"},{"location":"add-ons/#v153","text":"","title":"v1.5.3"},{"location":"add-ons/#02182017","text":"Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR)","title":"02/18/2017"},{"location":"add-ons/#v152","text":"","title":"v1.5.2"},{"location":"add-ons/#02172017","text":"Added Russian translations #16 (Thanks to @ktaranov )","title":"02/17/2017"},{"location":"add-ons/#v151","text":"","title":"v1.5.1"},{"location":"add-ons/#02102017","text":"Fixed error in getting the remote image size","title":"02/10/2017"},{"location":"add-ons/#v150","text":"","title":"v1.5.0"},{"location":"add-ons/#02092017","text":"Use tabs in admin panel settings for better user experience Use toggle buttons for page settings","title":"02/09/2017"},{"location":"add-ons/#v144","text":"","title":"v1.4.4"},{"location":"add-ons/#01112017","text":"Fixed CURLOPT_AUTOREFERER constant","title":"01/11/2017"},{"location":"add-ons/#v143","text":"","title":"v1.4.3"},{"location":"add-ons/#10312016","text":"Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing)","title":"10/31/2016"},{"location":"add-ons/#v142","text":"","title":"v1.4.2"},{"location":"add-ons/#12062015","text":"Added French translations #8 (Thanks to @MATsxm )","title":"12/06/2015"},{"location":"add-ons/#v141","text":"","title":"v1.4.1"},{"location":"add-ons/#11182015","text":"Page specific options now respect the default configurations set in the admin panel","title":"11/18/2015"},{"location":"add-ons/#v140","text":"","title":"v1.4.0"},{"location":"add-ons/#11172015","text":"Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function","title":"11/17/2015"},{"location":"add-ons/#v131","text":"","title":"v1.3.1"},{"location":"add-ons/#09092015","text":"Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints)","title":"09/09/2015"},{"location":"add-ons/#v130","text":"","title":"v1.3.0"},{"location":"add-ons/#08082015","text":"Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters)","title":"08/08/2015"},{"location":"add-ons/#v122","text":"","title":"v1.2.2"},{"location":"add-ons/#05102015","text":"PSR fixes","title":"05/10/2015"},{"location":"add-ons/#v121","text":"","title":"v1.2.1"},{"location":"add-ons/#03242015","text":"Fixed active mode condition","title":"03/24/2015"},{"location":"add-ons/#v120","text":"","title":"v1.2.0"},{"location":"add-ons/#02212015","text":"Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code","title":"02/21/2015"},{"location":"add-ons/#v113","text":"","title":"v1.1.3"},{"location":"add-ons/#02102015","text":"Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5)","title":"02/10/2015"},{"location":"add-ons/#v112","text":"","title":"v1.1.2"},{"location":"add-ons/#02102015_1","text":"By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin)","title":"02/10/2015"},{"location":"add-ons/#v111","text":"","title":"v1.1.1"},{"location":"add-ons/#02062015","text":"Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method","title":"02/06/2015"},{"location":"add-ons/#v110","text":"","title":"v1.1.0"},{"location":"add-ons/#02052015","text":"","title":"02/05/2015"},{"location":"blockchain/","text":"Lorem markdownum vides aram est sui istis excipis Danai elusaque manu fores. Illa hunc primo pinum pertulit conplevit portusque pace tacuit sincera. Iam tamen licentia exsulta patruelibus quam, deorum capit; vultu. Est Philomela qua sanguine fremit rigidos teneri cacumina anguis hospitio incidere sceptroque telum spectatorem at aequor. 1 2 3 4 5 6 7 8 9 10 11 if (cssDawP >= station) { dllCdmaCpc += 919754; } else { superscalar += -3 + phishing; } pup_ram_bloatware(2 * network(linkedin)); var vfatWhite = serpXmp + paperPitchPermalink(enterprise_and) - 5; systemBandwidthAtm = 9 + station; rw_menu_enterprise *= on_midi / interpreter.adPpp( correctionIntegratedBalancing, bar, real) - user_remote_zebibyte( desktop(lun_flops_wamp, technology_peripheral_dv, spriteHit)); Prochytenque ergo ait aequoreo causa ardere, ex vinaque est, accingere, abest nunc sanguine. Est forma admissum adspexit pharetraque regat prece fremit clamat memorantur evanuit foret ferinas, senserat infringat illa incumbere excipit ulnas. Est undis soror animi diem continuo videres fratres ? Meo iam mihi miserum fateor, in votum iuvenis, aures? Qui labor nulla telluris valerem erat hoc, sedula. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if (bus_overclocking_server > 891985) { compression = textWep - gatePlatform; } else { fileTweak += file + so_mouse_sram; pda_radcab_eup = tcp_opengl_refresh(network_phishing - realityDel, 5, 5); bounce_monitor_dns = 4; } fddi_virtualization_file *= drag_infringement(minicomputerServlet + -1 + gif_white(utf, blog, cloud), dvdMacintosh - radcab_horizontal + cpu_recycle_quicktime(ascii)); ad += tableCapsTime - 5 + keyboard_card - -2 + cc; if (raw_bloatware_compression < script_expression) { fiBps(printer_php); ipx = biometricsFullDvi(bootComponentAnsi, 929326, 38); } Dent et ignavus constant tamque \u00b6 Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Advanced Topic 2"},{"location":"blockchain/#dent-et-ignavus-constant-tamque","text":"Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Dent et ignavus constant tamque"},{"location":"buildfirstapp/","text":"Your First ONEm App \u00b6 The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. Follow along as we create a working Todo application.","title":"Your First ONEm App"},{"location":"buildfirstapp/#your-first-onem-app","text":"The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. Follow along as we create a working Todo application.","title":"Your First ONEm App"},{"location":"concepts/","text":"Core Concepts \u00b6 For those completely new to ONEm app development, it can be helpful to get a high-level understanding of the core philosophy, concepts and capabilities. Before diving in, we'll cover the basics of the ONEm Framework, and how it works.","title":"Core Concepts"},{"location":"concepts/#core-concepts","text":"For those completely new to ONEm app development, it can be helpful to get a high-level understanding of the core philosophy, concepts and capabilities. Before diving in, we'll cover the basics of the ONEm Framework, and how it works.","title":"Core Concepts"},{"location":"high-level-overview/","text":"You will need to register your app on the developer portal and make it return standardized JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users. Developer Account \u00b6 Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. Your app \u00b6 Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. So if your app name is todo then users will be able to access it by sending an SMS with #todo content. Request & Response \u00b6 When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. Your app can reply with a menu , a form or a raw response type.","title":"High level overview"},{"location":"high-level-overview/#developer-account","text":"Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app.","title":"Developer Account"},{"location":"high-level-overview/#your-app","text":"Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. So if your app name is todo then users will be able to access it by sending an SMS with #todo content.","title":"Your app"},{"location":"high-level-overview/#request-response","text":"When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. Your app can reply with a menu , a form or a raw response type.","title":"Request &amp; Response"},{"location":"home/","text":"TODO","title":"Home"},{"location":"how_it_works/","text":"ONEm's goal is to have a service that is easy and intuitive to use. It is important for users to have a seamless experience when accessing the ONEm platform. Different functionalities and content types are grouped in applications, also called micro apps, accessible through the Platform, similar to websites via internet. Each micro app is defined by a unique name, similar to a web-address, and follows a general structure, allowing users to easily interact with the platform via text messages. Similar to a website, the application will have a landing page and will provide a navigation structure using menus, selectable outlines, paging mechanism and the possibility to capture user input. To access a certain app, users will use # before its name, eg #my_application . To allow us to create an ecosystem, the users will be automatically registered when sending their first message to the platform. Their profile will be created and based on setup they will be able to access the available applications. Obviously, an opt out mechanism is in place.","title":"How it works"},{"location":"intro/","text":"What is ONEm Framework? \u00b6 The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based platform that provides SMS connectivity to mobile networks around the globe. Goals \u00b6 Single Source for SMS and Web \u00b6 Web Standards-based \u00b6 ONEm Framework is built on top of trusted, standardized web technologies: HTML, JSON, REST, using modern Web APIs such as our ONEm API. Because of this, ONEm applications build with ONEm have a stable base, are familiar to any developer and are easy to maintain. Simple yet Powerful \u00b6 Ecosystem \u00b6 ONEm apps can be combined with ONEm's ecosystem. Users of your app can acquire a global Id, we call it the ONEm name, that allows users in the ONEm global community to communicate safely with one another.","title":"What is ONEm Framework?"},{"location":"intro/#what-is-onem-framework","text":"The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based platform that provides SMS connectivity to mobile networks around the globe.","title":"What is ONEm Framework?"},{"location":"intro/#goals","text":"","title":"Goals"},{"location":"intro/#single-source-for-sms-and-web","text":"","title":"Single Source for SMS and Web"},{"location":"intro/#web-standards-based","text":"ONEm Framework is built on top of trusted, standardized web technologies: HTML, JSON, REST, using modern Web APIs such as our ONEm API. Because of this, ONEm applications build with ONEm have a stable base, are familiar to any developer and are easy to maintain.","title":"Web Standards-based"},{"location":"intro/#simple-yet-powerful","text":"","title":"Simple yet Powerful"},{"location":"intro/#ecosystem","text":"ONEm apps can be combined with ONEm's ecosystem. Users of your app can acquire a global Id, we call it the ONEm name, that allows users in the ONEm global community to communicate safely with one another.","title":"Ecosystem"},{"location":"micro_apps_basics/","text":"The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based Platform that provides SMS connectivity to mobile networks around the globe. Once you register as a developer, based on ONEm principles, you can create your own application and reach the ONEm ecosystem. The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web.","title":"Micro app basics"},{"location":"text-audio-video/","text":"Text Audio and Video \u00b6 What is it? \u00b6 ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs. Features \u00b6 Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running. Requirements \u00b6 argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it). Usage \u00b6 ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline ) @generate_doc \u00b6 Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: 1 2 3 4 @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. 1 2 3 4 @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. generate_doc() \u00b6 Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. 1 2 3 4 5 6 7 8 from argdoc import generate_doc def main (): parser = argparse . ArgumentParser ( whatevs ) parser . add_argument () ... generate_doc ( parser ) generate_doc (commandline) \u00b6 Finally, if preferred, you can run argDoc as a commandline tool. 1 $user python argdoc.py --f pdf name_of_script_to_document.py Contact \u00b6 Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com Sample Output \u00b6 Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like. QuickValidate.py \u00b6 Validates all HTML/CSS in projects folder(s) How To Use \u00b6 Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. 1 $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. 1 --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. 1 -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate 1 $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. 1 $ python calc.py --saveresults myfile.txt 38 / 2 Documentation \u00b6 Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Text audio video"},{"location":"text-audio-video/#text-audio-and-video","text":"","title":"Text Audio and Video"},{"location":"text-audio-video/#what-is-it","text":"ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs.","title":"What is it?"},{"location":"text-audio-video/#features","text":"Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running.","title":"Features"},{"location":"text-audio-video/#requirements","text":"argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it).","title":"Requirements"},{"location":"text-audio-video/#usage","text":"ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline )","title":"Usage"},{"location":"text-audio-video/#generate_doc","text":"Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: 1 2 3 4 @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. 1 2 3 4 @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code..","title":"@generate_doc"},{"location":"text-audio-video/#generate_doc_1","text":"Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. 1 2 3 4 5 6 7 8 from argdoc import generate_doc def main (): parser = argparse . ArgumentParser ( whatevs ) parser . add_argument () ... generate_doc ( parser )","title":"generate_doc()"},{"location":"text-audio-video/#generate_doc-commandline","text":"Finally, if preferred, you can run argDoc as a commandline tool. 1 $user python argdoc.py --f pdf name_of_script_to_document.py","title":"generate_doc (commandline)"},{"location":"text-audio-video/#contact","text":"Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com","title":"Contact"},{"location":"text-audio-video/#sample-output","text":"Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like.","title":"Sample Output"},{"location":"text-audio-video/#quickvalidatepy","text":"Validates all HTML/CSS in projects folder(s)","title":"QuickValidate.py"},{"location":"text-audio-video/#how-to-use","text":"Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. 1 $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. 1 --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. 1 -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate 1 $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. 1 $ python calc.py --saveresults myfile.txt 38 / 2","title":"How To Use"},{"location":"text-audio-video/#documentation","text":"Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Documentation"},{"location":"SDK/NodeJS/","text":"onem-nodejs-api \u00b6 Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object onem-nodejs-api~Service \u00b6 Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object new Service(serviceName) \u00b6 Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service service.addForm(template, data) \u21d2 object \u00b6 Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection service.addMenu(template, data) \u21d2 object \u00b6 Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection onem-nodejs-api~Form(index, template, data) \u00b6 Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string \u00b6 Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string \u00b6 Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form \u00b6 Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~Menu(index, template, data) \u00b6 Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string \u00b6 Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string \u00b6 Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu \u00b6 Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~Form : object \u00b6 Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string \u00b6 Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string \u00b6 Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form \u00b6 Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~FormBody : object \u00b6 Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission onem-nodejs-api~FormItem : object \u00b6 Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation onem-nodejs-api~Menu : object \u00b6 Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string \u00b6 Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string \u00b6 Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu \u00b6 Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~MenuItem : object \u00b6 Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"NodeJS"},{"location":"SDK/NodeJS/#onem-nodejs-api","text":"Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object","title":"onem-nodejs-api"},{"location":"SDK/NodeJS/#onem-nodejs-apiservice","text":"Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object","title":"onem-nodejs-api~Service"},{"location":"SDK/NodeJS/#new-serviceservicename","text":"Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service","title":"new Service(serviceName)"},{"location":"SDK/NodeJS/#serviceaddformtemplate-data-object","text":"Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection","title":"service.addForm(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#serviceaddmenutemplate-data-object","text":"Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection","title":"service.addMenu(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformindex-template-data","text":"Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form(index, template, data)"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuindex-template-data","text":"Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu(index, template, data)"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apiform-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form : object"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string_1","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string_1","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form_1","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apiformbody-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission","title":"onem-nodejs-api~FormBody : object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation","title":"onem-nodejs-api~FormItem : object"},{"location":"SDK/NodeJS/#onem-nodejs-apimenu-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu : object"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string_1","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string_1","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu_1","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"onem-nodejs-api~MenuItem : object"},{"location":"SDK/openapi3.0.0/","text":"ONEm HTTP REST Specification API v1.1-oas3 Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu. This specification defines the HTTP REST interface that is used when applications receive callbacks to the URL specified in the service registration. Base URLs: http://developer-onem.com http://testtool.skor.games:9000 Email: ONEm Authentication \u00b6 HTTP Authentication, scheme: bearer Default register \u00b6 Code samples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) 1 2 3 4 5 6 7 8 9 10 11 import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () POST /service Register or re-register a service Body parameter 1 2 3 4 5 6 7 8 9 10 11 12 { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] } Parameters Name In Type Required Description body body body true Provide the apikey given to you by your ONEm contact. callbackPath is the base path of your host server where you want to receive callbacks arising from user inputs Example responses 200 Response 1 2 3 { \"result\" : true } Responses Status Meaning Description Schema 200 OK Added or updated successfully inline_response_200 Callbacks \u00b6 #### userAction **User action callback** ## register > Code samples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) 1 2 3 4 5 6 7 8 9 10 11 import requests headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service` Parameters |Name|In|Type|Required|Description| |---|---|---|---|---| |param1|query|string|false|The first optional space-separated parameter provided by the user in service switching events| |param2|query|string|false|The second optional space-separated parameter provided by the user in service switching events| |paramn|query|string|false|The nth optional space-separated parameter provided by the user in service switching events| > Example responses > 200 Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"type\" : \"menu\" , \"header\" : \"string\" , \"footer\" : \"string\" , \"body\" : { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } } Responses |Status|Meaning|Description|Schema| |---|---|---|---| |200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON formatted object containing the response object that should be sent to the user (menu or form)|Inline| Response Schema Status Code **200** |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb type|string|true|none|Indicates whether to render a menu or a form| |\u00bb header|string|false|none|The value of the header which will be prefixed automatically with and convered to upper case| |\u00bb footer|string|false|none|The value of the footer if required if omitted the platform will include a default footer'| |\u00bb body|any|true|none|Array of either content or menu objects| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb *anonymous*|[oneOf]|false|none|none| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Content only| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Menu option| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user chooses this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method to use in callback| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|[Form](#schemaform)|false|none|none| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user selects this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method that should be used in the callback| |\u00bb\u00bb\u00bb\u00bb confirm|boolean|false|none|TRUE if wizard confirmation menu should be displayed at the end of the form| |\u00bb\u00bb\u00bb\u00bb formItems|[[Form_formItems](#schemaform_formitems)]|true|none|Array of form items| |\u00bb\u00bb\u00bb\u00bb\u00bb name|string|true|none|Name of the form property| |\u00bb\u00bb\u00bb\u00bb\u00bb description|string|true|none|User prompt| |\u00bb\u00bb\u00bb\u00bb\u00bb type|string|true|none|Used for form property validation| #### Enumerated Values |Property|Value| |---|---| |type|menu| |type|form| |type|content| |type|option| |method|GET| |method|POST| |method|PUT| |method|DELETE| |method|GET| |method|POST| |method|PUT| |method|DELETE| |type|string| |type|integer| |type|date| To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth ## register > Code samples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) 1 2 3 4 5 6 7 8 9 10 11 12 import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service` > Body parameter 1 2 3 { \"[object Object]\" : \"dueDate\" } Parameters |Name|In|Type|Required|Description| |---|---|---|---|---| |body|body|object|false|When user completes a form, the body contains a json object with names properties and values. The property names are taken from the 'name' property of the Form schema| |\u00bb [object Object]|body|string|false|none| > Example responses > 200 Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"type\" : \"menu\" , \"header\" : \"string\" , \"footer\" : \"string\" , \"body\" : { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } } Responses |Status|Meaning|Description|Schema| |---|---|---|---| |200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON formatted object containing the response object that should be sent to the user (menu or form)|Inline| Response Schema Status Code **200** |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb type|string|true|none|Indicates whether to render a menu or a form| |\u00bb header|string|false|none|The value of the header which will be prefixed automatically with and convered to upper case| |\u00bb footer|string|false|none|The value of the footer if required. If omitted the platform will include a default footer| |\u00bb body|any|true|none|Array of either content or menu objects| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb *anonymous*|[oneOf]|false|none|none| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Content only| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Menu option| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user chooses this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method to use in callback| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|[Form](#schemaform)|false|none|none| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user selects this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method that should be used in the callback| |\u00bb\u00bb\u00bb\u00bb confirm|boolean|false|none|TRUE if wizard confirmation menu should be displayed at the end of the form| |\u00bb\u00bb\u00bb\u00bb formItems|[[Form_formItems](#schemaform_formitems)]|true|none|Array of form items| |\u00bb\u00bb\u00bb\u00bb\u00bb name|string|true|none|Name of the form property| |\u00bb\u00bb\u00bb\u00bb\u00bb description|string|true|none|User prompt| |\u00bb\u00bb\u00bb\u00bb\u00bb type|string|true|none|Used for form property validation| #### Enumerated Values |Property|Value| |---|---| |type|menu| |type|form| |type|content| |type|option| |method|GET| |method|POST| |method|PUT| |method|DELETE| |method|GET| |method|POST| |method|PUT| |method|DELETE| |type|string| |type|integer| |type|date| To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth This operation does not require authentication Schemas \u00b6 Menu 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } Properties \u00b6 oneOf Name Type Required Restrictions Description anonymous object false none Content only \u00bb type string true none none \u00bb description string true none Value to be rendered xor Name Type Required Restrictions Description anonymous object false none Menu option \u00bb type string true none none \u00bb description string true none Value to be rendered \u00bb nextRoute string true none relative URL from base path to use as callback when user chooses this option \u00bb method string false none HTTP method to use in callback Enumerated Values \u00b6 Property Value type content type option method GET method POST method PUT method DELETE Form 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"nextRoute\" : \"string\" , \"method\" : \"POST\" , \"confirm\" : false , \"formItems\" : { \"type\" : \"form\" , \"header\" : \"TODO MENU\" , \"body\" : { \"nextRoute\" : \"todoAddDesc\" , \"method\" : \"POST\" , \"items\" : [ { \"name\" : \"description\" , \"description\" : \"Provide a description for the task\" , \"type\" : \"string\" }, { \"name\" : \"dueDate\" , \"description\" : \"Provide a due date\" , \"type\" : \"date\" } ] } } } Properties \u00b6 Name Type Required Restrictions Description nextRoute string true none relative URL from base path to use as callback when user selects this option method string false none HTTP method that should be used in the callback confirm boolean false none TRUE if wizard confirmation menu should be displayed at the end of the form formItems [ Form_formItems ] true none Array of form items Enumerated Values \u00b6 Property Value method GET method POST method PUT method DELETE service_verbs 1 2 3 4 5 { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } Properties \u00b6 Name Type Required Restrictions Description name string true none none route string true none none footer boolean false none indicates whether this verb should appear in footers body 1 2 3 4 5 6 7 8 9 10 11 12 { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] } Properties \u00b6 Name Type Required Restrictions Description apiKey string false none none serviceName string false none none callbackPath string false none none verbs [ service_verbs ] false none none inline_response_200 1 2 3 { \"result\" : true } Properties \u00b6 Name Type Required Restrictions Description result boolean false none Indicates success or failure Form_formItems 1 2 3 4 5 { \"name\" : \"string\" , \"description\" : \"string\" , \"type\" : \"string\" } Properties \u00b6 Name Type Required Restrictions Description name string true none Name of the form property description string true none User prompt type string true none Used for form property validation Enumerated Values \u00b6 Property Value type string type integer type date","title":"ONEm HTTP REST Specification API"},{"location":"SDK/openapi3.0.0/#authentication","text":"HTTP Authentication, scheme: bearer","title":"Authentication"},{"location":"SDK/openapi3.0.0/#register","text":"Code samples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) 1 2 3 4 5 6 7 8 9 10 11 import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () POST /service Register or re-register a service Body parameter 1 2 3 4 5 6 7 8 9 10 11 12 { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] }","title":"register"},{"location":"SDK/openapi3.0.0/#callbacks","text":"#### userAction **User action callback** ## register > Code samples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) 1 2 3 4 5 6 7 8 9 10 11 import requests headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service`","title":"Callbacks"},{"location":"SDK/openapi3.0.0/#schemas","text":"","title":"Schemas"},{"location":"SDK/openapi3.0.0/#properties","text":"oneOf Name Type Required Restrictions Description anonymous object false none Content only \u00bb type string true none none \u00bb description string true none Value to be rendered xor Name Type Required Restrictions Description anonymous object false none Menu option \u00bb type string true none none \u00bb description string true none Value to be rendered \u00bb nextRoute string true none relative URL from base path to use as callback when user chooses this option \u00bb method string false none HTTP method to use in callback","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values","text":"Property Value type content type option method GET method POST method PUT method DELETE","title":"Enumerated Values"},{"location":"SDK/openapi3.0.0/#properties_1","text":"Name Type Required Restrictions Description nextRoute string true none relative URL from base path to use as callback when user selects this option method string false none HTTP method that should be used in the callback confirm boolean false none TRUE if wizard confirmation menu should be displayed at the end of the form formItems [ Form_formItems ] true none Array of form items","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values_1","text":"Property Value method GET method POST method PUT method DELETE","title":"Enumerated Values"},{"location":"SDK/openapi3.0.0/#properties_2","text":"Name Type Required Restrictions Description name string true none none route string true none none footer boolean false none indicates whether this verb should appear in footers","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_3","text":"Name Type Required Restrictions Description apiKey string false none none serviceName string false none none callbackPath string false none none verbs [ service_verbs ] false none none","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_4","text":"Name Type Required Restrictions Description result boolean false none Indicates success or failure","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_5","text":"Name Type Required Restrictions Description name string true none Name of the form property description string true none User prompt type string true none Used for form property validation","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values_2","text":"Property Value type string type integer type date","title":"Enumerated Values"},{"location":"api/purpose/","text":"TODO","title":"Purpose"},{"location":"building/essentials/","text":"ONEm is continuously developing and maintaining SDKs (Software Development Kits) in different languages in order to provide a smooth integration between your micro-app and ONEm Framework. Official SDKs Python SDK NodeJS SDK Your micro-app is a web server which receives HTTP requests from ONEm Platform and sends JSON responses back. One of the main purposes of the SDKs is to help you generate a valid JSON response for each message you want to send to your users. No matter what language you are developing in, the SDK will enable you two ways of creating user interfaces by: pure programming HTML (see supported HTML tags ) or HTML based templates. Currently we support several templating engines which are coming with the SDK: NodeJS SDK: pug ejs Python SDK: Jinja Example of how a simple menu can be defined # MY APP A Option 1 B Option 2 C Option 3 --Reply A-C NodeJS 1 2 3 4 5 6 7 8 9 10 const onemsdk = require ( 'onemsdk' ); const menu = onemsdk . Menu ({ header : 'My App' , body : [ new MenuItem ({ description : 'Option 1' , path : '/path1' }), new MenuItem ({ description : 'Option 2' , path : '/path2' }), new MenuItem ({ description : 'Option 3' , path : '/path3' }), ] }); HTML 1 2 3 4 5 6 7 8 < section > < header > My App </ header > < ul > < li >< a href = \"/path1\" > Option 1 </ a ></ li > < li >< a href = \"/path2\" > Option 2 </ a ></ li > < li >< a href = \"/path3\" > Option 3 </ a ></ li > </ ul > </ section > Python 1 2 3 4 5 6 7 8 9 10 import onemsdk menu = onemsdk . Menu ( header = 'My App' , body = [ onemsdk . MenuItem ( description = 'First item' , path = '/path1' ), onemsdk . MenuItem ( description = 'Second item' , path = '/path2' ), onemsdk . MenuItem ( description = 'Third item' , path = '/path3' ) ] )","title":"SDK Essentials"},{"location":"building/form/","text":"A form is like a collection of menus or raw responses and it is basically collecting information from the user. It is composed by a header , a body and a footer . The body represents form items and these can be slightly modified menus or raw responses. The form items are being processed in a successive manner. After all the form items have been processed, the user can confirm his choices or reset any of them. JSON Structure \u00b6 All fields prefixed with a star (*) are required Form \u00b6 A top level component used to acquire information from the user KEY TYPE NOTES *body array Sequence of FormItem objects used to acquire information from user footer string The footer of the form. It can be overwritten by each body component header string The header of the form. It can be overwritten by each body component meta object FormMeta object. Contains configuration flags method string HTTP method indicating how to trigger the callback path. Defaults to \"POST\" available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" *path string The callback path used to send the serialized form data *type string Indicates the type of the object, defaults to \"form\" FormMeta \u00b6 Form related component holding configuration fields for the form KEY TYPE NOTES completion_status_in_header boolean If true will indicate the status in the header. Defaults to false , which means it will be shown below header if the completion status is shown completion_status_show boolean If true will show a completion status. Defaults to false confirmation_needed boolean If false will not ask for confirmation. Defaults to true FormItem \u00b6 Form related component used to acquire certain information from the user KEY TYPE NOTES body array Composed of MenuItemFormItem objects required only for type=form-menu chunking_footer string Shown in the footer of the sms chunks confirmation_label string Shown in the confirmation menu *description string The description of this FormItem footer string If provided will overwrite the Form.footer header string If provided will overwrite the Form.header max_length integer Validates the user input applies only for type=string max_length_error string Message to be shown on max_length error max_value number Validates the user input applies only for type=int|float max_value_error string Message to be shown on max_value error meta object MenuFormItemMeta object applies only for type=form-menu method string Http method, how the callback url should be triggered available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" min_length integer Validates the user input applies only for type=string min_length_error string Message to be shown on min_length error min_value number Validates the user input applies only for type=int|float min_value_error string Message to be shown on min_value error *name string The name of this FormItem , used in form serialization required boolean User can SKIP this FormItem if set to false status_exclude boolean If true this step will be excluded from the form completion status status_prepend boolean If true this step will be prepended to the body of the response. Appended otherwise *type string Indicates the type of the object available: \"string\", \"date\", \"datetime\", \"hidden\", \"int\", \"float\", \"form-menu\", \"email\", \"url\", \"location\" url string Callback url triggered right after the choice has been set for this form item validate_type_error string An error message to be shown on basic type validation validate_type_error_footer string Shown in the error message footer validate_url string The callback url path \"GET\" triggered to validate user input. A query string is sent by ONEm: ?form_item_name=user_input The validate_url must return a json response: {\"valid\": true/false, \"error\": \"Some message in case of validation errors\"} value string Value to pass in the form serialization data applies only for type=hidden MenuItemFormItem \u00b6 FormItem related component used to display menu items, selectable or raw KEY TYPE NOTES *description string The description for this MenuItemFormItem text_search string If the user does not send a proper option marker and sends some input, this field will be used to search and narrow down the options against the user input max 1000 chars *type string Indicates the type of the object available: \"option\", \"content\" value string The value for this MenuItemFormItem , used in form serialization required only for type=option MenuFormItemMeta \u00b6 FormItem related component holding configuration field for a menu inside a form item KEY TYPE NOTES auto_select boolean Will be automatically selected if set to true and in case of a single option in the menu multi_select boolean Allows multiple options to be selected numbered boolean Displays numbers instead of letter option markers Swagger \u00b6 The schema can also be found on Swagger Hub here JSON Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { \"body\" : [ { \"type\" : \"string\" , \"name\" : \"descr\" , \"description\" : \"Provide a description\" , \"min_length\" : 5 , \"min_length_error\" : \"Please write a longer description\" , }, { \"type\" : \"date\" , \"name\" : \"due_date\" , \"header\" : \"due date\" , \"description\" : \"Provide a due date\" }, { \"type\" : \"form-menu\" , \"name\" : \"prio\" , \"header\" : \"priority\" , \"body\" : [ { \"type\" : \"option\" , \"value\" : \"high\" , \"description\" : \"High priority\" }, { \"type\" : \"option\" , \"value\" : \"low\" , \"description\" : \"Low priority\" } ] } ], \"header\" : \"create task\" , \"footer\" : null , \"meta\" : { \"confirmation_needed\" : false }, \"method\" : \"POST\" , \"path\" : \"/task/create\" , \"type\" : \"form\" } Notice the 'type': 'form' key value pair, which indicates the form response. So when the user sends a to access the New todo option item, as mentioned here ONEm will send a GET request to http://your-callback.url/task/create/ . This url should return something like the above json structure. The user will be taken through a wizard and it will look like: #TODO CREATE TASK Provide a description This is the first step and whatever the user replies with will be set as the task description. This is a string and it will be POST ed to path as indicated in the json structure. Notice there is no header or footer mentioned at this step, so form header and footer will be used as fallbacks. #TODO DUE DATE Provide a description This is the second step and the user needs to reply with a date. There is no callback path so no HTTP request will be performed after this step. The header is present here, so it will be displayed instead of the form header. #TODO PRIORITY A High priority B Low priority --Reply A-B This is the last step and the user needs to choose one option. After all steps have been processed, as indicated through method and path , the form will be serialized and an HTTP POST will be sent to the path which is relative to the callback url: http://your-callback.url/task/create/ So the POST will look like: ?descr=some_description&due_date=2019-10-10&prio=high Type \u00b6 The response type should be equal to form to indicate a form response. Header \u00b6 The header of the form is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it. Body \u00b6 The body holds an array of objects. Each object is called a FormItem and it is described in the Json Structure Footer \u00b6 The footer of the form is indicated through footer key and like the header of the form, it is not final and will be altered by the ONEm platform. If no footer is specified, a default might be set. Path & Method \u00b6 The path set in the Form object is triggered right after the form has been finished and confirmed by the user. All the values will be sent to your callback path as a form serialized data, ie object with key value pairs: name_of_the_form_item = user_input If there is a form-menu FormItem with multi_select set and the user chooses more than one option, then the value of the corresponding pair will be an array of the selected values. Meta \u00b6 The meta key holds a FormMeta object used to indicate certain behaviors for the Form.","title":"Form"},{"location":"building/form/#json-structure","text":"All fields prefixed with a star (*) are required","title":"JSON Structure"},{"location":"building/form/#form","text":"A top level component used to acquire information from the user KEY TYPE NOTES *body array Sequence of FormItem objects used to acquire information from user footer string The footer of the form. It can be overwritten by each body component header string The header of the form. It can be overwritten by each body component meta object FormMeta object. Contains configuration flags method string HTTP method indicating how to trigger the callback path. Defaults to \"POST\" available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" *path string The callback path used to send the serialized form data *type string Indicates the type of the object, defaults to \"form\"","title":"Form"},{"location":"building/form/#formmeta","text":"Form related component holding configuration fields for the form KEY TYPE NOTES completion_status_in_header boolean If true will indicate the status in the header. Defaults to false , which means it will be shown below header if the completion status is shown completion_status_show boolean If true will show a completion status. Defaults to false confirmation_needed boolean If false will not ask for confirmation. Defaults to true","title":"FormMeta"},{"location":"building/form/#formitem","text":"Form related component used to acquire certain information from the user KEY TYPE NOTES body array Composed of MenuItemFormItem objects required only for type=form-menu chunking_footer string Shown in the footer of the sms chunks confirmation_label string Shown in the confirmation menu *description string The description of this FormItem footer string If provided will overwrite the Form.footer header string If provided will overwrite the Form.header max_length integer Validates the user input applies only for type=string max_length_error string Message to be shown on max_length error max_value number Validates the user input applies only for type=int|float max_value_error string Message to be shown on max_value error meta object MenuFormItemMeta object applies only for type=form-menu method string Http method, how the callback url should be triggered available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" min_length integer Validates the user input applies only for type=string min_length_error string Message to be shown on min_length error min_value number Validates the user input applies only for type=int|float min_value_error string Message to be shown on min_value error *name string The name of this FormItem , used in form serialization required boolean User can SKIP this FormItem if set to false status_exclude boolean If true this step will be excluded from the form completion status status_prepend boolean If true this step will be prepended to the body of the response. Appended otherwise *type string Indicates the type of the object available: \"string\", \"date\", \"datetime\", \"hidden\", \"int\", \"float\", \"form-menu\", \"email\", \"url\", \"location\" url string Callback url triggered right after the choice has been set for this form item validate_type_error string An error message to be shown on basic type validation validate_type_error_footer string Shown in the error message footer validate_url string The callback url path \"GET\" triggered to validate user input. A query string is sent by ONEm: ?form_item_name=user_input The validate_url must return a json response: {\"valid\": true/false, \"error\": \"Some message in case of validation errors\"} value string Value to pass in the form serialization data applies only for type=hidden","title":"FormItem"},{"location":"building/form/#menuitemformitem","text":"FormItem related component used to display menu items, selectable or raw KEY TYPE NOTES *description string The description for this MenuItemFormItem text_search string If the user does not send a proper option marker and sends some input, this field will be used to search and narrow down the options against the user input max 1000 chars *type string Indicates the type of the object available: \"option\", \"content\" value string The value for this MenuItemFormItem , used in form serialization required only for type=option","title":"MenuItemFormItem"},{"location":"building/form/#menuformitemmeta","text":"FormItem related component holding configuration field for a menu inside a form item KEY TYPE NOTES auto_select boolean Will be automatically selected if set to true and in case of a single option in the menu multi_select boolean Allows multiple options to be selected numbered boolean Displays numbers instead of letter option markers","title":"MenuFormItemMeta"},{"location":"building/form/#swagger","text":"The schema can also be found on Swagger Hub here","title":"Swagger"},{"location":"building/form/#json-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 { \"body\" : [ { \"type\" : \"string\" , \"name\" : \"descr\" , \"description\" : \"Provide a description\" , \"min_length\" : 5 , \"min_length_error\" : \"Please write a longer description\" , }, { \"type\" : \"date\" , \"name\" : \"due_date\" , \"header\" : \"due date\" , \"description\" : \"Provide a due date\" }, { \"type\" : \"form-menu\" , \"name\" : \"prio\" , \"header\" : \"priority\" , \"body\" : [ { \"type\" : \"option\" , \"value\" : \"high\" , \"description\" : \"High priority\" }, { \"type\" : \"option\" , \"value\" : \"low\" , \"description\" : \"Low priority\" } ] } ], \"header\" : \"create task\" , \"footer\" : null , \"meta\" : { \"confirmation_needed\" : false }, \"method\" : \"POST\" , \"path\" : \"/task/create\" , \"type\" : \"form\" } Notice the 'type': 'form' key value pair, which indicates the form response. So when the user sends a to access the New todo option item, as mentioned here ONEm will send a GET request to http://your-callback.url/task/create/ . This url should return something like the above json structure. The user will be taken through a wizard and it will look like: #TODO CREATE TASK Provide a description This is the first step and whatever the user replies with will be set as the task description. This is a string and it will be POST ed to path as indicated in the json structure. Notice there is no header or footer mentioned at this step, so form header and footer will be used as fallbacks. #TODO DUE DATE Provide a description This is the second step and the user needs to reply with a date. There is no callback path so no HTTP request will be performed after this step. The header is present here, so it will be displayed instead of the form header. #TODO PRIORITY A High priority B Low priority --Reply A-B This is the last step and the user needs to choose one option. After all steps have been processed, as indicated through method and path , the form will be serialized and an HTTP POST will be sent to the path which is relative to the callback url: http://your-callback.url/task/create/ So the POST will look like: ?descr=some_description&due_date=2019-10-10&prio=high","title":"JSON Example"},{"location":"building/form/#type","text":"The response type should be equal to form to indicate a form response.","title":"Type"},{"location":"building/form/#header","text":"The header of the form is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it.","title":"Header"},{"location":"building/form/#body","text":"The body holds an array of objects. Each object is called a FormItem and it is described in the Json Structure","title":"Body"},{"location":"building/form/#footer","text":"The footer of the form is indicated through footer key and like the header of the form, it is not final and will be altered by the ONEm platform. If no footer is specified, a default might be set.","title":"Footer"},{"location":"building/form/#path-method","text":"The path set in the Form object is triggered right after the form has been finished and confirmed by the user. All the values will be sent to your callback path as a form serialized data, ie object with key value pairs: name_of_the_form_item = user_input If there is a form-menu FormItem with multi_select set and the user chooses more than one option, then the value of the corresponding pair will be an array of the selected values.","title":"Path &amp; Method"},{"location":"building/form/#meta","text":"The meta key holds a FormMeta object used to indicate certain behaviors for the Form.","title":"Meta"},{"location":"building/html-tags/","text":"<section> \u00b6 A <section> body represents the SMS sent to the user by a micro-app. Constraints \u00b6 cannot be empty allowed children: text, <p> , <br/> , <header> , <footer> , <ul> , <input> , <label> Attributes \u00b6 header (string) - alternative to <header> child footer (string) - alternative to <footer> child name (string) - identifier within a <form> . Ignored if not inside a <form> . auto-select (boolean) - whether to select automatically the single option in a menu if it's the case multi-select (boolean) - whether to allow selecting multiple items in a list. Ignored if not inside a <form> . numbered (boolean) - whether to prefix the options with numbers (otherwise the prefixes will be letters). Ignored if not inside a <form> . chunking-footer (string) - shown in the footer of the sms chunks. Ignored if not inside a <form> . confirmation-label (string) - shown in the confirmation menu. Ignored if not inside a <form> . method (string) - http method, how the callback url should be triggered. Ignored if not inside a <form> . required (boolean) - can be skipped if set to false. Ignored if not inside a <form> . default (string) - used for not required form items, providing a default value when the item is skipped. status-exclude (boolean) - if true this step will be excluded from the form completion status.Ignored if not inside a <form> . status-prepend (boolean) - if true this step will be prepended to the body pre of the response - appended otherwise. Ignored if not inside a <form> . url (string) - callback url triggered right after the choice has been set for this form item. Ignored if not inside a <form> . validate-type-error (string) - an error message to be shown on basic type validation. Ignored if not inside a <form> . validate-type-error-footer (string) - shown in the error message footer. Ignored if not inside a <form> . validate-url (string) - the callback url path (GET) triggered to validate user input with query string ?name=user_input - url must return JSON content {\"valid\": true/false, \"error\": \"Some validation error message\"}. Ignored if not inside a <form> . Example \u00b6 1 2 3 < section > ... </ section > <p> \u00b6 A paragraph. Constraints \u00b6 cannot be empty allowed children: text Example \u00b6 1 2 3 4 5 < section > ... < p > Hi there! </ p > ... </ section > <header> \u00b6 Declares the header of a message. It overwrites the header attribute from <section> . It is formatted automatically before is sent to the user. Constraints \u00b6 cannot be empty allowed children: text if used, it must be the first child of a <section> tag Example \u00b6 1 2 3 4 < section > < header > MY APP </ header > ... </ section > <footer> \u00b6 Declares the footer of a message. It overwrites the footer attribute from . It should be relative short line of text and it is shown in the last chunk of a message, preceded by -- . Constraints \u00b6 cannot be empty allowed children: text if used, it must be the last child of a <section> tag Example \u00b6 1 2 3 4 < section > ... < footer > Reply A-D </ footer > </ section > <br> \u00b6 Renders a new line. Constraints \u00b6 allowed children: no Example \u00b6 1 2 3 4 5 < section > ... < br /> ... </ section > <ul> \u00b6 Declares a list. When rendered, it will be a selectable list, list elements are automatically prefixed by a letter or a number. See tag. Constraints \u00b6 cannot be empty allowed children: <li> Example \u00b6 1 2 3 4 5 6 7 < section > ... < ul > ... </ ul > ... </ section > <li> \u00b6 Declares a list item. If it contains an <a> tag, it will be selectable, prefixed with a letter or a number. Otherwise it\u2019s just an unselectable separator item. Constraints \u00b6 cannot be empty allowed children: text, <a> Attributes \u00b6 value - the value used for a form item response. It is ignored outside of a form context text-search - field to add more context for searching in options Example \u00b6 1 2 3 4 5 6 7 8 9 < section > ... < ul > < li text-search = \"More context for item 1\" > Item 1 </ li > < li > Item 2 </ li > < li > Item 3 </ li > </ ul > ... </ section > <a> \u00b6 It is used for redirection to other locations. Constraints \u00b6 cannot be empty allowed children: text Attributes \u00b6 href (string) - a path in your app to redirect the user to method (string) - the HTTP method used for redirection. Possible values: \"POST\", \"GET\", \"PATCH\", \"PUT\" Example \u00b6 1 2 3 4 5 6 7 < section > < ul > < li > < a href = \"/menu\" method = \"GET\" > Main menu </ a > </ li > </ ul > </ section > <input> \u00b6 Used inside forms to request specific input types from user. Only one <input/> tag is permitted per section. If many are present, only the first one is considered. Outside <form> tags, the <input/> tag is ignored. For asking the user to select from a predefined list of options, the <ul>...</ul> tag must be used instead of <input/> . Constraints \u00b6 allowed children: no Attributes \u00b6 Standard HTML5: \u00b6 type (string) - describes the data type expected by the app as response from the user. The platform will convert the text input to the specified type. The supported values are: Standard HTML5: \"date\" - the user input is validated as date \"email\" - the user input is validated as email address \"hidden\" - won't be displayed \"number\" - the user input is validated as any number (if integer is wanted, use type=\"number\" with step=\"1\" ) \"text\" - the user input is validated as text \"url\" - the user input is validated as url Non-standard: \"datetime\" - the user input is validated as datetime \"location\" - the user input is validated as location min (number) - validates the user input - for type=number minlength (integer) - validates the user input - for type=text max (number) - validates the user input - for type=number maxlength (integer) - validates the user input - for type=text step (integer) - specifies the legal number intervals for input field value (string) - required for type=hidden pattern (string) - defines a regex. type is ignored and considered text . Non-standard \u00b6 min_error (string) - message to be shown on min error minlength_error (string) - message to be shown on minlength error max_error (string) - message to be shown on max error maxlength_error (string) - message to be shown on maxlength error Example \u00b6 1 2 3 4 5 < section > ... < input type = \"text\" /> ... </ section > <label> \u00b6 Text to describe an input. It has the same behavior as <p> tag. Constraints \u00b6 cannot be empty allowed children: text Example \u00b6 1 2 3 4 5 < section > ... < label > Please send your name </ label > ... </ section > <form> \u00b6 The <form> tag is used to capture user input. Constraints \u00b6 cannot be empty allowed children: <section> Attributes \u00b6 action (string) - a path in the app where the result of the form is sent method (string) - the HTTP method used for sending the result of the form. Allowed values: POST , GET , PATCH , PUT . header (string) - the header displayed in all the form's items that do not declare a header footer (string) - the footer displayed in all the form's items that do not declare a footer completion-status-show (boolean) - whether to show the user's progress within the form completion-status-in-header (boolean) - if true , show the user's progress in header, otherwise in body; ignored if completion-status-show is false. skip-confirmation (boolean) - If true will not ask for confirmation. Example \u00b6 1 2 3 4 < form action = \"/callback/form1\" method = \"POST\" skip-confirmation > < section > ... </ section > < section > ... </ section > </ form >","title":"Html tags"},{"location":"building/html-tags/#ltsectiongt","text":"A <section> body represents the SMS sent to the user by a micro-app.","title":"&lt;section&gt;"},{"location":"building/html-tags/#constraints","text":"cannot be empty allowed children: text, <p> , <br/> , <header> , <footer> , <ul> , <input> , <label>","title":"Constraints"},{"location":"building/html-tags/#attributes","text":"header (string) - alternative to <header> child footer (string) - alternative to <footer> child name (string) - identifier within a <form> . Ignored if not inside a <form> . auto-select (boolean) - whether to select automatically the single option in a menu if it's the case multi-select (boolean) - whether to allow selecting multiple items in a list. Ignored if not inside a <form> . numbered (boolean) - whether to prefix the options with numbers (otherwise the prefixes will be letters). Ignored if not inside a <form> . chunking-footer (string) - shown in the footer of the sms chunks. Ignored if not inside a <form> . confirmation-label (string) - shown in the confirmation menu. Ignored if not inside a <form> . method (string) - http method, how the callback url should be triggered. Ignored if not inside a <form> . required (boolean) - can be skipped if set to false. Ignored if not inside a <form> . default (string) - used for not required form items, providing a default value when the item is skipped. status-exclude (boolean) - if true this step will be excluded from the form completion status.Ignored if not inside a <form> . status-prepend (boolean) - if true this step will be prepended to the body pre of the response - appended otherwise. Ignored if not inside a <form> . url (string) - callback url triggered right after the choice has been set for this form item. Ignored if not inside a <form> . validate-type-error (string) - an error message to be shown on basic type validation. Ignored if not inside a <form> . validate-type-error-footer (string) - shown in the error message footer. Ignored if not inside a <form> . validate-url (string) - the callback url path (GET) triggered to validate user input with query string ?name=user_input - url must return JSON content {\"valid\": true/false, \"error\": \"Some validation error message\"}. Ignored if not inside a <form> .","title":"Attributes"},{"location":"building/html-tags/#example","text":"1 2 3 < section > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltpgt","text":"A paragraph.","title":"&lt;p&gt;"},{"location":"building/html-tags/#constraints_1","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html-tags/#example_1","text":"1 2 3 4 5 < section > ... < p > Hi there! </ p > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltheadergt","text":"Declares the header of a message. It overwrites the header attribute from <section> . It is formatted automatically before is sent to the user.","title":"&lt;header&gt;"},{"location":"building/html-tags/#constraints_2","text":"cannot be empty allowed children: text if used, it must be the first child of a <section> tag","title":"Constraints"},{"location":"building/html-tags/#example_2","text":"1 2 3 4 < section > < header > MY APP </ header > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltfootergt","text":"Declares the footer of a message. It overwrites the footer attribute from . It should be relative short line of text and it is shown in the last chunk of a message, preceded by -- .","title":"&lt;footer&gt;"},{"location":"building/html-tags/#constraints_3","text":"cannot be empty allowed children: text if used, it must be the last child of a <section> tag","title":"Constraints"},{"location":"building/html-tags/#example_3","text":"1 2 3 4 < section > ... < footer > Reply A-D </ footer > </ section >","title":"Example"},{"location":"building/html-tags/#ltbrgt","text":"Renders a new line.","title":"&lt;br&gt;"},{"location":"building/html-tags/#constraints_4","text":"allowed children: no","title":"Constraints"},{"location":"building/html-tags/#example_4","text":"1 2 3 4 5 < section > ... < br /> ... </ section >","title":"Example"},{"location":"building/html-tags/#ltulgt","text":"Declares a list. When rendered, it will be a selectable list, list elements are automatically prefixed by a letter or a number. See tag.","title":"&lt;ul&gt;"},{"location":"building/html-tags/#constraints_5","text":"cannot be empty allowed children: <li>","title":"Constraints"},{"location":"building/html-tags/#example_5","text":"1 2 3 4 5 6 7 < section > ... < ul > ... </ ul > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltligt","text":"Declares a list item. If it contains an <a> tag, it will be selectable, prefixed with a letter or a number. Otherwise it\u2019s just an unselectable separator item.","title":"&lt;li&gt;"},{"location":"building/html-tags/#constraints_6","text":"cannot be empty allowed children: text, <a>","title":"Constraints"},{"location":"building/html-tags/#attributes_1","text":"value - the value used for a form item response. It is ignored outside of a form context text-search - field to add more context for searching in options","title":"Attributes"},{"location":"building/html-tags/#example_6","text":"1 2 3 4 5 6 7 8 9 < section > ... < ul > < li text-search = \"More context for item 1\" > Item 1 </ li > < li > Item 2 </ li > < li > Item 3 </ li > </ ul > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltagt","text":"It is used for redirection to other locations.","title":"&lt;a&gt;"},{"location":"building/html-tags/#constraints_7","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html-tags/#attributes_2","text":"href (string) - a path in your app to redirect the user to method (string) - the HTTP method used for redirection. Possible values: \"POST\", \"GET\", \"PATCH\", \"PUT\"","title":"Attributes"},{"location":"building/html-tags/#example_7","text":"1 2 3 4 5 6 7 < section > < ul > < li > < a href = \"/menu\" method = \"GET\" > Main menu </ a > </ li > </ ul > </ section >","title":"Example"},{"location":"building/html-tags/#ltinputgt","text":"Used inside forms to request specific input types from user. Only one <input/> tag is permitted per section. If many are present, only the first one is considered. Outside <form> tags, the <input/> tag is ignored. For asking the user to select from a predefined list of options, the <ul>...</ul> tag must be used instead of <input/> .","title":"&lt;input&gt;"},{"location":"building/html-tags/#constraints_8","text":"allowed children: no","title":"Constraints"},{"location":"building/html-tags/#attributes_3","text":"","title":"Attributes"},{"location":"building/html-tags/#standard-html5","text":"type (string) - describes the data type expected by the app as response from the user. The platform will convert the text input to the specified type. The supported values are: Standard HTML5: \"date\" - the user input is validated as date \"email\" - the user input is validated as email address \"hidden\" - won't be displayed \"number\" - the user input is validated as any number (if integer is wanted, use type=\"number\" with step=\"1\" ) \"text\" - the user input is validated as text \"url\" - the user input is validated as url Non-standard: \"datetime\" - the user input is validated as datetime \"location\" - the user input is validated as location min (number) - validates the user input - for type=number minlength (integer) - validates the user input - for type=text max (number) - validates the user input - for type=number maxlength (integer) - validates the user input - for type=text step (integer) - specifies the legal number intervals for input field value (string) - required for type=hidden pattern (string) - defines a regex. type is ignored and considered text .","title":"Standard HTML5:"},{"location":"building/html-tags/#non-standard","text":"min_error (string) - message to be shown on min error minlength_error (string) - message to be shown on minlength error max_error (string) - message to be shown on max error maxlength_error (string) - message to be shown on maxlength error","title":"Non-standard"},{"location":"building/html-tags/#example_8","text":"1 2 3 4 5 < section > ... < input type = \"text\" /> ... </ section >","title":"Example"},{"location":"building/html-tags/#ltlabelgt","text":"Text to describe an input. It has the same behavior as <p> tag.","title":"&lt;label&gt;"},{"location":"building/html-tags/#constraints_9","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html-tags/#example_9","text":"1 2 3 4 5 < section > ... < label > Please send your name </ label > ... </ section >","title":"Example"},{"location":"building/html-tags/#ltformgt","text":"The <form> tag is used to capture user input.","title":"&lt;form&gt;"},{"location":"building/html-tags/#constraints_10","text":"cannot be empty allowed children: <section>","title":"Constraints"},{"location":"building/html-tags/#attributes_4","text":"action (string) - a path in the app where the result of the form is sent method (string) - the HTTP method used for sending the result of the form. Allowed values: POST , GET , PATCH , PUT . header (string) - the header displayed in all the form's items that do not declare a header footer (string) - the footer displayed in all the form's items that do not declare a footer completion-status-show (boolean) - whether to show the user's progress within the form completion-status-in-header (boolean) - if true , show the user's progress in header, otherwise in body; ignored if completion-status-show is false. skip-confirmation (boolean) - If true will not ask for confirmation.","title":"Attributes"},{"location":"building/html-tags/#example_10","text":"1 2 3 4 < form action = \"/callback/form1\" method = \"POST\" skip-confirmation > < section > ... </ section > < section > ... </ section > </ form >","title":"Example"},{"location":"building/html/","text":"You can use the below html tags to generate a Response object Supported HTML Tags \u00b6 <section> \u00b6 A <section> body represents the SMS sent to the user by a micro-app. Constraints \u00b6 cannot be empty allowed children: text, <p> , <br/> , <header> , <footer> , <ul> , <input> , <label> Attributes \u00b6 header (string) - alternative to <header> child footer (string) - alternative to <footer> child name (string) - identifier within a <form> . Ignored if not inside a <form> . auto-select (boolean) - whether to select automatically the single option in a menu if it's the case multi-select (boolean) - whether to allow selecting multiple items in a list. Ignored if not inside a <form> . numbered (boolean) - whether to prefix the options with numbers (otherwise the prefixes will be letters). Ignored if not inside a <form> . chunking-footer (string) - shown in the footer of the sms chunks. Ignored if not inside a <form> . confirmation-label (string) - shown in the confirmation menu. Ignored if not inside a <form> . method (string) - http method, how the callback url should be triggered. Ignored if not inside a <form> . required (boolean) - can be skipped if set to false. Ignored if not inside a <form> . default (string) - used for not required form items, providing a default value when the item is skipped. status-exclude (boolean) - if true this step will be excluded from the form completion status.Ignored if not inside a <form> . status-prepend (boolean) - if true this step will be prepended to the body pre of the response - appended otherwise. Ignored if not inside a <form> . url (string) - callback url triggered right after the choice has been set for this form item. Ignored if not inside a <form> . validate-type-error (string) - an error message to be shown on basic type validation. Ignored if not inside a <form> . validate-type-error-footer (string) - shown in the error message footer. Ignored if not inside a <form> . validate-url (string) - the callback url path (GET) triggered to validate user input with query string ?name=user_input - url must return JSON content {\"valid\": true/false, \"error\": \"Some validation error message\"}. Ignored if not inside a <form> . Example \u00b6 1 2 3 < section > ... </ section > <p> \u00b6 A paragraph. Constraints \u00b6 cannot be empty allowed children: text Example \u00b6 1 2 3 4 5 < section > ... < p > Hi there! </ p > ... </ section > <header> \u00b6 Declares the header of a message. It overwrites the header attribute from <section> . It is formatted automatically before is sent to the user. Constraints \u00b6 cannot be empty allowed children: text if used, it must be the first child of a <section> tag Example \u00b6 1 2 3 4 < section > < header > MY APP </ header > ... </ section > <footer> \u00b6 Declares the footer of a message. It overwrites the footer attribute from . It should be relative short line of text and it is shown in the last chunk of a message, preceded by -- . Constraints \u00b6 cannot be empty allowed children: text if used, it must be the last child of a <section> tag Example \u00b6 1 2 3 4 < section > ... < footer > Reply A-D </ footer > </ section > <br> \u00b6 Renders a new line. Constraints \u00b6 allowed children: no Example \u00b6 1 2 3 4 5 < section > ... < br /> ... </ section > <ul> \u00b6 Declares a list. When rendered, it will be a selectable list, list elements are automatically prefixed by a letter or a number. See tag. Constraints \u00b6 cannot be empty allowed children: <li> Example \u00b6 1 2 3 4 5 6 7 < section > ... < ul > ... </ ul > ... </ section > <li> \u00b6 Declares a list item. If it contains an <a> tag, it will be selectable, prefixed with a letter or a number. Otherwise it\u2019s just an unselectable separator item. Constraints \u00b6 cannot be empty allowed children: text, <a> Attributes \u00b6 value - the value used for a form item response. It is ignored outside of a form context text-search - field to add more context for searching in options Example \u00b6 1 2 3 4 5 6 7 8 9 < section > ... < ul > < li text-search = \"More context for item 1\" > Item 1 </ li > < li > Item 2 </ li > < li > Item 3 </ li > </ ul > ... </ section > <a> \u00b6 It is used for redirection to other locations. Constraints \u00b6 cannot be empty allowed children: text Attributes \u00b6 href (string) - a path in your app to redirect the user to method (string) - the HTTP method used for redirection. Possible values: \"POST\", \"GET\", \"PATCH\", \"PUT\" Example \u00b6 1 2 3 4 5 6 7 < section > < ul > < li > < a href = \"/menu\" method = \"GET\" > Main menu </ a > </ li > </ ul > </ section > <input> \u00b6 Used inside forms to request specific input types from user. Only one <input/> tag is permitted per section. If many are present, only the first one is considered. Outside <form> tags, the <input/> tag is ignored. For asking the user to select from a predefined list of options, the <ul>...</ul> tag must be used instead of <input/> . Constraints \u00b6 allowed children: no Attributes \u00b6 Standard HTML5: \u00b6 type (string) - describes the data type expected by the app as response from the user. The platform will convert the text input to the specified type. The supported values are: Standard HTML5: \"date\" - the user input is validated as date \"email\" - the user input is validated as email address \"hidden\" - won't be displayed \"number\" - the user input is validated as any number (if integer is wanted, use type=\"number\" with step=\"1\" ) \"text\" - the user input is validated as text \"url\" - the user input is validated as url Non-standard: \"datetime\" - the user input is validated as datetime \"location\" - the user input is validated as location min (number) - validates the user input - for type=number minlength (integer) - validates the user input - for type=text max (number) - validates the user input - for type=number maxlength (integer) - validates the user input - for type=text step (integer) - specifies the legal number intervals for input field value (string) - required for type=hidden pattern (string) - defines a regex. type is ignored and considered text . Non-standard \u00b6 min_error (string) - message to be shown on min error minlength_error (string) - message to be shown on minlength error max_error (string) - message to be shown on max error maxlength_error (string) - message to be shown on maxlength error Example \u00b6 1 2 3 4 5 < section > ... < input type = \"text\" /> ... </ section > <label> \u00b6 Text to describe an input. It has the same behavior as <p> tag. Constraints \u00b6 cannot be empty allowed children: text Example \u00b6 1 2 3 4 5 < section > ... < label > Please send your name </ label > ... </ section > <form> \u00b6 The <form> tag is used to capture user input. Constraints \u00b6 cannot be empty allowed children: <section> Attributes \u00b6 action (string) - a path in the app where the result of the form is sent method (string) - the HTTP method used for sending the result of the form. Allowed values: POST , GET , PATCH , PUT . header (string) - the header displayed in all the form's items that do not declare a header footer (string) - the footer displayed in all the form's items that do not declare a footer completion-status-show (boolean) - whether to show the user's progress within the form completion-status-in-header (boolean) - if true , show the user's progress in header, otherwise in body; ignored if completion-status-show is false. skip-confirmation (boolean) - If true will not ask for confirmation. Example \u00b6 1 2 3 4 < form action = \"/callback/form1\" method = \"POST\" skip-confirmation > < section > ... </ section > < section > ... </ section > </ form >","title":"HTML tags"},{"location":"building/html/#supported-html-tags","text":"","title":"Supported HTML Tags"},{"location":"building/html/#ltsectiongt","text":"A <section> body represents the SMS sent to the user by a micro-app.","title":"&lt;section&gt;"},{"location":"building/html/#constraints","text":"cannot be empty allowed children: text, <p> , <br/> , <header> , <footer> , <ul> , <input> , <label>","title":"Constraints"},{"location":"building/html/#attributes","text":"header (string) - alternative to <header> child footer (string) - alternative to <footer> child name (string) - identifier within a <form> . Ignored if not inside a <form> . auto-select (boolean) - whether to select automatically the single option in a menu if it's the case multi-select (boolean) - whether to allow selecting multiple items in a list. Ignored if not inside a <form> . numbered (boolean) - whether to prefix the options with numbers (otherwise the prefixes will be letters). Ignored if not inside a <form> . chunking-footer (string) - shown in the footer of the sms chunks. Ignored if not inside a <form> . confirmation-label (string) - shown in the confirmation menu. Ignored if not inside a <form> . method (string) - http method, how the callback url should be triggered. Ignored if not inside a <form> . required (boolean) - can be skipped if set to false. Ignored if not inside a <form> . default (string) - used for not required form items, providing a default value when the item is skipped. status-exclude (boolean) - if true this step will be excluded from the form completion status.Ignored if not inside a <form> . status-prepend (boolean) - if true this step will be prepended to the body pre of the response - appended otherwise. Ignored if not inside a <form> . url (string) - callback url triggered right after the choice has been set for this form item. Ignored if not inside a <form> . validate-type-error (string) - an error message to be shown on basic type validation. Ignored if not inside a <form> . validate-type-error-footer (string) - shown in the error message footer. Ignored if not inside a <form> . validate-url (string) - the callback url path (GET) triggered to validate user input with query string ?name=user_input - url must return JSON content {\"valid\": true/false, \"error\": \"Some validation error message\"}. Ignored if not inside a <form> .","title":"Attributes"},{"location":"building/html/#example","text":"1 2 3 < section > ... </ section >","title":"Example"},{"location":"building/html/#ltpgt","text":"A paragraph.","title":"&lt;p&gt;"},{"location":"building/html/#constraints_1","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html/#example_1","text":"1 2 3 4 5 < section > ... < p > Hi there! </ p > ... </ section >","title":"Example"},{"location":"building/html/#ltheadergt","text":"Declares the header of a message. It overwrites the header attribute from <section> . It is formatted automatically before is sent to the user.","title":"&lt;header&gt;"},{"location":"building/html/#constraints_2","text":"cannot be empty allowed children: text if used, it must be the first child of a <section> tag","title":"Constraints"},{"location":"building/html/#example_2","text":"1 2 3 4 < section > < header > MY APP </ header > ... </ section >","title":"Example"},{"location":"building/html/#ltfootergt","text":"Declares the footer of a message. It overwrites the footer attribute from . It should be relative short line of text and it is shown in the last chunk of a message, preceded by -- .","title":"&lt;footer&gt;"},{"location":"building/html/#constraints_3","text":"cannot be empty allowed children: text if used, it must be the last child of a <section> tag","title":"Constraints"},{"location":"building/html/#example_3","text":"1 2 3 4 < section > ... < footer > Reply A-D </ footer > </ section >","title":"Example"},{"location":"building/html/#ltbrgt","text":"Renders a new line.","title":"&lt;br&gt;"},{"location":"building/html/#constraints_4","text":"allowed children: no","title":"Constraints"},{"location":"building/html/#example_4","text":"1 2 3 4 5 < section > ... < br /> ... </ section >","title":"Example"},{"location":"building/html/#ltulgt","text":"Declares a list. When rendered, it will be a selectable list, list elements are automatically prefixed by a letter or a number. See tag.","title":"&lt;ul&gt;"},{"location":"building/html/#constraints_5","text":"cannot be empty allowed children: <li>","title":"Constraints"},{"location":"building/html/#example_5","text":"1 2 3 4 5 6 7 < section > ... < ul > ... </ ul > ... </ section >","title":"Example"},{"location":"building/html/#ltligt","text":"Declares a list item. If it contains an <a> tag, it will be selectable, prefixed with a letter or a number. Otherwise it\u2019s just an unselectable separator item.","title":"&lt;li&gt;"},{"location":"building/html/#constraints_6","text":"cannot be empty allowed children: text, <a>","title":"Constraints"},{"location":"building/html/#attributes_1","text":"value - the value used for a form item response. It is ignored outside of a form context text-search - field to add more context for searching in options","title":"Attributes"},{"location":"building/html/#example_6","text":"1 2 3 4 5 6 7 8 9 < section > ... < ul > < li text-search = \"More context for item 1\" > Item 1 </ li > < li > Item 2 </ li > < li > Item 3 </ li > </ ul > ... </ section >","title":"Example"},{"location":"building/html/#ltagt","text":"It is used for redirection to other locations.","title":"&lt;a&gt;"},{"location":"building/html/#constraints_7","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html/#attributes_2","text":"href (string) - a path in your app to redirect the user to method (string) - the HTTP method used for redirection. Possible values: \"POST\", \"GET\", \"PATCH\", \"PUT\"","title":"Attributes"},{"location":"building/html/#example_7","text":"1 2 3 4 5 6 7 < section > < ul > < li > < a href = \"/menu\" method = \"GET\" > Main menu </ a > </ li > </ ul > </ section >","title":"Example"},{"location":"building/html/#ltinputgt","text":"Used inside forms to request specific input types from user. Only one <input/> tag is permitted per section. If many are present, only the first one is considered. Outside <form> tags, the <input/> tag is ignored. For asking the user to select from a predefined list of options, the <ul>...</ul> tag must be used instead of <input/> .","title":"&lt;input&gt;"},{"location":"building/html/#constraints_8","text":"allowed children: no","title":"Constraints"},{"location":"building/html/#attributes_3","text":"","title":"Attributes"},{"location":"building/html/#standard-html5","text":"type (string) - describes the data type expected by the app as response from the user. The platform will convert the text input to the specified type. The supported values are: Standard HTML5: \"date\" - the user input is validated as date \"email\" - the user input is validated as email address \"hidden\" - won't be displayed \"number\" - the user input is validated as any number (if integer is wanted, use type=\"number\" with step=\"1\" ) \"text\" - the user input is validated as text \"url\" - the user input is validated as url Non-standard: \"datetime\" - the user input is validated as datetime \"location\" - the user input is validated as location min (number) - validates the user input - for type=number minlength (integer) - validates the user input - for type=text max (number) - validates the user input - for type=number maxlength (integer) - validates the user input - for type=text step (integer) - specifies the legal number intervals for input field value (string) - required for type=hidden pattern (string) - defines a regex. type is ignored and considered text .","title":"Standard HTML5:"},{"location":"building/html/#non-standard","text":"min_error (string) - message to be shown on min error minlength_error (string) - message to be shown on minlength error max_error (string) - message to be shown on max error maxlength_error (string) - message to be shown on maxlength error","title":"Non-standard"},{"location":"building/html/#example_8","text":"1 2 3 4 5 < section > ... < input type = \"text\" /> ... </ section >","title":"Example"},{"location":"building/html/#ltlabelgt","text":"Text to describe an input. It has the same behavior as <p> tag.","title":"&lt;label&gt;"},{"location":"building/html/#constraints_9","text":"cannot be empty allowed children: text","title":"Constraints"},{"location":"building/html/#example_9","text":"1 2 3 4 5 < section > ... < label > Please send your name </ label > ... </ section >","title":"Example"},{"location":"building/html/#ltformgt","text":"The <form> tag is used to capture user input.","title":"&lt;form&gt;"},{"location":"building/html/#constraints_10","text":"cannot be empty allowed children: <section>","title":"Constraints"},{"location":"building/html/#attributes_4","text":"action (string) - a path in the app where the result of the form is sent method (string) - the HTTP method used for sending the result of the form. Allowed values: POST , GET , PATCH , PUT . header (string) - the header displayed in all the form's items that do not declare a header footer (string) - the footer displayed in all the form's items that do not declare a footer completion-status-show (boolean) - whether to show the user's progress within the form completion-status-in-header (boolean) - if true , show the user's progress in header, otherwise in body; ignored if completion-status-show is false. skip-confirmation (boolean) - If true will not ask for confirmation.","title":"Attributes"},{"location":"building/html/#example_10","text":"1 2 3 4 < form action = \"/callback/form1\" method = \"POST\" skip-confirmation > < section > ... </ section > < section > ... </ section > </ form >","title":"Example"},{"location":"building/menu/","text":"A menu represents a type of response ONEm sends back to the user and it allows the user to select certain options you put in the menu. It is composed by a header , a body and a footer . The body can contain option or content items. When an option is being accessed, ONEm platform will perform an HTTP request to the callback path you set. JSON Structure \u00b6 All fields prefixed with a star (*) are required Menu \u00b6 A top level component used to display a menu or raw text KEY TYPE NOTES *body array Composed of MenuItem objects footer string The header of the menu header string The header of the menu meta object MenuMeta object. Contains configuration flags *type string Indicates the type of the object, defaults to \"menu\" MenuItem \u00b6 Menu related component used to display menu items, selectable or raw KEY TYPE NOTES *description string The displayed text for this MenuItem method string HTTP method indicating how to trigger the callback path. Defaults to \"GET\" available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" path string Next route callback path, accessed upon user selection required only for type=option text_search string If the user does not send a proper option marker and sends some input, this field will be used to search and narrow down the options against the user input. max 1000 chars *type string Indicates the type of the object available: \"option\", \"content\" MenuMeta \u00b6 Menu related component holding configuration fields for the menu KEY TYPE NOTES auto_select boolean Will be automatically selected if set to true and in case of a single option in the menu Swagger \u00b6 The schema can also be found on Swagger Hub here JSON Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"body\" : [ { \"description\" : \"New todo\" , \"method\" : \"GET\" , \"path\" : \"/task/create/\" , \"type\" : \"option\" }, { \"description\" : \"Done(0)\" , \"method\" : \"GET\" , \"path\" : \"/task/list/done/\" , \"type\" : \"option\" }, { \"description\" : \"Todo(1)\" , \"method\" : null , \"path\" : null , \"type\" : \"content\" }, { \"description\" : \"buy coffee 2019-07-01\" , \"method\" : \"GET\" , \"path\" : \"/task/7/\" , \"type\" : \"option\" } ], \"footer\" : null , \"header\" : \"home\" , \"type\" : \"menu\" } Notice the 'type': 'menu' key value pair, which indicates the menu response. So when the user accesses your todo app, by sending #todo , ONEm will send a GET request to the callback_url as mentioned in here . Your url should return something like the above json structure. The response back to the user will be an SMS which will look like: #TODO HOME A New todo B Done(0) Todo(1) C buy coffee 2019-07-01 --Reply A-C Type \u00b6 The response type should be equal to menu to indicate a menu response. Header \u00b6 The header of the menu is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it. Body \u00b6 The body of the menu is indicated through body key and it is a sequence of dictionaries. Each dictionary can be an option or a content item and this is set through the type key. A content type item does not need a path nor a method since these are not selectable by the user. However an option item needs a callback path and this is relative to the callback_url set in the app schema in the developer portal. If the method is not present, it will default to GET. NOTE: A body composed of only content items could be used for display purposes only. This is called a raw response. Footer \u00b6 The footer of the menu is indicated through footer key and like the header of the menu, it is not final and will be altered by the ONEm platform. If no footer is specified, a default is set like in the above example.","title":"Menu"},{"location":"building/menu/#json-structure","text":"All fields prefixed with a star (*) are required","title":"JSON Structure"},{"location":"building/menu/#menu","text":"A top level component used to display a menu or raw text KEY TYPE NOTES *body array Composed of MenuItem objects footer string The header of the menu header string The header of the menu meta object MenuMeta object. Contains configuration flags *type string Indicates the type of the object, defaults to \"menu\"","title":"Menu"},{"location":"building/menu/#menuitem","text":"Menu related component used to display menu items, selectable or raw KEY TYPE NOTES *description string The displayed text for this MenuItem method string HTTP method indicating how to trigger the callback path. Defaults to \"GET\" available: \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"HEAD\", \"OPTIONS\", \"TRACE\" path string Next route callback path, accessed upon user selection required only for type=option text_search string If the user does not send a proper option marker and sends some input, this field will be used to search and narrow down the options against the user input. max 1000 chars *type string Indicates the type of the object available: \"option\", \"content\"","title":"MenuItem"},{"location":"building/menu/#menumeta","text":"Menu related component holding configuration fields for the menu KEY TYPE NOTES auto_select boolean Will be automatically selected if set to true and in case of a single option in the menu","title":"MenuMeta"},{"location":"building/menu/#swagger","text":"The schema can also be found on Swagger Hub here","title":"Swagger"},{"location":"building/menu/#json-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \"body\" : [ { \"description\" : \"New todo\" , \"method\" : \"GET\" , \"path\" : \"/task/create/\" , \"type\" : \"option\" }, { \"description\" : \"Done(0)\" , \"method\" : \"GET\" , \"path\" : \"/task/list/done/\" , \"type\" : \"option\" }, { \"description\" : \"Todo(1)\" , \"method\" : null , \"path\" : null , \"type\" : \"content\" }, { \"description\" : \"buy coffee 2019-07-01\" , \"method\" : \"GET\" , \"path\" : \"/task/7/\" , \"type\" : \"option\" } ], \"footer\" : null , \"header\" : \"home\" , \"type\" : \"menu\" } Notice the 'type': 'menu' key value pair, which indicates the menu response. So when the user accesses your todo app, by sending #todo , ONEm will send a GET request to the callback_url as mentioned in here . Your url should return something like the above json structure. The response back to the user will be an SMS which will look like: #TODO HOME A New todo B Done(0) Todo(1) C buy coffee 2019-07-01 --Reply A-C","title":"JSON Example"},{"location":"building/menu/#type","text":"The response type should be equal to menu to indicate a menu response.","title":"Type"},{"location":"building/menu/#header","text":"The header of the menu is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it.","title":"Header"},{"location":"building/menu/#body","text":"The body of the menu is indicated through body key and it is a sequence of dictionaries. Each dictionary can be an option or a content item and this is set through the type key. A content type item does not need a path nor a method since these are not selectable by the user. However an option item needs a callback path and this is relative to the callback_url set in the app schema in the developer portal. If the method is not present, it will default to GET. NOTE: A body composed of only content items could be used for display purposes only. This is called a raw response.","title":"Body"},{"location":"building/menu/#footer","text":"The footer of the menu is indicated through footer key and like the header of the menu, it is not final and will be altered by the ONEm platform. If no footer is specified, a default is set like in the above example.","title":"Footer"},{"location":"building/raw/","text":"A raw response is a just a plain menu , that is the body of the menu does not contain any option items. This means that no path or method are needed in the content item of the body , since the user cannot select anything as there are no options available like in a menu. JSON Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 { \"body\" : [ { \"description\" : \"Your task has been created!\" , \"type\" : \"content\" } ], \"header\" : \"done\" , \"footer\" : null , \"type\" : \"menu\" } The response back to the user will be an SMS which will look like: #TODO DONE Your task has been created!","title":"Raw"},{"location":"building/raw/#json-example","text":"1 2 3 4 5 6 7 8 9 10 11 { \"body\" : [ { \"description\" : \"Your task has been created!\" , \"type\" : \"content\" } ], \"header\" : \"done\" , \"footer\" : null , \"type\" : \"menu\" } The response back to the user will be an SMS which will look like: #TODO DONE Your task has been created!","title":"JSON Example"},{"location":"building/register/","text":"TODO","title":"Register"},{"location":"building/response/","text":"Every request made by ONEm platform towards a micro app must result in an HTTP response with json content. All fields prefixed with a star (*) are required Response \u00b6 Root component wrapping a Menu or a Form KEY TYPE NOTES *content object The content of the response. Either Form or a Menu *content_type string The content type of the response available: \"form\", \"menu\"","title":"Response"},{"location":"building/response/#response","text":"Root component wrapping a Menu or a Form KEY TYPE NOTES *content object The content of the response. Either Form or a Menu *content_type string The content type of the response available: \"form\", \"menu\"","title":"Response"},{"location":"building/webhooks/","text":"Webhooks \u00b6 App webhooks enable you to receive notifications when certain events happen. Webhook notifications are sent as HTTP POST requests to a URL of your choosing. To integrate with webhooks, you need to implement a server endpoint that receives and handles these requests. As a minimum, when you register your app on the developer portal , you will need to define a user_action webhook so that your app can receive notifications whenever your users perform actions that your app must handle. Currently, the user_action webhook is triggered when your users: Select a menu option Send a pre-defined verb Submit a form In the future, more webhooks will be added, so stay tuned.","title":"Webhooks"},{"location":"building/webhooks/#webhooks","text":"App webhooks enable you to receive notifications when certain events happen. Webhook notifications are sent as HTTP POST requests to a URL of your choosing. To integrate with webhooks, you need to implement a server endpoint that receives and handles these requests. As a minimum, when you register your app on the developer portal , you will need to define a user_action webhook so that your app can receive notifications whenever your users perform actions that your app must handle. Currently, the user_action webhook is triggered when your users: Select a menu option Send a pre-defined verb Submit a form In the future, more webhooks will be added, so stay tuned.","title":"Webhooks"},{"location":"core/accessing_your_micro_app/","text":"Ok, so we've mentioned that your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. This is the general way to access your micro app. Verbs and parameters \u00b6 As a ONEm developer, you can implement particular ways for your users to access specific areas of your micro-app. We call these verbs and, in a nutshell, they are shortcuts to specific callback paths you define in the developer portal. Also, parameters can be sent to the verbs so even more specific areas can be accessed. Attention There are some reserved verbs you cannot use. Example \u00b6 To understand this better, let's take an example: We have a micro-app named barbershop . Our users can: Access it directly by sending #barbershop to the ONEm platform. Access a list of appointments by sending #barbershop appointments . Access a list of narrowed down appointments by sending #barbershop appointments today . For points 2 and 3 above to work, we need to define in the developer portal a verb named appointments and map it to a callback path. If our callback path looks like /appointment/list and the user sends parameters, as mentioned in the third point above, then ONEm platform will launch an HTTP GET request with a query string: /appointment/list?params=today Synopsis \u00b6 Accessing a micro app: #app [verb] [parameters] verb is optional if not present an HTTP GET request will be made against /app-callback-path defined in the developer portal if present an HTTP GET request will be made against /verb-callback-path defined in the developer portal parameters is optional and if present will be sent url encoded to the relative callback url path: /app-or-verb-callback-path/?params=parameters","title":"Accessing your micro-app"},{"location":"core/accessing_your_micro_app/#verbs-and-parameters","text":"As a ONEm developer, you can implement particular ways for your users to access specific areas of your micro-app. We call these verbs and, in a nutshell, they are shortcuts to specific callback paths you define in the developer portal. Also, parameters can be sent to the verbs so even more specific areas can be accessed. Attention There are some reserved verbs you cannot use.","title":"Verbs and parameters"},{"location":"core/accessing_your_micro_app/#example","text":"To understand this better, let's take an example: We have a micro-app named barbershop . Our users can: Access it directly by sending #barbershop to the ONEm platform. Access a list of appointments by sending #barbershop appointments . Access a list of narrowed down appointments by sending #barbershop appointments today . For points 2 and 3 above to work, we need to define in the developer portal a verb named appointments and map it to a callback path. If our callback path looks like /appointment/list and the user sends parameters, as mentioned in the third point above, then ONEm platform will launch an HTTP GET request with a query string: /appointment/list?params=today","title":"Example"},{"location":"core/accessing_your_micro_app/#synopsis","text":"Accessing a micro app: #app [verb] [parameters] verb is optional if not present an HTTP GET request will be made against /app-callback-path defined in the developer portal if present an HTTP GET request will be made against /verb-callback-path defined in the developer portal parameters is optional and if present will be sent url encoded to the relative callback url path: /app-or-verb-callback-path/?params=parameters","title":"Synopsis"},{"location":"core/callback_api/","text":"The below diagram presents the high level overview of the ONEm Framework. Diagram \u00b6 So basically what happens is the follwing: The user sends some sms to the ONEm platform number. ONEm platform figures out there is a request for your micro app and performs an HTTP request towards the micro app web server. Certain information about this request is placed in the HTTP request headers. The micro app webserver is responsible to return an HTTP json* response. At this point the micro app can query the ONEm API to fetch various data. Once the ONEm platform receives the HTTP json response, it builds an sms based on it and sends it back to the user. * although the json response can be built however one sees fit, based on the ONEm response definition, it is highly recommended to use the official ONEm SDK to build the json response Example \u00b6 The user sends #todo to the ONEm platform number. ONEm platform receives the sms and performs an HTTP GET request towards the callback path set in the developer portal. The todo webserver handles the GET request and returns an HTTP json response. ONEm platform takes the JSON and builds an sms. Finally the sms is sent back to the user. This is similar to what is described here Then its a repeat phase: The user sends a to select the first menu item ONEm platform receives the sms and performs an HTTP request towards the callback path assigned to the first menu item. The todo webserver handles the HTTP request and returns an HTTP json response. This json might indicate another menu or a form . ONEm platform takes the JSON and builds the sms response to the request launched by the user at the first step of the cycle.","title":"(callback vs ONEm API)"},{"location":"core/callback_api/#diagram","text":"So basically what happens is the follwing: The user sends some sms to the ONEm platform number. ONEm platform figures out there is a request for your micro app and performs an HTTP request towards the micro app web server. Certain information about this request is placed in the HTTP request headers. The micro app webserver is responsible to return an HTTP json* response. At this point the micro app can query the ONEm API to fetch various data. Once the ONEm platform receives the HTTP json response, it builds an sms based on it and sends it back to the user. * although the json response can be built however one sees fit, based on the ONEm response definition, it is highly recommended to use the official ONEm SDK to build the json response","title":"Diagram"},{"location":"core/callback_api/#example","text":"The user sends #todo to the ONEm platform number. ONEm platform receives the sms and performs an HTTP GET request towards the callback path set in the developer portal. The todo webserver handles the GET request and returns an HTTP json response. ONEm platform takes the JSON and builds an sms. Finally the sms is sent back to the user. This is similar to what is described here Then its a repeat phase: The user sends a to select the first menu item ONEm platform receives the sms and performs an HTTP request towards the callback path assigned to the first menu item. The todo webserver handles the HTTP request and returns an HTTP json response. This json might indicate another menu or a form . ONEm platform takes the JSON and builds the sms response to the request launched by the user at the first step of the cycle.","title":"Example"},{"location":"core/headers_footers/","text":"Every response message from ONEm Platform will have the following structure: HEADER - each messages will have a header that indicates the name of the application and the section of the displayed content. This will allow users to get localised into the application serving as page title and/or breadcrumbs. BODY - the body is the most important section of the message and handles the content being displayed to the user. It may consist of text or selectable options. The end of the body will have the number of chunks remaining in the content selection. Will explain the chunks later on. The body can display a MENU , a simple text or a FORM . FOOTER - the footer is where information like 'hints' is attached to the bottom of the message. In here, users will find guidelines regarding next available actions. All this might be more intuitive with an example from #onem application: #ONEM MENU A My account B Invite friends to chat C Create SMS group chats (xGroup) D Services E How to use --Reply A-E","title":"Headers and footers"},{"location":"core/menus_forms/","text":"The example in the previous section is the landing page of #onem application, also considered the main menu. The first message presents user with the main options that can be accessed and offers a navigation possibility. As you probably figured out, the user can access account information, chat with friends, see available services or follow a tutorial on how to use ONEm features. Each available option has a letter attached to it to facilitate user response. As hinted in the footer, the user can send one of the letters to access the corresponding menu item. This is the menu concept. Each option is displayed on a new line and has associated an action to it that will result in another message displayed to the user. Another important topic to talk about regards capturing user input. Any webpage or web application will present users with a form to complete and submit. This is rather difficult in the SMS version of ONEm applications, but getting help from wizards, forms are completed step by step, each form field translates in a new message asking user for a free response or choose from a list of options. When all information is gathered, the user can review and submit the form through a supplementary confirmation step. No worries, we dedicated an entire section to forms and how you can create one insert link here","title":"Menus and forms"},{"location":"core/paging/","text":"Let's get back to message body. The amount of information displayed to the user, along with header and footer, can exceed the sms size. In this case, the ONEm platform will split body information in several messages called chunks, adding a paging system that allows users to access more than can fit one single SMS. At the end of each sms body, right before the footer, there will be automatically added information about current chunk and total number of chunks in which the message was split. This mechanism applies both to simple text, like a news article, and options lists that are too long to be displayed in one message. A relevant example for this mechanism can be extracted from our #wiki micro app. The article's introduction about SMS is paginated in 8 chunks and the first 2 are presented below. The hint from footer, \"more\" , is used to navigate to the next chunk. #WIKI (ENGLISH) SMS SEARCH SMS (short message service) is a text messaging service component of most telephone, Internet, and mobile device systems. It uses standardized ..1/8 --MORE/BACK more communication protocols to enable mobile devices to exchange short text messages. An intermediary service can facilitate a text-to-voice conversion to be sent to landlines. SMS was ..2/8 --MORE/BACK","title":"Paging"},{"location":"core/reserved_verbs/","text":"There are a couple of reserved verbs which ONEm platform implements. These cannot be used or overridden and will automatically work in your micro-app. Verb Name Notes back Allows the user to go back to the previous screen credits Shows app credits go Shows a specific chunk, e.g: go 4 , shows 4th chunk help Shows app help menu Shows app home menu mode Shows the current app more Goes to next available chunk options Shows the current options size Sets the sms size tips Toggles footers tutorial Shows app tutorial","title":"Reserved verbs"},{"location":"core/structure/","text":"Before dissecting the structure of applications, keep in mind that SMS does not facilitate the use of images or media files as web does. Though ONEm applications work also over internet, we offer users the same experience and interface. As explained in the previous section, the web-address is transposed to #app_name A website/web application provides pages, navigation system, hints and, most important, content. Let's see how those are translated to a ONEm application. To see all these concepts at work, with real ONEm examples, and much more you can watch this Platform Demo:","title":"Structure"},{"location":"core/todo/","text":"","title":"Validation"},{"location":"core/your_micro_app/","text":"Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. As a ONEm developer, after you create and register your application on the developer portal you should follow the necessary steps to configure it to return standardised JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users. When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app.","title":"Your micro-app"},{"location":"getting_started/glance/","text":"New to ONEm apps? Alright, you came to the right place. Here is what you need to know: First you need to have a webserver able to return specific json http responses, like menus and forms . Then you will need to register your app on ONEm developer portal. Sign-up here for a free developer account. Once you have done the above, you can access your application on the ONEm platform. link to what are ONEm apps Checkout our Python or Node.js tutorials for more in depth details.","title":"At a glance"},{"location":"getting_started/nodejs-old/","text":"Introduction \u00b6 This tutorial will have you deploying a Node.js app to ONEm in minutes. In this tutorial items marked in yellow are essential and should be noted for completing certain processes. The tutorial assumes that you have a free or paid ONEm account , and that you have the following prerequisites installed locally: Node.js npm which is installed with Node.js git ngrok Visual Studio Code Set up on localhost \u00b6 To start with, we will be running all commands locally on your own PC. Your app will initially be hosted there for local development, then later you will learn how to host your app with a hosting provider for use on production. Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: 1 2 $ node --version v10.15.3 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: 1 2 $ npm --version 6 .9.0 Now check that you have git installed: 1 2 $ git --version git version 2 .15.1 We will use ngrok to provide a secure tunnel between your app running on localhost and the ONEm servers. Check it's installed: 1 2 $ ./ngrok --version ngrok version 2 .3.29 Prepare the app \u00b6 In this step, you will prepare a simple Hello World application. To clone a local version of the sample application, execute the following command in your local command shell or terminal: 1 $ git clone https://github.com/chrishornmem/hello-world.git && cd hello-world You now have a functioning git repository that contains the Hello World application as well as a package.json file, which is used by npm (Node\u2019s dependency manager). Install the package dependencies with npm: 1 $ npm install Configure the app \u00b6 The Hello World example application listens on the HTTP port defined by the environment variable PORT or 8080 by default. You can change the port by creating a .env file in your app's root directory and specifying the desired port value: Port \u00b6 1 PORT=8080 Token secret \u00b6 Webhooks triggered by the ONEm platform contain a JWT token in the authorzation header. The JWT token carries the unique identity of the ONEm user so that your app can differentiate requests from different users. In order to verify jwt tokens that are sent by the ONEm platform, the token secret should be configured. For the sandbox, this secret is 87654321 . Configure the secret in the .env file: 1 TOKEN_SECRET=87654321 Run the app \u00b6 Start the app with: 1 $ npm run start You should see output similar to the following in the console: 1 Listening on port 8080 Now run ngrok so that your app is visible to the ONEm servers. 1 $ ./ngrok http 8080 ngrok will launch a continuous display to the console. Make a note of the http or https forwarding address. In the example below the address is http://6e3f3fce.ngrok.io : 1 Forwarding http://6e3f3fce.ngrok.io -> http://localhost:8080 Navigate to the forwarding link on your browser and you should see a Hello World greeting. The Hello World example app expects to receive HTTP requests as users perform certain actions. We call this the user_action webhook . The app expects to receive user action notifications on the base path: /api . The ONEm platform will need to be configured with the fully qualified URL of this endpoint, including the base path. In our example above, the user_action webhook URL would be http://6e3f3fce.ngrok.io/api Make a note of your user_action URL, you will need it in the next step. Register the app with ONEm Sandbox Portal \u00b6 If you have not already done so, sign-up for a free ONEm developer account on the sandbox. Register your app on the ONEm Sandbox Portal. You will need to provide: A unique one-word name for your app, e.g hello A description of your app A link to your website The user_action URL you obtained from the previous step Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials. Make sure the details are saved correctly in the portal. Test the app \u00b6 Head over to our sandbox test tool , we call it ONEm Zone . Sign-up and then in the input field, enter # followed by your app's name, for example #HELLO if your app is called hello . If you have completed everything correctly, the ONEm system should respond with a menu, similar to the below: 1 2 3 4 5 #HELLO WORLD A First option B Second option C Third option --Reply A-C If you see the above, congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better. If you don't see the above done worry, go back and check that each step has been followed properly and your program will soon be up and running. Running your app in production \u00b6 Choose a hosting platform \u00b6 Your app will need to be hosted on the internet so that ONEm's platform can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure Install and deploy your app on production \u00b6 Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku you would use: 1 2 $ heroku create $ git push heroku master Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080 Register the app with ONEm Production Portal \u00b6 You will need to edit your App details and update the user_action URL field, provide the fully qualified URL of your application's base API path. You can access your account here . Remember to add /api to your url so the ONEm platform can reach to your app. Verifying on production \u00b6 Head over to our production verification site onem.zone and verify that your app is responding as expected. If you haven't already signed up you will need to have a mobile ands register using a google or facebook account.","title":"Nodejs old"},{"location":"getting_started/nodejs-old/#introduction","text":"This tutorial will have you deploying a Node.js app to ONEm in minutes. In this tutorial items marked in yellow are essential and should be noted for completing certain processes. The tutorial assumes that you have a free or paid ONEm account , and that you have the following prerequisites installed locally: Node.js npm which is installed with Node.js git ngrok Visual Studio Code","title":"Introduction"},{"location":"getting_started/nodejs-old/#set-up-on-localhost","text":"To start with, we will be running all commands locally on your own PC. Your app will initially be hosted there for local development, then later you will learn how to host your app with a hosting provider for use on production. Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: 1 2 $ node --version v10.15.3 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: 1 2 $ npm --version 6 .9.0 Now check that you have git installed: 1 2 $ git --version git version 2 .15.1 We will use ngrok to provide a secure tunnel between your app running on localhost and the ONEm servers. Check it's installed: 1 2 $ ./ngrok --version ngrok version 2 .3.29","title":"Set up on localhost"},{"location":"getting_started/nodejs-old/#prepare-the-app","text":"In this step, you will prepare a simple Hello World application. To clone a local version of the sample application, execute the following command in your local command shell or terminal: 1 $ git clone https://github.com/chrishornmem/hello-world.git && cd hello-world You now have a functioning git repository that contains the Hello World application as well as a package.json file, which is used by npm (Node\u2019s dependency manager). Install the package dependencies with npm: 1 $ npm install","title":"Prepare the app"},{"location":"getting_started/nodejs-old/#configure-the-app","text":"The Hello World example application listens on the HTTP port defined by the environment variable PORT or 8080 by default. You can change the port by creating a .env file in your app's root directory and specifying the desired port value:","title":"Configure the app"},{"location":"getting_started/nodejs-old/#port","text":"1 PORT=8080","title":"Port"},{"location":"getting_started/nodejs-old/#token-secret","text":"Webhooks triggered by the ONEm platform contain a JWT token in the authorzation header. The JWT token carries the unique identity of the ONEm user so that your app can differentiate requests from different users. In order to verify jwt tokens that are sent by the ONEm platform, the token secret should be configured. For the sandbox, this secret is 87654321 . Configure the secret in the .env file: 1 TOKEN_SECRET=87654321","title":"Token secret"},{"location":"getting_started/nodejs-old/#run-the-app","text":"Start the app with: 1 $ npm run start You should see output similar to the following in the console: 1 Listening on port 8080 Now run ngrok so that your app is visible to the ONEm servers. 1 $ ./ngrok http 8080 ngrok will launch a continuous display to the console. Make a note of the http or https forwarding address. In the example below the address is http://6e3f3fce.ngrok.io : 1 Forwarding http://6e3f3fce.ngrok.io -> http://localhost:8080 Navigate to the forwarding link on your browser and you should see a Hello World greeting. The Hello World example app expects to receive HTTP requests as users perform certain actions. We call this the user_action webhook . The app expects to receive user action notifications on the base path: /api . The ONEm platform will need to be configured with the fully qualified URL of this endpoint, including the base path. In our example above, the user_action webhook URL would be http://6e3f3fce.ngrok.io/api Make a note of your user_action URL, you will need it in the next step.","title":"Run the app"},{"location":"getting_started/nodejs-old/#register-the-app-with-onem-sandbox-portal","text":"If you have not already done so, sign-up for a free ONEm developer account on the sandbox. Register your app on the ONEm Sandbox Portal. You will need to provide: A unique one-word name for your app, e.g hello A description of your app A link to your website The user_action URL you obtained from the previous step Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials. Make sure the details are saved correctly in the portal.","title":"Register the app with ONEm Sandbox Portal"},{"location":"getting_started/nodejs-old/#test-the-app","text":"Head over to our sandbox test tool , we call it ONEm Zone . Sign-up and then in the input field, enter # followed by your app's name, for example #HELLO if your app is called hello . If you have completed everything correctly, the ONEm system should respond with a menu, similar to the below: 1 2 3 4 5 #HELLO WORLD A First option B Second option C Third option --Reply A-C If you see the above, congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better. If you don't see the above done worry, go back and check that each step has been followed properly and your program will soon be up and running.","title":"Test the app"},{"location":"getting_started/nodejs-old/#running-your-app-in-production","text":"","title":"Running your app in production"},{"location":"getting_started/nodejs-old/#choose-a-hosting-platform","text":"Your app will need to be hosted on the internet so that ONEm's platform can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure","title":"Choose a hosting platform"},{"location":"getting_started/nodejs-old/#install-and-deploy-your-app-on-production","text":"Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku you would use: 1 2 $ heroku create $ git push heroku master Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080","title":"Install and deploy your app on production"},{"location":"getting_started/nodejs-old/#register-the-app-with-onem-production-portal","text":"You will need to edit your App details and update the user_action URL field, provide the fully qualified URL of your application's base API path. You can access your account here . Remember to add /api to your url so the ONEm platform can reach to your app.","title":"Register the app with ONEm Production Portal"},{"location":"getting_started/nodejs-old/#verifying-on-production","text":"Head over to our production verification site onem.zone and verify that your app is responding as expected. If you haven't already signed up you will need to have a mobile ands register using a google or facebook account.","title":"Verifying on production"},{"location":"getting_started/nodejs_prereq/","text":"In order to be able to run a NodeJS application for ONEm on your machine please make sure you have installed the following: NodeJS (v8.0.0 or above) git ngrok optionally, an IDE that supports JavaScript language if you want to edit the source code Install git \u00b6 Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained. Install NodeJS \u00b6 We will use nvm to easily install any version of NodeJS. You can install it directly on your machine following the official page . Install nvm : \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Please follow the nvm installing steps as provided by nvm repo . Windows: Please note that nvm does not support Windows. If you want to use a version manager for Windows, you can give it a try to nvm-windows or nodist . If you use Chocolatey manager on Windows, then you can also use the nvm package as instructed here . Install Node >= 8.1.x \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ nvm install 10 Please note that nvm install node will install the latest Node version. Windows: Download the latest Node version available for your Windows from official website . Run the installer following the steps and that should be all. Install ngrok \u00b6 Please download and install ngrok as described on the official website . Install an IDE \u00b6 If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Webstorm - 30 days free trial Atom - free and open source Visual Studio Code - free and open source etc","title":"Pre-requisites"},{"location":"getting_started/nodejs_prereq/#install-git","text":"Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained.","title":"Install git"},{"location":"getting_started/nodejs_prereq/#install-nodejs","text":"We will use nvm to easily install any version of NodeJS. You can install it directly on your machine following the official page .","title":"Install NodeJS"},{"location":"getting_started/nodejs_prereq/#install-nvm","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Please follow the nvm installing steps as provided by nvm repo . Windows: Please note that nvm does not support Windows. If you want to use a version manager for Windows, you can give it a try to nvm-windows or nodist . If you use Chocolatey manager on Windows, then you can also use the nvm package as instructed here .","title":"Install nvm:"},{"location":"getting_started/nodejs_prereq/#install-node-81x","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ nvm install 10 Please note that nvm install node will install the latest Node version. Windows: Download the latest Node version available for your Windows from official website . Run the installer following the steps and that should be all.","title":"Install Node &gt;= 8.1.x"},{"location":"getting_started/nodejs_prereq/#install-ngrok","text":"Please download and install ngrok as described on the official website .","title":"Install ngrok"},{"location":"getting_started/nodejs_prereq/#install-an-ide","text":"If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Webstorm - 30 days free trial Atom - free and open source Visual Studio Code - free and open source etc","title":"Install an IDE"},{"location":"getting_started/nodejs_run_local/","text":"This tutorial assumes you've already completed the steps in the prerequisites section. Run an existing application \u00b6 Download source code \u00b6 1 git clone https://github.com/onem-developer/nodejs-onem-todo Install dependencies \u00b6 We first need to go to the project directory and install the dependencies. 1 2 cd nodejs-onem-todo npm install Your directory should look like: 1 2 3 $ ls api config.js package.json README.md app.js node_modules package-lock.json static Start the server \u00b6 1 npm start The above command will run the server locally at http://127.0.0.1:8000 . Info If you try to access that link you will get a 403 error forbidden response, which is totally fine, since the server is looking into the HTTP headers for specific information sent by ONEm platform. Expose the server publicly \u00b6 Since our server is now running on your local interface, ONEm platform cannot reach it. But we can work around this by using ngrok . Open a new terminal, go to the folder where your ngrok is and start it up on localhost port 8000 . 1 ./ngrok http 8000 The above command will start ngrok tool, which is basically creating a VPN tunnel so our webserver can be publicly reachable. The output should be something like: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.34, Ctrl-U to update) Version 2.3.30 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://5d283db8.ngrok.io -> http://localhost:8000 Forwarding https://5d283db8.ngrok.io -> http://localhost:8000 Important The last line says that a public URL (https://5d283db8.ngrok.io) has been generated for you, which forwards all the received requests to your computer's server (http://localhost:8000). Task Copy the generated URL from your console as we will need it in the next step. Register the application \u00b6 To register your application open ONEm Developer Portal and register for a free account. Once that is done, you will have an option to create an app. Hit that button and place the URL generated by ngrok as the callback URL. Success That is it. We can now access the application by placing a hashtag in front of the name. Run it \u00b6 In the developer portal there is a Test Client section. This is a phone simulator from where you can test the app. Head on to the test client and send #name-of-your-app . At this point ONEm will request the callback URL we've set previously, so if you check the ngrok logs you will see the request there. HTTP Requests ------------- GET / 200 OK In the test client you can see the below response: #TODO MENU A New todo B Done(0) Todo(0) --Reply A-B Important The name of your app will be different, as chosen in the developer portal. The above SMS response is rendered based on the HTTP JSON response returned by our / URL. Tweak the application \u00b6 TODO","title":"Run locally"},{"location":"getting_started/nodejs_run_local/#run-an-existing-application","text":"","title":"Run an existing application"},{"location":"getting_started/nodejs_run_local/#download-source-code","text":"1 git clone https://github.com/onem-developer/nodejs-onem-todo","title":"Download source code"},{"location":"getting_started/nodejs_run_local/#install-dependencies","text":"We first need to go to the project directory and install the dependencies. 1 2 cd nodejs-onem-todo npm install Your directory should look like: 1 2 3 $ ls api config.js package.json README.md app.js node_modules package-lock.json static","title":"Install dependencies"},{"location":"getting_started/nodejs_run_local/#start-the-server","text":"1 npm start The above command will run the server locally at http://127.0.0.1:8000 . Info If you try to access that link you will get a 403 error forbidden response, which is totally fine, since the server is looking into the HTTP headers for specific information sent by ONEm platform.","title":"Start the server"},{"location":"getting_started/nodejs_run_local/#expose-the-server-publicly","text":"Since our server is now running on your local interface, ONEm platform cannot reach it. But we can work around this by using ngrok . Open a new terminal, go to the folder where your ngrok is and start it up on localhost port 8000 . 1 ./ngrok http 8000 The above command will start ngrok tool, which is basically creating a VPN tunnel so our webserver can be publicly reachable. The output should be something like: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.34, Ctrl-U to update) Version 2.3.30 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://5d283db8.ngrok.io -> http://localhost:8000 Forwarding https://5d283db8.ngrok.io -> http://localhost:8000 Important The last line says that a public URL (https://5d283db8.ngrok.io) has been generated for you, which forwards all the received requests to your computer's server (http://localhost:8000). Task Copy the generated URL from your console as we will need it in the next step.","title":"Expose the server publicly"},{"location":"getting_started/nodejs_run_local/#register-the-application","text":"To register your application open ONEm Developer Portal and register for a free account. Once that is done, you will have an option to create an app. Hit that button and place the URL generated by ngrok as the callback URL. Success That is it. We can now access the application by placing a hashtag in front of the name.","title":"Register the application"},{"location":"getting_started/nodejs_run_local/#run-it","text":"In the developer portal there is a Test Client section. This is a phone simulator from where you can test the app. Head on to the test client and send #name-of-your-app . At this point ONEm will request the callback URL we've set previously, so if you check the ngrok logs you will see the request there. HTTP Requests ------------- GET / 200 OK In the test client you can see the below response: #TODO MENU A New todo B Done(0) Todo(0) --Reply A-B Important The name of your app will be different, as chosen in the developer portal. The above SMS response is rendered based on the HTTP JSON response returned by our / URL.","title":"Run it"},{"location":"getting_started/nodejs_run_local/#tweak-the-application","text":"TODO","title":"Tweak the application"},{"location":"getting_started/python_prereq/","text":"Python prerequisites \u00b6 In order to be able to run a Python application for ONEm on your machine please make sure you have installed the following: Python (v3.7 or above) git ngrok optionally, an IDE that supports Python language if you want to edit the source code Install git \u00b6 Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained. Install python >= 3.7 \u00b6 Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv. Install Python dependencies: \u00b6 Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian, Ubuntu, Deepin, LinuxMint: 1 2 3 4 5 6 7 8 $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos, Fedora: 1 2 $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: 1 $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: 1 $ xcode-select --install You'll then receive: 1 $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: 1 $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / Install pyenv : \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac OS: 1 $ brew install pyenv Add pyenv initializer to shell startup script 1 $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile 1 $ source ~/.bash_profile Windows: Please note that pyenv is not currently supported on Windows. If you do want to use a Python version manager for Windows, you can give it a try to pyenv-win . Install python 3.7 or above using pyenv \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ pyenv install 3 .7.0 Windows: Example with pyenv-win : 1 $ pyenv install 3 .7.0 Alternatively, download the latest Python version available for Windows from official website . Run the installer and make sure to check the box that says Add Python 3.x to PATH to ensure that the interpreter will be placed in the execution path. Then click Install Now and that should be all. Install pipenv for an easier virtual environment management \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ sudo pip install pipenv Mac OS: 1 $ brew install pipenv or use: 1 $ pip install pipenv --user python Install ngrok \u00b6 Please download and install ngrok as described on the official website . Install an IDE \u00b6 If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc","title":"Pre-requisites"},{"location":"getting_started/python_prereq/#python-prerequisites","text":"In order to be able to run a Python application for ONEm on your machine please make sure you have installed the following: Python (v3.7 or above) git ngrok optionally, an IDE that supports Python language if you want to edit the source code","title":"Python prerequisites"},{"location":"getting_started/python_prereq/#install-git","text":"Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained.","title":"Install git"},{"location":"getting_started/python_prereq/#install-python-37","text":"Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv.","title":"Install python &gt;= 3.7"},{"location":"getting_started/python_prereq/#install-python-dependencies","text":"Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian, Ubuntu, Deepin, LinuxMint: 1 2 3 4 5 6 7 8 $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos, Fedora: 1 2 $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: 1 $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: 1 $ xcode-select --install You'll then receive: 1 $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: 1 $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /","title":"Install Python dependencies:"},{"location":"getting_started/python_prereq/#install-pyenv","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac OS: 1 $ brew install pyenv Add pyenv initializer to shell startup script 1 $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile 1 $ source ~/.bash_profile Windows: Please note that pyenv is not currently supported on Windows. If you do want to use a Python version manager for Windows, you can give it a try to pyenv-win .","title":"Install pyenv:"},{"location":"getting_started/python_prereq/#install-python-37-or-above-using-pyenv","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ pyenv install 3 .7.0 Windows: Example with pyenv-win : 1 $ pyenv install 3 .7.0 Alternatively, download the latest Python version available for Windows from official website . Run the installer and make sure to check the box that says Add Python 3.x to PATH to ensure that the interpreter will be placed in the execution path. Then click Install Now and that should be all.","title":"Install python 3.7 or above using pyenv"},{"location":"getting_started/python_prereq/#install-pipenv-for-an-easier-virtual-environment-management","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ sudo pip install pipenv Mac OS: 1 $ brew install pipenv or use: 1 $ pip install pipenv --user python","title":"Install pipenv for an easier virtual environment management"},{"location":"getting_started/python_prereq/#install-ngrok","text":"Please download and install ngrok as described on the official website .","title":"Install ngrok"},{"location":"getting_started/python_prereq/#install-an-ide","text":"If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc","title":"Install an IDE"},{"location":"getting_started/python_run_local/","text":"If you are an absolute beginner please read the prerequisites first. Run an existing application \u00b6 Download source code \u00b6 Clone the project from github.com: 1 onem@local:~$ git clone https://github.com/onem-developer/django-onem-todo Now let's create our virtual environment. We will be using Ubuntu 18.04 in this tutorial. 1 onem@local:~$ cd django-onem-todo ; pipenv shell --python 3 .7 The above will create the virtual environment and activate it at the same time. Install dependencies \u00b6 We first need to install the dependencies and create the database. 1 2 ( django-onem-todo ) onem@local:~/django-onem-todo$ pip install -r requirements.txt ( django-onem-todo ) onem@local:~/django-onem-todo$ python manage.py migrate Note The migrate command will create a local sqlite database. Info On MacOS you might get a pg_config related error that\u2019s solved by installing postgresql package: 1 brew install postgresql Once you've installed it, install the requirements again. Start the server \u00b6 1 ( django-onem-todo ) onem@local:~/django-onem-todo$ python manage.py runserver The above command will run the server locally at http://127.0.0.1:8000 Info If you try to access that link you will get a 403 error forbidden response, which is totally fine, since the server is looking into the HTTP headers for specific information sent by ONEm platform. Expose the server publicly \u00b6 Since our server is now running on your local interface, ONEm platform cannot reach it. But we can work around this by using ngrok. Open a new terminal, go to the folder where your ngrok is and start it up on localhost port 8000. 1 onem@local:~$ ./ngrok http 8000 The above command will start ngrok tool, which is basically creating a VPN tunnel so our webserver can be publicly reachable. The output should be something like: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.34, Ctrl-U to update) Version 2.3.30 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://5d283db8.ngrok.io -> http://localhost:8000 Forwarding https://5d283db8.ngrok.io -> http://localhost:8000 Important The important bit here is the http://5d283db8.ngrok.io link. We will be using this as our callback url when we will register our app on ONEm developer portal. Register the application \u00b6 To register your application please open ONEm Developer Portal and register for a free account. Once that is done, you will have an option to create an app. Hit that button and place http://5d283db8.ngrok.io as the callback url. Success That is it. We can now access the application by placing a hashtag in front of the name. Run it \u00b6 In the developer portal there is a Test Client section. This is a phone simulator from where you can test the app. Head on to the test client and send #name-of-your-app . At this point ONEm will request the callback url we've set previously, so if you check the ngrok logs you will see the request there. HTTP Requests ------------- GET / 200 OK In the test client you can see the below response: #TODO MENU A New todo B Done(0) Todo(0) --Reply A-B Important The name of your app will be different, as chosen in the developer portal The above sms response is rendered based on the HTTP json response returned by our / url. If we look in the todo.todo.views we can see that HomeView view which is handling the / route is basically returning a Menu json object. Every menu item contains a callback path, as described in the json structure here and once the user selects one of the menu items, an HTTP request will be made towards that callback path, a new json structure is returned by our web server, so a different sms response is presented to the user. Tweak the application \u00b6 Let's tweak the application a little bit. Say we want to allow the user to set the priority for the todo item and at the same time not enforce this. We first need to ask the user for the priority, when creating the todo item. We do that by adding an extra step in the body form returned by our TaskCreateView.get method. The form item looks like the one below. 1 2 3 4 5 6 7 8 9 10 onem . FormItem ( type = onem . FormItemType . form_menu , name = 'prio' , description = 'Set priority or SKIP' , required = False , body = [ onem . MenuItemFormItem ( 'High priority' , Task . HIGH ), onem . MenuItemFormItem ( 'Low priority' , Task . LOW ) ] ) Explained: represents a menu inside a form as indicated in the type argument the name of the item is prio and it matches how our Task model is defined by making it not required the user can skip this step by sending SKIP to the platform the body contains two menu items mapped to values Task.HIGH and Task.LOW , strings defined on our Task model The form item should be rendered as follows: #TODO Set priority or SKIP A High priority B Low priority --Reply A-B Now the user can set the priority for a todo item or skip this step altogether. Once the form is confirmed, the serialized data is sent to our /task/create/ callback path through an HTTP POST as mentioned in the form definition. This means that we need to edit our TaskCreateView.post method to take into account the prio step. It should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 def post ( self , request ): descr = request . POST [ 'descr' ] due_date = request . POST [ 'due_date' ] prio = request . POST . get ( 'prio' ) or Task . LOW Task . objects . create ( user = self . get_user (), descr = descr , due_date = datetime . datetime . strptime ( due_date , '%Y-%m- %d ' ) . date (), prio = prio ) return HttpResponseRedirect ( reverse ( 'home' )) Explained: we've added the 4th line in order to take into account the prio step ... if the step is skipped we default to Task.LOW we place the prio when creating a Task (line 10) The final code for our TaskCreateView should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class TaskCreateView ( View ): http_method_names = [ 'get' , 'post' ] def get ( self , request ): body = [ onem . FormItem ( type = onem . FormItemType . string , name = 'descr' , description = 'Please provide a description for the task' , header = 'description' , ), onem . FormItem ( type = onem . FormItemType . date , name = 'due_date' , description = 'Provide a due date' , header = 'due date' , ), onem . FormItem ( type = onem . FormItemType . form_menu , name = 'prio' , description = 'Set priority or SKIP' , required = False , body = [ onem . MenuItemFormItem ( 'High priority' , Task . HIGH ), onem . MenuItemFormItem ( 'Low priority' , Task . LOW ) ] ) ] return self . to_response ( onem . Form ( body = body , path = reverse ( 'task_create' ), method = 'POST' ) ) def post ( self , request ): descr = request . POST [ 'descr' ] due_date = request . POST [ 'due_date' ] prio = request . POST . get ( 'prio' ) or Task . LOW Task . objects . create ( user = self . get_user (), descr = descr , due_date = datetime . datetime . strptime ( due_date , '%Y-%m- %d ' ) . date (), prio = prio ) return HttpResponseRedirect ( reverse ( 'home' )) Info All the above changes should be available immediately, there is no need for a server restart.","title":"Run locally"},{"location":"getting_started/python_run_local/#run-an-existing-application","text":"","title":"Run an existing application"},{"location":"getting_started/python_run_local/#download-source-code","text":"Clone the project from github.com: 1 onem@local:~$ git clone https://github.com/onem-developer/django-onem-todo Now let's create our virtual environment. We will be using Ubuntu 18.04 in this tutorial. 1 onem@local:~$ cd django-onem-todo ; pipenv shell --python 3 .7 The above will create the virtual environment and activate it at the same time.","title":"Download source code"},{"location":"getting_started/python_run_local/#install-dependencies","text":"We first need to install the dependencies and create the database. 1 2 ( django-onem-todo ) onem@local:~/django-onem-todo$ pip install -r requirements.txt ( django-onem-todo ) onem@local:~/django-onem-todo$ python manage.py migrate Note The migrate command will create a local sqlite database. Info On MacOS you might get a pg_config related error that\u2019s solved by installing postgresql package: 1 brew install postgresql Once you've installed it, install the requirements again.","title":"Install dependencies"},{"location":"getting_started/python_run_local/#start-the-server","text":"1 ( django-onem-todo ) onem@local:~/django-onem-todo$ python manage.py runserver The above command will run the server locally at http://127.0.0.1:8000 Info If you try to access that link you will get a 403 error forbidden response, which is totally fine, since the server is looking into the HTTP headers for specific information sent by ONEm platform.","title":"Start the server"},{"location":"getting_started/python_run_local/#expose-the-server-publicly","text":"Since our server is now running on your local interface, ONEm platform cannot reach it. But we can work around this by using ngrok. Open a new terminal, go to the folder where your ngrok is and start it up on localhost port 8000. 1 onem@local:~$ ./ngrok http 8000 The above command will start ngrok tool, which is basically creating a VPN tunnel so our webserver can be publicly reachable. The output should be something like: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.34, Ctrl-U to update) Version 2.3.30 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://5d283db8.ngrok.io -> http://localhost:8000 Forwarding https://5d283db8.ngrok.io -> http://localhost:8000 Important The important bit here is the http://5d283db8.ngrok.io link. We will be using this as our callback url when we will register our app on ONEm developer portal.","title":"Expose the server publicly"},{"location":"getting_started/python_run_local/#register-the-application","text":"To register your application please open ONEm Developer Portal and register for a free account. Once that is done, you will have an option to create an app. Hit that button and place http://5d283db8.ngrok.io as the callback url. Success That is it. We can now access the application by placing a hashtag in front of the name.","title":"Register the application"},{"location":"getting_started/python_run_local/#run-it","text":"In the developer portal there is a Test Client section. This is a phone simulator from where you can test the app. Head on to the test client and send #name-of-your-app . At this point ONEm will request the callback url we've set previously, so if you check the ngrok logs you will see the request there. HTTP Requests ------------- GET / 200 OK In the test client you can see the below response: #TODO MENU A New todo B Done(0) Todo(0) --Reply A-B Important The name of your app will be different, as chosen in the developer portal The above sms response is rendered based on the HTTP json response returned by our / url. If we look in the todo.todo.views we can see that HomeView view which is handling the / route is basically returning a Menu json object. Every menu item contains a callback path, as described in the json structure here and once the user selects one of the menu items, an HTTP request will be made towards that callback path, a new json structure is returned by our web server, so a different sms response is presented to the user.","title":"Run it"},{"location":"getting_started/python_run_local/#tweak-the-application","text":"Let's tweak the application a little bit. Say we want to allow the user to set the priority for the todo item and at the same time not enforce this. We first need to ask the user for the priority, when creating the todo item. We do that by adding an extra step in the body form returned by our TaskCreateView.get method. The form item looks like the one below. 1 2 3 4 5 6 7 8 9 10 onem . FormItem ( type = onem . FormItemType . form_menu , name = 'prio' , description = 'Set priority or SKIP' , required = False , body = [ onem . MenuItemFormItem ( 'High priority' , Task . HIGH ), onem . MenuItemFormItem ( 'Low priority' , Task . LOW ) ] ) Explained: represents a menu inside a form as indicated in the type argument the name of the item is prio and it matches how our Task model is defined by making it not required the user can skip this step by sending SKIP to the platform the body contains two menu items mapped to values Task.HIGH and Task.LOW , strings defined on our Task model The form item should be rendered as follows: #TODO Set priority or SKIP A High priority B Low priority --Reply A-B Now the user can set the priority for a todo item or skip this step altogether. Once the form is confirmed, the serialized data is sent to our /task/create/ callback path through an HTTP POST as mentioned in the form definition. This means that we need to edit our TaskCreateView.post method to take into account the prio step. It should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 def post ( self , request ): descr = request . POST [ 'descr' ] due_date = request . POST [ 'due_date' ] prio = request . POST . get ( 'prio' ) or Task . LOW Task . objects . create ( user = self . get_user (), descr = descr , due_date = datetime . datetime . strptime ( due_date , '%Y-%m- %d ' ) . date (), prio = prio ) return HttpResponseRedirect ( reverse ( 'home' )) Explained: we've added the 4th line in order to take into account the prio step ... if the step is skipped we default to Task.LOW we place the prio when creating a Task (line 10) The final code for our TaskCreateView should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class TaskCreateView ( View ): http_method_names = [ 'get' , 'post' ] def get ( self , request ): body = [ onem . FormItem ( type = onem . FormItemType . string , name = 'descr' , description = 'Please provide a description for the task' , header = 'description' , ), onem . FormItem ( type = onem . FormItemType . date , name = 'due_date' , description = 'Provide a due date' , header = 'due date' , ), onem . FormItem ( type = onem . FormItemType . form_menu , name = 'prio' , description = 'Set priority or SKIP' , required = False , body = [ onem . MenuItemFormItem ( 'High priority' , Task . HIGH ), onem . MenuItemFormItem ( 'Low priority' , Task . LOW ) ] ) ] return self . to_response ( onem . Form ( body = body , path = reverse ( 'task_create' ), method = 'POST' ) ) def post ( self , request ): descr = request . POST [ 'descr' ] due_date = request . POST [ 'due_date' ] prio = request . POST . get ( 'prio' ) or Task . LOW Task . objects . create ( user = self . get_user (), descr = descr , due_date = datetime . datetime . strptime ( due_date , '%Y-%m- %d ' ) . date (), prio = prio ) return HttpResponseRedirect ( reverse ( 'home' )) Info All the above changes should be available immediately, there is no need for a server restart.","title":"Tweak the application"},{"location":"getting_started/run_remote_60s/","text":"For a quick start, try one of our demo applications. To run the application remotely you will have to deploy the webserver on a publicly accessible machine. There are multiple ways to do that: Nginx with Gunicorn and Supervisor Apache and mod_wsgi etc ... However, the easiest way we chose to do this, is using Heroku. This is what you need to do: Register for a free Heroku account Head over to our Github repo, according to your preferred programming language Fork the project Hit the Deploy to Heroku button and follow the steps Create an application in Developer portal and make sure you add the application link from Heroku in the Callback URL field Done! Go to Test Client section and access your application using #app_name .","title":"Run in 60 seconds"},{"location":"getting_started/prerequisites/python/","text":"In order to be able to run a Python application for ONEm on your machine please make sure you have installed the following: Python (v3.7 or above) git ngrok optionally, an IDE that supports Python language if you want to edit the source code Install git \u00b6 Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained. Install python >= 3.7 \u00b6 Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv. Install Python dependencies: \u00b6 Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian, Ubuntu, Deepin, LinuxMint: 1 2 3 4 5 6 7 8 $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos, Fedora: 1 2 $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: 1 $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: 1 $ xcode-select --install You'll then receive: 1 $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: 1 $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / Install pyenv : \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac OS: 1 $ brew install pyenv Add pyenv initializer to shell startup script 1 $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile 1 $ source ~/.bash_profile Windows: Please note that pyenv is not currently supported on Windows. If you do want to use a Python version manager for Windows, you can give it a try to pyenv-win . Install python 3.7 or above using pyenv \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ pyenv install 3 .7.0 Windows: Example with pyenv-win : 1 $ pyenv install 3 .7.0 Alternatively, download the latest Python version available for Windows from official website . Run the installer and make sure to check the box that says Add Python 3.x to PATH to ensure that the interpreter will be placed in the execution path. Then click Install Now and that should be all. Install pipenv for an easier virtual environment management \u00b6 Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ sudo pip install pipenv Mac OS: 1 $ brew install pipenv or use: 1 $ pip install pipenv --user python Install ngrok \u00b6 Please download and install ngrok as described on the official website . Install an IDE \u00b6 If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc","title":"Python"},{"location":"getting_started/prerequisites/python/#install-git","text":"Run the following command in your terminal Debian, Ubuntu, Deepin, LinuxMint: 1 $ sudo apt-get install git Centos, Fedora: 1 $ sudo yum install git Mac OS: 1 $ brew install git Windows: There are a few ways to install Git on Windows. The official build is available on the Git website; go to git-scm.com/download/win and the download will start automatically. Run the setup and follow the instructions. If you use Chocolatey manager on Windows, then you can install the git package as instructed here . Note that the Chocolatey package is community maintained.","title":"Install git"},{"location":"getting_started/prerequisites/python/#install-python-37","text":"Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv.","title":"Install python &gt;= 3.7"},{"location":"getting_started/prerequisites/python/#install-python-dependencies","text":"Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian, Ubuntu, Deepin, LinuxMint: 1 2 3 4 5 6 7 8 $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos, Fedora: 1 2 $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: 1 $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: 1 $ xcode-select --install You'll then receive: 1 $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: 1 $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /","title":"Install Python dependencies:"},{"location":"getting_started/prerequisites/python/#install-pyenv","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac OS: 1 $ brew install pyenv Add pyenv initializer to shell startup script 1 $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile 1 $ source ~/.bash_profile Windows: Please note that pyenv is not currently supported on Windows. If you do want to use a Python version manager for Windows, you can give it a try to pyenv-win .","title":"Install pyenv:"},{"location":"getting_started/prerequisites/python/#install-python-37-or-above-using-pyenv","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora, Mac OS: Example: 1 $ pyenv install 3 .7.0 Windows: Example with pyenv-win : 1 $ pyenv install 3 .7.0 Alternatively, download the latest Python version available for Windows from official website . Run the installer and make sure to check the box that says Add Python 3.x to PATH to ensure that the interpreter will be placed in the execution path. Then click Install Now and that should be all.","title":"Install python 3.7 or above using pyenv"},{"location":"getting_started/prerequisites/python/#install-pipenv-for-an-easier-virtual-environment-management","text":"Debian, Ubuntu, Deepin, LinuxMint, CentOS, Fedora: 1 $ sudo pip install pipenv Mac OS: 1 $ brew install pipenv or use: 1 $ pip install pipenv --user python","title":"Install pipenv for an easier virtual environment management"},{"location":"getting_started/prerequisites/python/#install-ngrok","text":"Please download and install ngrok as described on the official website .","title":"Install ngrok"},{"location":"getting_started/prerequisites/python/#install-an-ide","text":"If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc","title":"Install an IDE"},{"location":"intro/core_concepts/","text":"Core concepts \u00b6 Let's start with the basics. Follow along the steps to ramp up or watch as we create a working Todo application. Developer Account \u00b6 Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. As a ONEm developer, after you create and register your application on the developer portal you should follow the necessary steps to configure it to return standardised JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users. Your app \u00b6 Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. SDK \u00b6 Framework \u00b6 API \u00b6","title":"Core concepts"},{"location":"intro/core_concepts/#core-concepts","text":"Let's start with the basics. Follow along the steps to ramp up or watch as we create a working Todo application.","title":"Core concepts"},{"location":"intro/core_concepts/#developer-account","text":"Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. As a ONEm developer, after you create and register your application on the developer portal you should follow the necessary steps to configure it to return standardised JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users.","title":"Developer Account"},{"location":"intro/core_concepts/#your-app","text":"Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app.","title":"Your app"},{"location":"intro/core_concepts/#sdk","text":"","title":"SDK"},{"location":"intro/core_concepts/#framework","text":"","title":"Framework"},{"location":"intro/core_concepts/#api","text":"","title":"API"},{"location":"intro/onem_apps/","text":"What are ONEm apps? \u00b6 The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based Platform that provides SMS connectivity to mobile networks around the globe. Once you register as a developer, based on ONEm principles, you can create your own application and reach the ONEm ecosystem. The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. How services work \u00b6 ONEm's goal is to have a service that is easy and intuitive to use. It is important for users to have a seamless experience when accessing the ONEm platform. Different functionalities and content types are grouped in applications, also called services, accessible through the Platform, similar to websites via internet. Each service is defined by a unique name, similar to a web-address, and follows a general structure, allowing users to easily interact with the platform via text messages. Similar to a website, the application will have a landing page and will provide a navigation structure using menus, selectable outlines, paging mechanism and the possibility to capture user input. To access a certain application/service, users will use # before application name, eg #my_application. The Platform will automatically recognise the user input and will display the application's landing screen. Usability principles are implemented, so in case of an unrecognised user input, the Platform will respond with the best feedback or guideline. To allow us to create an ecosystem, the users will be automatically registered when sending their first message to the platform. Their profile will be created and based on setup they will be able to access the available applications. Obviously, an opt out mechanism is in place. Let's dig further into the anatomy of a ONEm application \u00b6 Before dissecting the structure of applications, keep in mind that SMS does not facilitate the use of images or media files as web does. Though ONEm applications work also over internet, we offer users the same experience and interface. A standard SMS is 140 8bit characters. For full compatibility the applications should display the information to the users in one SMS. As explained in the previous section, the web-address is transposed to #application_name. A website/web application provides pages, navigation system, hints and, most important, content. Let's see how those are translated to a ONEm application. Every response message from ONEm Platform will have the following structure: HEADER - each messages will have a header that indicates the name of the application and the section of the displayed content. This will allow users to get localised into the application serving as page title and/or breadcrumbs. BODY - the body is the most important section of the message and handles the content being displayed to the user. It may consist of text or selectable options. The end of the body will have the number of chunks remaining in the content selection. Will explain the chunks later on. The body can display a MENU , a simple text or a FORM . FOOTER - the footer is where information like 'hints' is attached to the bottom of the message. In here, users will find guidelines regarding next available actions. All this might be more intuitive with an example from #onem application: 1 2 3 4 5 6 7 #ONEM MENU A My account B Invite friends to chat C Create SMS group chats (xGroup) D Services E How to use --Reply A-E The above message is the landing page of #onem application, also considered the main menu. The first message presents user with the main options that can be accessed and offers a navigation possibility. As you probably figured out, the user can access account information, chat with friends, see available services or follow a tutorial on how to use ONEm features. Each available option has a letter attached to it to facilitate user response. As hinted in the footer, the user can send one of the letters to access the corresponding menu item. This is the MENU concept. Each option is displayed on a new line and has associated an action to it that will result in another message displayed to the user. Let's follow on the example and say that the user will choose to reply to ONEm Platform with a message containing D letter. This translates in choosing to access menu item D, available services and the Platform's response will be a list of available service categories. Notice the header changed and so did the hints in the footer. 1 2 3 4 5 6 7 8 #ONEM SERVICES A Search B Information C Tools D Business E Entertainment F Social --Reply option/\"#\" Let's get back to message body. The amount of information displayed to the user, along with header and footer, can exceed the sms size. In this case, the ONEm platform will split body information in several messages called chunks, adding a paging system that allows users to access more than can fit one single SMS. At the end of each sms body, right before the footer, there will be automatically added information about current chunk and total number of chunks in which the message was split. This mechanism applies both to simple text, like a news article, and options lists that are too long to be displayed in one message. A great example for this mechanism can be extracted from our #wiki application. The article's introduction about SMS is paginated in 8 chunks and the first 2 are presented below. The hint from footer - \"more\" - is used to navigate to the next chunk. 1 2 3 4 5 6 7 8 9 10 11 #WIKI (ENGLISH) SMS SEARCH SMS (short message service) is a text messaging service component of most telephone, Internet, and mobile device systems. It uses standardized ..1/8 --MORE/BACK >> more communication protocols to enable mobile devices to exchange short text messages. An intermediary service can facilitate a text-to-voice conversion to be sent to landlines. SMS was ..2/8 --MORE/BACK Another important topic to talk about regards capturing user input. Any webpage or web application will present users with a form to complete and submit. This is rather difficult in the SMS version of ONEm applications, but getting help from wizards, forms are completed step by step, each form field translates in a new message asking user for a free response or choose from a list of options. When all information is gathered, the user can review and submit the form through a supplementary confirmation step. No worries, we dedicated an entire section to forms and how you can create one [here][ ] To see all these concepts at work, with real ONEm examples, and much more you can watch this Platform Demo","title":"What are ONEm apps?"},{"location":"intro/onem_apps/#what-are-onem-apps","text":"The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based Platform that provides SMS connectivity to mobile networks around the globe. Once you register as a developer, based on ONEm principles, you can create your own application and reach the ONEm ecosystem. The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web.","title":"What are ONEm apps?"},{"location":"intro/onem_apps/#how-services-work","text":"ONEm's goal is to have a service that is easy and intuitive to use. It is important for users to have a seamless experience when accessing the ONEm platform. Different functionalities and content types are grouped in applications, also called services, accessible through the Platform, similar to websites via internet. Each service is defined by a unique name, similar to a web-address, and follows a general structure, allowing users to easily interact with the platform via text messages. Similar to a website, the application will have a landing page and will provide a navigation structure using menus, selectable outlines, paging mechanism and the possibility to capture user input. To access a certain application/service, users will use # before application name, eg #my_application. The Platform will automatically recognise the user input and will display the application's landing screen. Usability principles are implemented, so in case of an unrecognised user input, the Platform will respond with the best feedback or guideline. To allow us to create an ecosystem, the users will be automatically registered when sending their first message to the platform. Their profile will be created and based on setup they will be able to access the available applications. Obviously, an opt out mechanism is in place.","title":"How services work"},{"location":"intro/onem_apps/#lets-dig-further-into-the-anatomy-of-a-onem-application","text":"Before dissecting the structure of applications, keep in mind that SMS does not facilitate the use of images or media files as web does. Though ONEm applications work also over internet, we offer users the same experience and interface. A standard SMS is 140 8bit characters. For full compatibility the applications should display the information to the users in one SMS. As explained in the previous section, the web-address is transposed to #application_name. A website/web application provides pages, navigation system, hints and, most important, content. Let's see how those are translated to a ONEm application. Every response message from ONEm Platform will have the following structure: HEADER - each messages will have a header that indicates the name of the application and the section of the displayed content. This will allow users to get localised into the application serving as page title and/or breadcrumbs. BODY - the body is the most important section of the message and handles the content being displayed to the user. It may consist of text or selectable options. The end of the body will have the number of chunks remaining in the content selection. Will explain the chunks later on. The body can display a MENU , a simple text or a FORM . FOOTER - the footer is where information like 'hints' is attached to the bottom of the message. In here, users will find guidelines regarding next available actions. All this might be more intuitive with an example from #onem application: 1 2 3 4 5 6 7 #ONEM MENU A My account B Invite friends to chat C Create SMS group chats (xGroup) D Services E How to use --Reply A-E The above message is the landing page of #onem application, also considered the main menu. The first message presents user with the main options that can be accessed and offers a navigation possibility. As you probably figured out, the user can access account information, chat with friends, see available services or follow a tutorial on how to use ONEm features. Each available option has a letter attached to it to facilitate user response. As hinted in the footer, the user can send one of the letters to access the corresponding menu item. This is the MENU concept. Each option is displayed on a new line and has associated an action to it that will result in another message displayed to the user. Let's follow on the example and say that the user will choose to reply to ONEm Platform with a message containing D letter. This translates in choosing to access menu item D, available services and the Platform's response will be a list of available service categories. Notice the header changed and so did the hints in the footer. 1 2 3 4 5 6 7 8 #ONEM SERVICES A Search B Information C Tools D Business E Entertainment F Social --Reply option/\"#\" Let's get back to message body. The amount of information displayed to the user, along with header and footer, can exceed the sms size. In this case, the ONEm platform will split body information in several messages called chunks, adding a paging system that allows users to access more than can fit one single SMS. At the end of each sms body, right before the footer, there will be automatically added information about current chunk and total number of chunks in which the message was split. This mechanism applies both to simple text, like a news article, and options lists that are too long to be displayed in one message. A great example for this mechanism can be extracted from our #wiki application. The article's introduction about SMS is paginated in 8 chunks and the first 2 are presented below. The hint from footer - \"more\" - is used to navigate to the next chunk. 1 2 3 4 5 6 7 8 9 10 11 #WIKI (ENGLISH) SMS SEARCH SMS (short message service) is a text messaging service component of most telephone, Internet, and mobile device systems. It uses standardized ..1/8 --MORE/BACK >> more communication protocols to enable mobile devices to exchange short text messages. An intermediary service can facilitate a text-to-voice conversion to be sent to landlines. SMS was ..2/8 --MORE/BACK Another important topic to talk about regards capturing user input. Any webpage or web application will present users with a form to complete and submit. This is rather difficult in the SMS version of ONEm applications, but getting help from wizards, forms are completed step by step, each form field translates in a new message asking user for a free response or choose from a list of options. When all information is gathered, the user can review and submit the form through a supplementary confirmation step. No worries, we dedicated an entire section to forms and how you can create one [here][ ] To see all these concepts at work, with real ONEm examples, and much more you can watch this Platform Demo","title":"Let's dig further into the anatomy of a ONEm application"},{"location":"intro/onem_platform/","text":"What is ONEm Platform \u00b6 ONEm has created a global multi-service Platform that provides innovative services using core connectivity as SMS and Voice. We provide first of a kind interactive services and user generated content on the mobile. It\u2019s not about replacing or even competing with the internet, it\u2019s all about taking what already exists and putting it to a better use. ONEm allows people to communicate in a completely new way through simple interaction with an intelligent platform that works on their behalf behind the scenes to connect, find, process and present communications, content and services across all types of networks and to any type of mobile device. Whether accessed through SMS or a web browser, the ONEm Platform manages user's identities and profile, delivers intelligent content and allows users to collaborate and interact in an unconventional way. Mission and vision \u00b6 We are building a Mobile Ecosystem first of a kind with interactive services, that will transform the way people communicate and get access to information on any mobile, including the 3 billion people who have no access to internet, who have no way to share nor create their own content. We aim to provide access to information and to make our services available to everyone.","title":"What is ONEm Platform"},{"location":"intro/onem_platform/#what-is-onem-platform","text":"ONEm has created a global multi-service Platform that provides innovative services using core connectivity as SMS and Voice. We provide first of a kind interactive services and user generated content on the mobile. It\u2019s not about replacing or even competing with the internet, it\u2019s all about taking what already exists and putting it to a better use. ONEm allows people to communicate in a completely new way through simple interaction with an intelligent platform that works on their behalf behind the scenes to connect, find, process and present communications, content and services across all types of networks and to any type of mobile device. Whether accessed through SMS or a web browser, the ONEm Platform manages user's identities and profile, delivers intelligent content and allows users to collaborate and interact in an unconventional way.","title":"What is ONEm Platform"},{"location":"intro/onem_platform/#mission-and-vision","text":"We are building a Mobile Ecosystem first of a kind with interactive services, that will transform the way people communicate and get access to information on any mobile, including the 3 billion people who have no access to internet, who have no way to share nor create their own content. We aim to provide access to information and to make our services available to everyone.","title":"Mission and vision"},{"location":"limits/app_naming/","text":"Application naming \u00b6 When registering your applications, make sure you keep in mind the following: - the name must be unique; this is enforced by the create application form - the name should have one word, or multiple without spaces - choose a significant and easy to remember name; keep in mind that users will use # followed by the name you choose to access your application For free plans, the name will be automatically assigned to your application.","title":"App naming"},{"location":"limits/app_naming/#application-naming","text":"When registering your applications, make sure you keep in mind the following: - the name must be unique; this is enforced by the create application form - the name should have one word, or multiple without spaces - choose a significant and easy to remember name; keep in mind that users will use # followed by the name you choose to access your application For free plans, the name will be automatically assigned to your application.","title":"Application naming"},{"location":"limits/limitations/","text":"Limitations and resource usage \u00b6 Once you followed the building steps and tutorials, feel free to create your own application. There are several limitations in place you should know about.","title":"Limitations and resource usage"},{"location":"limits/limitations/#limitations-and-resource-usage","text":"Once you followed the building steps and tutorials, feel free to create your own application. There are several limitations in place you should know about.","title":"Limitations and resource usage"},{"location":"limits/pub_prv_apps/","text":"Public and private applications \u00b6 Depending on your developer account, your application/s can be public or private. Public application: TBD Private application: TBD","title":"Pub prv apps"},{"location":"limits/pub_prv_apps/#public-and-private-applications","text":"Depending on your developer account, your application/s can be public or private. Public application: TBD Private application: TBD","title":"Public and private applications"},{"location":"limits/sys_verbs/","text":"","title":"Sys verbs"},{"location":"limits/topup/","text":"Billing and top up \u00b6","title":"Topup"},{"location":"limits/topup/#billing-and-top-up","text":"","title":"Billing and top up"},{"location":"portal/create_account/","text":"","title":"Create account"},{"location":"portal/register_app/","text":"","title":"Register app"},{"location":"use_case/post_demo_app_intro/","text":"#post micro-app is a collaborative application that serves as a virtual post board where users can post small adds sharing information or services. Users can post, edit and view adds, search by keyword, contact the add owner, comment and rate. In this tutorial we are going to present 3 versions of ONEm's #post application. The apps are written in the Django framework using ONEm's Python SDK. #postv1 - a stripped down version of the service; we will be able to create, store and view posts #postv2 - on top of v1, we will now add a Search wizard so we can search by keyword/code in all saved posts (ours or others) #postv3 - on top of v2, we will enable interactions with ONEm API For prerequisites and running any of the 3 apps locally please refer to: prerequisites and run locally tutorials. Notes: 1) The project containing these 3 apps can be cloned from here: post-demo-app 1 onem@local:~$ git clone https://github.com/ONEmCommunications/post-demo-app 2) We will only need to create one virtualenv, containing the packages listed in the requirements.txt file in the project's root folder and this virtual env will be used by all 3 versions of the app. All 3 versions of the #post application contained in this repo are Django apps. Below you can find a few details on the structure of a Django project, its key files and their purpose. The root folder of a Django project: [projectname]/ \u251c\u2500\u2500 [projectname]/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u2514\u2500\u2500 manage.py the manage.py file is the command line utility of the project. This file contains the code for starting the server, migrating and controlling the project through command-line. the settings.py is the main file where we will be adding all our applications and middleware applications. As the name suggests this is the main settings file of the Django project. This file contains the installed applications and middleware information. the urls.py file contains the project level URL information. The main purpose of this file is to connect the web-apps with the project. Anything you will be typing in the URL bar will be processed by this urls.py file. Then, it will correspond your request to the designated app you connected to it. The inner [projectname] folder contains the following files: \\[projectname] \\migrations __init__.py admin.py apps.py models.py tests.py views.py For our v1, v2 and v3 apps it is worth mentioning about: the models.py file - the model for a post enitity is described here. Django models define the structure of stored data. We will be using this in postv2 and postv3 to store our posts in a local database. the views.py file - it is here where most of the code interacting with the ONEm platform and the ONEm SDK will reside. At their simplest, the views are a Python function or class that takes a web request and return a web response. They are used to do things like fetch objects from the database, modify those objects if needed, render forms, return HTML, and much more. Info For more info about the internals of the Django framework, please visit the oficial documentation here Django docs .","title":"Basics"},{"location":"use_case/postv1/","text":"This initial version of the demo #post app will allow you to create and visualise your own post(s). It will also showcase examples of the ONEM's python SDK usage. So let's navigate to the postv1 folder and create/activate our virtual environment: 1 onem@local:~$ cd ~/postv1 ; pipenv shell --python 3 .7 Also please make sure that: the database is created (even if we will store the posts in-memory). local django server is started. the server is exposed publicly. the application is registered. All of the above steps are explained in the run locally section of the docs. To register your application please open ONEm Developer Portal and register for a free account. Once that is done, you will have an option to create an app. Hit that button and place the url obtaine from ngrok as the callback url. In the developer portal there is a Test Client section. This is a phone simulator from where you can test the app. We can now access the application by placing a hashtag in front of the name. So let's send: #name-of-your-app #POSTV1 MENU Please choose a username --Send username Send the desired username and we should be greeted with the landing menu: #POSTV1 A Add post B My posts --Reply A-B *the name of your app will be different, as chosen in the developer portal You can go ahead and create a post or two which you can later visualise in the My post section of the app. Code-wise you can inspect the below classes from the views.py file: class AddPostView(View) - used for creating a new post and caching it in-memory. This class uses the SDK's Form structure. A Form contains FormItems items which have specific properties like name , description , header etc: 1 2 3 4 5 6 7 FormItemContent ( type = FormItemContentType . string , name = 'title' , description = 'Give your new post a title (maximum 64 characters)' , header = 'add' , footer = 'Reply with post title or BACK' ) class MyPostListView(View) - to view the list of your created posts. We can see here the SDK's Menu structure in action. Each post is a MenuItem and togheter they are displayed as a Menu : 1 2 3 4 5 6 7 8 9 10 11 12 13 posts = cache . get ( 'posts' ) if posts : for post in posts : menu_items . append ( MenuItem ( description = u '{}..' . format ( post [ 'title' ][: 15 ]), method = 'GET' , path = reverse ( 'post_detail' , args = [ post [ 'code' ]])) ) else : menu_items . append ( MenuItem ( description = 'You currently have no posts.' ) ) content = Menu ( body = menu_items , footer = 'Reply MENU' ) class PostDetailView(View) - to show details of the selected post. Again, a Menu structure is used for achieving this. For each of these classes you can modify the code to add new items, remove them, show different labels etc and see the result by saving these changes and revisiting the app in the test client. For postv2 we are going to add a search functionality which will further explain how a Form works and also store our posts in a lightweight local database.","title":"Micro app landing"},{"location":"use_case/postv2/","text":"If not already done so, please first follow the tutorial for the postv1 micro-app, to get a grasp on what it does, the prerequisites and some specific details of the ONEm SDK. Info This version adds the following: persistent post storage in our local sqlite database search capabilities The models.py file describes our Post entity and its attributes. 1 2 3 4 5 6 7 8 9 class Post ( models . Model ): user = models . ForeignKey ( User , models . CASCADE ) title = models . CharField ( max_length = 64 ) description = models . CharField ( max_length = 1024 ) code = models . CharField ( max_length = 16 ) created_at = models . DateTimeField () is_private = models . BooleanField ( default = False ) views = models . IntegerField () expires_at = models . DateTimeField () The AddPostView.post method from views.py file was modified in order to store the posts in the database. The relevant piece of code is the one below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class AddPostView ( View ): ... def post ( self , request ): ... new_post = Post . objects . create ( user = self . get_user (), title = request . POST [ 'title' ], description = request . POST [ 'description' ], is_private = request . POST [ 'is_private' ], created_at = now , expires_at = expires_at , views = 0 , ) ... Let's run the below 2 commands in the root folder of our postv2 app to create the schema migrations and the database tables: 1 2 python manange.py makemigrations python manage.py migrate As mentioned, in this version we've added a search capability. Let's look into the SearchWizardView class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class SearchWizardView ( View ): ... def get ( self , request ): form_items = [ FormItem ( type = FormItemType . string , name = 'keyword' , description = 'Send code or keyword to search' , header = 'search' , footer = 'Send code or keyword' ) ] form = Form ( body = form_items , method = 'POST' , path = reverse ( 'search_wizard' ), meta = FormMeta ( confirmation_needed = False , completion_status_in_header = False , completion_status_show = False )) return self . to_response ( form ) def post ( self , request ): key = request . POST [ 'keyword' ] ... Our form has only one form item in which we prompt the user with some input, be it a specific post code or a keyword to search for. A FormItem has specific properties like type , name , description etc. Should we want further input from the user, we can simply add new FormItem items in the above list. A Form contains the form items in the body attribute and requires a path so ONEm platform can perform an HTTP POST callback (as indicated in the method attribute) with a payload containing the user search term. The post method grabs the keyword and handles the search logic. Worth mentioning here is that if we get multiple matches for the given keyword, we use a Menu to present the results, otherwise we redirect to post detail.","title":"Search through posts"},{"location":"use_case/postv3/","text":"It is recommended to first follow the tutorial for #postv1 and #postv2 . In this version we are going to enable users to send messages between them. To achieve this we can make use of the ONEm API. First, we will need an API key to be able to authenticate our requests towards the ONEm API. Head over to the developer portal . First create the app then click on Details --> API key & permissions , check the Notification box and click on Generate API key : Copy the freshly generated API key and head over to the settings file in our Django project: 1 onem@local:~$ cd ~/postv3/postv3/ Now we can edit the settings.py file and replace the value of the APP_APIKEY variable with the key we have generated earlier: APP_APIKEY = '...' Start the local server for your app: 1 2 onem@local:~$ cd ~/postv3 onem@local:~$ python manage.py runserver Expose the server publicly: 1 onem@local:~$ ./ngrok http 8000 Go to Test Client section in the developer portal and send #name-of-your-app . This should be the name as shown in the developer portal. Now we simply have to look for posts from other users and select one of them for viewing: #POST.TEST apartment for rent Hi, offering a 90sqm, 2 bedrooms apartment for renting. Message me for more details! Author: Milla Expires in: in 10 days, 19 hours Code: 3z8d7m Views: 5 A Send message --Reply MENU/BACK By choosing option A the app will allow you to compose your message for the post owner. Behind the scene, your request will use ONEm API to send the message. You can inspect the code in the views.py file in the SendMessageView class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class SendMessageView ( View ): ... def post ( self , request , id ): message = request . POST [ 'message' ] post = get_object_or_404 ( Post , id = id ) headers = { 'X-API-KEY' : settings . APP_APIKEY , 'Content-Type' : 'application/json' } notify_url = settings . ONEM_API_URL . format ( post . user . id ) body = { 'header' : 'postv3 - {}' . format ( post . title [: 13 ]), 'body' : ' \\n ' . join ([ message , 'Sent by: {}' . format ( self . get_user () . username )]), 'footer' : 'Reply #postv3' } response = requests . post ( url = notify_url , json = body , headers = headers ) if response . status_code == 200 : cache . set ( 'msg_sent' , True ) else : cache . set ( 'msg_not_sent' , True ) return HttpResponseRedirect ( reverse ( 'post_detail' , args = [ id ])) The post owner will receive the notification as follows: #POSTV3 - apartment for rent Hello, I am interested in renting your apartment! Can you let me know what your telephone number is ? Sent by: John --Reply #postv3","title":"Using the ONEm API"}]}
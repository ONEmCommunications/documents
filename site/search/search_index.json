{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"add-ons/","text":"v1.6.1 07/12/2018 Fixed parsing tags other than links #24 (Fix loading of a href element) v1.6.0 02/22/2018 Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files v1.5.3 02/18/2017 Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR) v1.5.2 02/17/2017 Added Russian translations #16 (Thanks to @ktaranov ) v1.5.1 02/10/2017 Fixed error in getting the remote image size v1.5.0 02/09/2017 Use tabs in admin panel settings for better user experience Use toggle buttons for page settings v1.4.4 01/11/2017 Fixed CURLOPT_AUTOREFERER constant v1.4.3 10/31/2016 Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing) v1.4.2 12/06/2015 Added French translations #8 (Thanks to @MATsxm ) v1.4.1 11/18/2015 Page specific options now respect the default configurations set in the admin panel v1.4.0 11/17/2015 Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function v1.3.1 09/09/2015 Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints) v1.3.0 08/08/2015 Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters) v1.2.2 05/10/2015 PSR fixes v1.2.1 03/24/2015 Fixed active mode condition v1.2.0 02/21/2015 Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code v1.1.3 02/10/2015 Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5) v1.1.2 02/10/2015 By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin) v1.1.1 02/06/2015 Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method v1.1.0 02/05/2015","title":"v1.6.1"},{"location":"add-ons/#v161","text":"","title":"v1.6.1"},{"location":"add-ons/#07122018","text":"Fixed parsing tags other than links #24 (Fix loading of a href element)","title":"07/12/2018"},{"location":"add-ons/#v160","text":"","title":"v1.6.0"},{"location":"add-ons/#02222018","text":"Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files","title":"02/22/2018"},{"location":"add-ons/#v153","text":"","title":"v1.5.3"},{"location":"add-ons/#02182017","text":"Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR)","title":"02/18/2017"},{"location":"add-ons/#v152","text":"","title":"v1.5.2"},{"location":"add-ons/#02172017","text":"Added Russian translations #16 (Thanks to @ktaranov )","title":"02/17/2017"},{"location":"add-ons/#v151","text":"","title":"v1.5.1"},{"location":"add-ons/#02102017","text":"Fixed error in getting the remote image size","title":"02/10/2017"},{"location":"add-ons/#v150","text":"","title":"v1.5.0"},{"location":"add-ons/#02092017","text":"Use tabs in admin panel settings for better user experience Use toggle buttons for page settings","title":"02/09/2017"},{"location":"add-ons/#v144","text":"","title":"v1.4.4"},{"location":"add-ons/#01112017","text":"Fixed CURLOPT_AUTOREFERER constant","title":"01/11/2017"},{"location":"add-ons/#v143","text":"","title":"v1.4.3"},{"location":"add-ons/#10312016","text":"Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing)","title":"10/31/2016"},{"location":"add-ons/#v142","text":"","title":"v1.4.2"},{"location":"add-ons/#12062015","text":"Added French translations #8 (Thanks to @MATsxm )","title":"12/06/2015"},{"location":"add-ons/#v141","text":"","title":"v1.4.1"},{"location":"add-ons/#11182015","text":"Page specific options now respect the default configurations set in the admin panel","title":"11/18/2015"},{"location":"add-ons/#v140","text":"","title":"v1.4.0"},{"location":"add-ons/#11172015","text":"Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function","title":"11/17/2015"},{"location":"add-ons/#v131","text":"","title":"v1.3.1"},{"location":"add-ons/#09092015","text":"Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints)","title":"09/09/2015"},{"location":"add-ons/#v130","text":"","title":"v1.3.0"},{"location":"add-ons/#08082015","text":"Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters)","title":"08/08/2015"},{"location":"add-ons/#v122","text":"","title":"v1.2.2"},{"location":"add-ons/#05102015","text":"PSR fixes","title":"05/10/2015"},{"location":"add-ons/#v121","text":"","title":"v1.2.1"},{"location":"add-ons/#03242015","text":"Fixed active mode condition","title":"03/24/2015"},{"location":"add-ons/#v120","text":"","title":"v1.2.0"},{"location":"add-ons/#02212015","text":"Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code","title":"02/21/2015"},{"location":"add-ons/#v113","text":"","title":"v1.1.3"},{"location":"add-ons/#02102015","text":"Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5)","title":"02/10/2015"},{"location":"add-ons/#v112","text":"","title":"v1.1.2"},{"location":"add-ons/#02102015_1","text":"By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin)","title":"02/10/2015"},{"location":"add-ons/#v111","text":"","title":"v1.1.1"},{"location":"add-ons/#02062015","text":"Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method","title":"02/06/2015"},{"location":"add-ons/#v110","text":"","title":"v1.1.0"},{"location":"add-ons/#02052015","text":"","title":"02/05/2015"},{"location":"blockchain/","text":"Lorem markdownum vides aram est sui istis excipis Danai elusaque manu fores. Illa hunc primo pinum pertulit conplevit portusque pace tacuit sincera. Iam tamen licentia exsulta patruelibus quam, deorum capit; vultu. Est Philomela qua sanguine fremit rigidos teneri cacumina anguis hospitio incidere sceptroque telum spectatorem at aequor. if (cssDawP >= station) { dllCdmaCpc += 919754; } else { superscalar += -3 + phishing; } pup_ram_bloatware(2 * network(linkedin)); var vfatWhite = serpXmp + paperPitchPermalink(enterprise_and) - 5; systemBandwidthAtm = 9 + station; rw_menu_enterprise *= on_midi / interpreter.adPpp( correctionIntegratedBalancing, bar, real) - user_remote_zebibyte( desktop(lun_flops_wamp, technology_peripheral_dv, spriteHit)); Prochytenque ergo ait aequoreo causa ardere, ex vinaque est, accingere, abest nunc sanguine. Est forma admissum adspexit pharetraque regat prece fremit clamat memorantur evanuit foret ferinas, senserat infringat illa incumbere excipit ulnas. Est undis soror animi diem continuo videres fratres ? Meo iam mihi miserum fateor, in votum iuvenis, aures? Qui labor nulla telluris valerem erat hoc, sedula. if (bus_overclocking_server > 891985) { compression = textWep - gatePlatform; } else { fileTweak += file + so_mouse_sram; pda_radcab_eup = tcp_opengl_refresh(network_phishing - realityDel, 5, 5); bounce_monitor_dns = 4; } fddi_virtualization_file *= drag_infringement(minicomputerServlet + -1 + gif_white(utf, blog, cloud), dvdMacintosh - radcab_horizontal + cpu_recycle_quicktime(ascii)); ad += tableCapsTime - 5 + keyboard_card - -2 + cc; if (raw_bloatware_compression < script_expression) { fiBps(printer_php); ipx = biometricsFullDvi(bootComponentAnsi, 929326, 38); } Dent et ignavus constant tamque Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Advanced Topic 2"},{"location":"blockchain/#dent-et-ignavus-constant-tamque","text":"Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Dent et ignavus constant tamque"},{"location":"buildfirstapp/","text":"Your First ONEm App The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. Follow along as we create a working Todo application.","title":"Your First ONEm App"},{"location":"buildfirstapp/#your-first-onem-app","text":"The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. Follow along as we create a working Todo application.","title":"Your First ONEm App"},{"location":"concepts/","text":"Core Concepts For those completely new to ONEm app development, it can be helpful to get a high-level understanding of the core philosophy, concepts and capabilities. Before diving in, we'll cover the basics of the ONEm Framework, and how it works.","title":"Core Concepts"},{"location":"concepts/#core-concepts","text":"For those completely new to ONEm app development, it can be helpful to get a high-level understanding of the core philosophy, concepts and capabilities. Before diving in, we'll cover the basics of the ONEm Framework, and how it works.","title":"Core Concepts"},{"location":"high-level-overview/","text":"You will need to register your app on the developer portal and make it return standardized JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users. Developer Account Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. Your app Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. So if your app name is todo then users will be able to access it by sending an SMS with #todo content. Request & Response When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. Your app can reply with a menu , a form or a raw response type.","title":"High level overview"},{"location":"high-level-overview/#developer-account","text":"Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app.","title":"Developer Account"},{"location":"high-level-overview/#your-app","text":"Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. So if your app name is todo then users will be able to access it by sending an SMS with #todo content.","title":"Your app"},{"location":"high-level-overview/#request-response","text":"When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. Your app can reply with a menu , a form or a raw response type.","title":"Request &amp; Response"},{"location":"home/","text":"TODO","title":"Home"},{"location":"intro/","text":"What is ONEm Framework? The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based platform that provides SMS connectivity to mobile networks around the globe. Goals Single Source for SMS and Web Web Standards-based ONEm Framework is built on top of trusted, standardized web technologies: HTML, JSON, REST, using modern Web APIs such as our RestDAPI. Because of this, ONEm applications build with ONEm have a stable base, are familiar to any developer and are easy to maintain. Simple yet Powerful Ecosystem ONEm apps can be combined with ONEm's ecosystem. Users of your app can acquire a global Id, we call it the ONEm name, that allows users in the ONEm global community to communicate safely with one another.","title":"What is ONEm Framework?"},{"location":"intro/#what-is-onem-framework","text":"The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based platform that provides SMS connectivity to mobile networks around the globe.","title":"What is ONEm Framework?"},{"location":"intro/#goals","text":"","title":"Goals"},{"location":"intro/#single-source-for-sms-and-web","text":"","title":"Single Source for SMS and Web"},{"location":"intro/#web-standards-based","text":"ONEm Framework is built on top of trusted, standardized web technologies: HTML, JSON, REST, using modern Web APIs such as our RestDAPI. Because of this, ONEm applications build with ONEm have a stable base, are familiar to any developer and are easy to maintain.","title":"Web Standards-based"},{"location":"intro/#simple-yet-powerful","text":"","title":"Simple yet Powerful"},{"location":"intro/#ecosystem","text":"ONEm apps can be combined with ONEm's ecosystem. Users of your app can acquire a global Id, we call it the ONEm name, that allows users in the ONEm global community to communicate safely with one another.","title":"Ecosystem"},{"location":"menus-and-forms/","text":"Menus and Forms Think of a micro app menu as a kind of multiple choice survey that uses A-Z as options. Let's start with a copy of the standard todo app. Use a basic code editor like Sublime Text or Visual Studio Code . If you don't have one click on the links. Download it here","title":"Menus and Forms"},{"location":"menus-and-forms/#menus-and-forms","text":"Think of a micro app menu as a kind of multiple choice survey that uses A-Z as options. Let's start with a copy of the standard todo app. Use a basic code editor like Sublime Text or Visual Studio Code . If you don't have one click on the links. Download it here","title":"Menus and Forms"},{"location":"text-audio-video/","text":"Text Audio and Video What is it? ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs. Features Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running. Requirements argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it). Usage ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline ) @generate_doc Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. generate_doc() Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. from argdoc import generate_doc def main (): parser = argparse . ArgumentParser ( whatevs ) parser . add_argument () ... generate_doc ( parser ) generate_doc (commandline) Finally, if preferred, you can run argDoc as a commandline tool. $user python argdoc.py --f pdf name_of_script_to_document.py Contact Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com Sample Output Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like. QuickValidate.py Validates all HTML/CSS in projects folder(s) How To Use Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. $ python calc.py --saveresults myfile.txt 38 / 2 Documentation Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Text audio video"},{"location":"text-audio-video/#text-audio-and-video","text":"","title":"Text Audio and Video"},{"location":"text-audio-video/#what-is-it","text":"ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs.","title":"What is it?"},{"location":"text-audio-video/#features","text":"Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running.","title":"Features"},{"location":"text-audio-video/#requirements","text":"argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it).","title":"Requirements"},{"location":"text-audio-video/#usage","text":"ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline )","title":"Usage"},{"location":"text-audio-video/#generate_doc","text":"Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code..","title":"@generate_doc"},{"location":"text-audio-video/#generate_doc_1","text":"Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. from argdoc import generate_doc def main (): parser = argparse . ArgumentParser ( whatevs ) parser . add_argument () ... generate_doc ( parser )","title":"generate_doc()"},{"location":"text-audio-video/#generate_doc-commandline","text":"Finally, if preferred, you can run argDoc as a commandline tool. $user python argdoc.py --f pdf name_of_script_to_document.py","title":"generate_doc (commandline)"},{"location":"text-audio-video/#contact","text":"Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com","title":"Contact"},{"location":"text-audio-video/#sample-output","text":"Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like.","title":"Sample Output"},{"location":"text-audio-video/#quickvalidatepy","text":"Validates all HTML/CSS in projects folder(s)","title":"QuickValidate.py"},{"location":"text-audio-video/#how-to-use","text":"Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. $ python calc.py --saveresults myfile.txt 38 / 2","title":"How To Use"},{"location":"text-audio-video/#documentation","text":"Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Documentation"},{"location":"SDK/NodeJS/","text":"onem-nodejs-api Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object onem-nodejs-api~Service Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object new Service(serviceName) Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service service.addForm(template, data) \u21d2 object Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection service.addMenu(template, data) \u21d2 object Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection onem-nodejs-api~Form(index, template, data) Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~Menu(index, template, data) Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~Form : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~FormBody : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission onem-nodejs-api~FormItem : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation onem-nodejs-api~Menu : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~MenuItem : object Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"NodeJS"},{"location":"SDK/NodeJS/#onem-nodejs-api","text":"Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object","title":"onem-nodejs-api"},{"location":"SDK/NodeJS/#onem-nodejs-apiservice","text":"Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object","title":"onem-nodejs-api~Service"},{"location":"SDK/NodeJS/#new-serviceservicename","text":"Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service","title":"new Service(serviceName)"},{"location":"SDK/NodeJS/#serviceaddformtemplate-data-object","text":"Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection","title":"service.addForm(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#serviceaddmenutemplate-data-object","text":"Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection","title":"service.addMenu(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformindex-template-data","text":"Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form(index, template, data)"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuindex-template-data","text":"Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu(index, template, data)"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apiform-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form : object"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string_1","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string_1","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form_1","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apiformbody-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission","title":"onem-nodejs-api~FormBody : object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation","title":"onem-nodejs-api~FormItem : object"},{"location":"SDK/NodeJS/#onem-nodejs-apimenu-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu : object"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string_1","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string_1","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu_1","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"onem-nodejs-api~MenuItem : object"},{"location":"SDK/openapi3.0.0/","text":"ONEm HTTP REST Specification API v1.1-oas3 Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu. This specification defines the HTTP REST interface that is used when applications receive callbacks to the URL specified in the service registration. Base URLs: http://developer-onem.com http://testtool.skor.games:9000 Email: ONEm Authentication HTTP Authentication, scheme: bearer Default register Code samples var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () POST /service Register or re-register a service Body parameter { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] } Parameters Name In Type Required Description body body body true Provide the apikey given to you by your ONEm contact. callbackPath is the base path of your host server where you want to receive callbacks arising from user inputs Example responses 200 Response { \"result\" : true } Responses Status Meaning Description Schema 200 OK Added or updated successfully inline_response_200 Callbacks #### userAction **User action callback** ## register > Code samples var headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) import requests headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service` Parameters |Name|In|Type|Required|Description| |---|---|---|---|---| |param1|query|string|false|The first optional space-separated parameter provided by the user in service switching events| |param2|query|string|false|The second optional space-separated parameter provided by the user in service switching events| |paramn|query|string|false|The nth optional space-separated parameter provided by the user in service switching events| > Example responses > 200 Response { \"type\" : \"menu\" , \"header\" : \"string\" , \"footer\" : \"string\" , \"body\" : { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } } Responses |Status|Meaning|Description|Schema| |---|---|---|---| |200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON formatted object containing the response object that should be sent to the user (menu or form)|Inline| Response Schema Status Code **200** |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb type|string|true|none|Indicates whether to render a menu or a form| |\u00bb header|string|false|none|The value of the header which will be prefixed automatically with and convered to upper case| |\u00bb footer|string|false|none|The value of the footer if required if omitted the platform will include a default footer'| |\u00bb body|any|true|none|Array of either content or menu objects| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb *anonymous*|[oneOf]|false|none|none| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Content only| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Menu option| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user chooses this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method to use in callback| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|[Form](#schemaform)|false|none|none| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user selects this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method that should be used in the callback| |\u00bb\u00bb\u00bb\u00bb confirm|boolean|false|none|TRUE if wizard confirmation menu should be displayed at the end of the form| |\u00bb\u00bb\u00bb\u00bb formItems|[[Form_formItems](#schemaform_formitems)]|true|none|Array of form items| |\u00bb\u00bb\u00bb\u00bb\u00bb name|string|true|none|Name of the form property| |\u00bb\u00bb\u00bb\u00bb\u00bb description|string|true|none|User prompt| |\u00bb\u00bb\u00bb\u00bb\u00bb type|string|true|none|Used for form property validation| #### Enumerated Values |Property|Value| |---|---| |type|menu| |type|form| |type|content| |type|option| |method|GET| |method|POST| |method|PUT| |method|DELETE| |method|GET| |method|POST| |method|PUT| |method|DELETE| |type|string| |type|integer| |type|date| To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth ## register > Code samples var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service` > Body parameter { \"[object Object]\" : \"dueDate\" } Parameters |Name|In|Type|Required|Description| |---|---|---|---|---| |body|body|object|false|When user completes a form, the body contains a json object with names properties and values. The property names are taken from the 'name' property of the Form schema| |\u00bb [object Object]|body|string|false|none| > Example responses > 200 Response { \"type\" : \"menu\" , \"header\" : \"string\" , \"footer\" : \"string\" , \"body\" : { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } } Responses |Status|Meaning|Description|Schema| |---|---|---|---| |200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|JSON formatted object containing the response object that should be sent to the user (menu or form)|Inline| Response Schema Status Code **200** |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb type|string|true|none|Indicates whether to render a menu or a form| |\u00bb header|string|false|none|The value of the header which will be prefixed automatically with and convered to upper case| |\u00bb footer|string|false|none|The value of the footer if required. If omitted the platform will include a default footer| |\u00bb body|any|true|none|Array of either content or menu objects| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb *anonymous*|[oneOf]|false|none|none| *oneOf* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Content only| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|object|false|none|Menu option| |\u00bb\u00bb\u00bb\u00bb type|string|true|none|none| |\u00bb\u00bb\u00bb\u00bb description|string|true|none|Value to be rendered| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user chooses this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method to use in callback| *xor* |Name|Type|Required|Restrictions|Description| |---|---|---|---|---| |\u00bb\u00bb\u00bb *anonymous*|[Form](#schemaform)|false|none|none| |\u00bb\u00bb\u00bb\u00bb nextRoute|string|true|none|relative URL from base path to use as callback when user selects this option| |\u00bb\u00bb\u00bb\u00bb method|string|false|none|HTTP method that should be used in the callback| |\u00bb\u00bb\u00bb\u00bb confirm|boolean|false|none|TRUE if wizard confirmation menu should be displayed at the end of the form| |\u00bb\u00bb\u00bb\u00bb formItems|[[Form_formItems](#schemaform_formitems)]|true|none|Array of form items| |\u00bb\u00bb\u00bb\u00bb\u00bb name|string|true|none|Name of the form property| |\u00bb\u00bb\u00bb\u00bb\u00bb description|string|true|none|User prompt| |\u00bb\u00bb\u00bb\u00bb\u00bb type|string|true|none|Used for form property validation| #### Enumerated Values |Property|Value| |---|---| |type|menu| |type|form| |type|content| |type|option| |method|GET| |method|POST| |method|PUT| |method|DELETE| |method|GET| |method|POST| |method|PUT| |method|DELETE| |type|string| |type|integer| |type|date| To perform this operation, you must be authenticated by means of one of the following methods: bearerAuth This operation does not require authentication Schemas Menu { \"type\" : \"menu\" , \"header\" : \"TODO MENU\" , \"body\" : [ { \"type\" : \"option\" , \"description\" : \"New todo\" , \"nextRoute\" : \"/todo/form/desc/\" }, { \"type\" : \"option\" , \"description\" : \"Done(0)\" , \"nextRoute\" : \"/todoListdone/\" }, { \"type\" : \"content\" , \"description\" : \"Todo (2):\" }, { \"type\" : \"option\" , \"description\" : \"Desc 234\" , \"nextRoute\" : \"/todo/view/5c9a505d37655e6c74c93f0d\" }, { \"type\" : \"option\" , \"description\" : \"Sdfg 123\" , \"nextRoute\" : \"/todo/view/5c9a5537ccafb76cc39b1a75\" } ] } Properties oneOf Name Type Required Restrictions Description anonymous object false none Content only \u00bb type string true none none \u00bb description string true none Value to be rendered xor Name Type Required Restrictions Description anonymous object false none Menu option \u00bb type string true none none \u00bb description string true none Value to be rendered \u00bb nextRoute string true none relative URL from base path to use as callback when user chooses this option \u00bb method string false none HTTP method to use in callback Enumerated Values Property Value type content type option method GET method POST method PUT method DELETE Form { \"nextRoute\" : \"string\" , \"method\" : \"POST\" , \"confirm\" : false , \"formItems\" : { \"type\" : \"form\" , \"header\" : \"TODO MENU\" , \"body\" : { \"nextRoute\" : \"todoAddDesc\" , \"method\" : \"POST\" , \"items\" : [ { \"name\" : \"description\" , \"description\" : \"Provide a description for the task\" , \"type\" : \"string\" }, { \"name\" : \"dueDate\" , \"description\" : \"Provide a due date\" , \"type\" : \"date\" } ] } } } Properties Name Type Required Restrictions Description nextRoute string true none relative URL from base path to use as callback when user selects this option method string false none HTTP method that should be used in the callback confirm boolean false none TRUE if wizard confirmation menu should be displayed at the end of the form formItems [ Form_formItems ] true none Array of form items Enumerated Values Property Value method GET method POST method PUT method DELETE service_verbs { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } Properties Name Type Required Restrictions Description name string true none none route string true none none footer boolean false none indicates whether this verb should appear in footers body { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] } Properties Name Type Required Restrictions Description apiKey string false none none serviceName string false none none callbackPath string false none none verbs [ service_verbs ] false none none inline_response_200 { \"result\" : true } Properties Name Type Required Restrictions Description result boolean false none Indicates success or failure Form_formItems { \"name\" : \"string\" , \"description\" : \"string\" , \"type\" : \"string\" } Properties Name Type Required Restrictions Description name string true none Name of the form property description string true none User prompt type string true none Used for form property validation Enumerated Values Property Value type string type integer type date","title":"ONEm HTTP REST Specification API"},{"location":"SDK/openapi3.0.0/#authentication","text":"HTTP Authentication, scheme: bearer","title":"Authentication"},{"location":"SDK/openapi3.0.0/#register","text":"Code samples var headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () POST /service Register or re-register a service Body parameter { \"apiKey\" : \"gklgjiljwejfjoweWEWEOGJWEGW\" , \"serviceName\" : \"todo\" , \"callbackPath\" : \"http://myappsite.com\" , \"verbs\" : [ { \"name\" : \"menu\" , \"route\" : \"/todo\" , \"footer\" : false } ] }","title":"register"},{"location":"SDK/openapi3.0.0/#callbacks","text":"#### userAction **User action callback** ## register > Code samples var headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' }; $ . ajax ({ url : 'http://developer-onem.com/service' , method : 'post' , headers : headers , success : function ( data ) { console . log ( JSON . stringify ( data )); } }) import requests headers = { 'Accept' : 'application/json' , 'Authorization' : 'Bearer {access-token}' } r = requests . post ( 'http://developer-onem.com/service' , params = { }, headers = headers ) print r . json () `POST /service`","title":"Callbacks"},{"location":"SDK/openapi3.0.0/#schemas","text":"","title":"Schemas"},{"location":"SDK/openapi3.0.0/#properties","text":"oneOf Name Type Required Restrictions Description anonymous object false none Content only \u00bb type string true none none \u00bb description string true none Value to be rendered xor Name Type Required Restrictions Description anonymous object false none Menu option \u00bb type string true none none \u00bb description string true none Value to be rendered \u00bb nextRoute string true none relative URL from base path to use as callback when user chooses this option \u00bb method string false none HTTP method to use in callback","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values","text":"Property Value type content type option method GET method POST method PUT method DELETE","title":"Enumerated Values"},{"location":"SDK/openapi3.0.0/#properties_1","text":"Name Type Required Restrictions Description nextRoute string true none relative URL from base path to use as callback when user selects this option method string false none HTTP method that should be used in the callback confirm boolean false none TRUE if wizard confirmation menu should be displayed at the end of the form formItems [ Form_formItems ] true none Array of form items","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values_1","text":"Property Value method GET method POST method PUT method DELETE","title":"Enumerated Values"},{"location":"SDK/openapi3.0.0/#properties_2","text":"Name Type Required Restrictions Description name string true none none route string true none none footer boolean false none indicates whether this verb should appear in footers","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_3","text":"Name Type Required Restrictions Description apiKey string false none none serviceName string false none none callbackPath string false none none verbs [ service_verbs ] false none none","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_4","text":"Name Type Required Restrictions Description result boolean false none Indicates success or failure","title":"Properties"},{"location":"SDK/openapi3.0.0/#properties_5","text":"Name Type Required Restrictions Description name string true none Name of the form property description string true none User prompt type string true none Used for form property validation","title":"Properties"},{"location":"SDK/openapi3.0.0/#enumerated-values_2","text":"Property Value type string type integer type date","title":"Enumerated Values"},{"location":"api/purpose/","text":"TODO","title":"Purpose"},{"location":"building/forms/","text":"A form is like a collection of menus or raw responses and it is basically collecting information from the user. It is composed by a header , a body and a footer . The body represents form items and these can be slightly modified menus or raw responses. The form items are being processed in a successive manner. After all the form items have been processed, the user can confirm his choices or reset any of them. Json Structure Your server must return a JSON response with the following structure: Form type - (string) defaults to \"form\" header - (string) The header of the firn body - (array) FormItem or FormItemMenu objects - see below footer - (string) The footer of the form path - (string) Next route callback path, accessed after form is finished method - (string) Http method indicating how to trigger the path meta - (object) FormMeta object - see below FormMeta completion_status_show - (bool) indicates a form completion status completion_status_in_header - (bool) indicates the status in the header confirmation_needed - (bool) shows e menu at the end of the form so user can confirm the choices FormItem type - (string) enum: \"string\", \"int\", \"float\", \"date\", \"datetime\" \"string\" - the user should enter a string during this step \"int\" - the user should enter a valid number \"float\" - the user could enter a floating number \"date\" - the user should enter a date \"datetime\" - the user should enter a date and time name - (string) the name of this FormItem, used in form serialization description - (string) the description of this FormItem header - (string) if provided will overwrite the Form.header footer - (string) if provided will overwrite the Form.footer FormItemMenu type - (string) defaults to \"form-menu\" name - (string) the name of this FormItemMenu, used in form serialization header - (string) if provided will overwrite the Form.header footer - (string) if provided will overwrite the Form.footer body - (array) FormItemMenuItem objects - see below FormItemMenuItem type - (string) defaults to \"menu\" value - (string) the value of this FormItemMenuItem, used in form serialization description - (string) the description of this FormItemMenuItem Example: { \"body\": [ { \"type\": \"string\", \"name\": \"descr\", \"description\": \"Provide a description\", }, { \"type\": \"date\", \"name\": \"due_date\", \"header\": \"due date\", \"description\": \"Provide a due date\" }, { \"type\": \"menu\", \"name\": \"prio\", \"header\": \"priority\", \"body\": [ { \"type\": \"option\", \"value\": \"high\", \"description\": \"High priority\" }, { \"type\": \"option\", \"value\": \"low\", \"description\": \"Low priority\" } ] } ], \"header\": \"create task\", \"footer\": null, \"meta\": { \"confirmation_needed\": false }, \"method\": \"POST\", \"path\": \"/task/create\", \"type\": \"form\" } Notice the 'type': 'form' key value pair, which indicates the form response. So when the user sends a to access the New todo option item, as mentioned here ONEm will send a GET request to http://your-callback.url/task/create/ . This url should return something like the above json structure. The user will be taken through a wizard and it will look like: #TODO CREATE TASK Provide a description This is the first step and whatever the user replies with will be set as the task description. This is a string and it will be POST ed to path as indicated in the json structure. Notice there is no header or footer mentioned at this step, so form header and footer will be used as fallbacks. #TODO DUE DATE Provide a description This is the second step and the user needs to reply with a date. There is no callback path so no HTTP request will be performed after this step. The header is present here, so it will be displayed instead of the form header. #TODO PRIORITY A High priority B Low priority --Reply A-B This is the last step and the user needs to choose one option. After all steps have been processed, as indicated through method and path , the form will be serialized and an HTTP POST will be sent to the path which is relative to the callback url: http://your-callback.url/task/create/ So the POST will look like: ?descr=some_description&due_date=2019-10-10&prio=high Type The response type should be equal to form to indicate a form response. Meta The meta key holds an object which can contain one of the following keys: confirmation_needed - if set to false, there won't be any confirmation screen at the end of the form (defaults to true) completion_status_show - if set to true, there will be a completion status shown (defaults to false) completion_status_in_header - if set to true, the status will be shown in the header (defaults to false, applicable only when status is shown) Header The header of the form is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it. Footer The footer of the form is indicated through footer key and like the header of the form, it is not final and will be altered by the ONEm platform. If no footer is specified, a default might be set. Body The body holds a sequence of dictionaries. Each dictoinary is called a form item and it is described through the below keys: type - the form item type: string, int, float, date, datetime, menu name - the form item name - this is an identifier and it is used in the information collection process description - the form item description path - if exists, an HTTP request will be made after the user submitted his choice method - indicates how the HTTP request will be made (GET, POST, etc...) header - indicates the header for this form item and will overwrite the form header footer - indicates the footer for this form item and will overwrite the form footer Form Item Menu Aside from the above mentioned form items (strings, integers, etc), a form body can contain a form item menu. Think of it as the select tag in the HTML world. Structure wise, this is a menu slightly modified: there is a name indicating the form item name the body contains menu items without any path for option items, just value which will be set as choice upon user selection","title":"Forms"},{"location":"building/forms/#json-structure","text":"Your server must return a JSON response with the following structure: Form type - (string) defaults to \"form\" header - (string) The header of the firn body - (array) FormItem or FormItemMenu objects - see below footer - (string) The footer of the form path - (string) Next route callback path, accessed after form is finished method - (string) Http method indicating how to trigger the path meta - (object) FormMeta object - see below FormMeta completion_status_show - (bool) indicates a form completion status completion_status_in_header - (bool) indicates the status in the header confirmation_needed - (bool) shows e menu at the end of the form so user can confirm the choices FormItem type - (string) enum: \"string\", \"int\", \"float\", \"date\", \"datetime\" \"string\" - the user should enter a string during this step \"int\" - the user should enter a valid number \"float\" - the user could enter a floating number \"date\" - the user should enter a date \"datetime\" - the user should enter a date and time name - (string) the name of this FormItem, used in form serialization description - (string) the description of this FormItem header - (string) if provided will overwrite the Form.header footer - (string) if provided will overwrite the Form.footer FormItemMenu type - (string) defaults to \"form-menu\" name - (string) the name of this FormItemMenu, used in form serialization header - (string) if provided will overwrite the Form.header footer - (string) if provided will overwrite the Form.footer body - (array) FormItemMenuItem objects - see below FormItemMenuItem type - (string) defaults to \"menu\" value - (string) the value of this FormItemMenuItem, used in form serialization description - (string) the description of this FormItemMenuItem Example: { \"body\": [ { \"type\": \"string\", \"name\": \"descr\", \"description\": \"Provide a description\", }, { \"type\": \"date\", \"name\": \"due_date\", \"header\": \"due date\", \"description\": \"Provide a due date\" }, { \"type\": \"menu\", \"name\": \"prio\", \"header\": \"priority\", \"body\": [ { \"type\": \"option\", \"value\": \"high\", \"description\": \"High priority\" }, { \"type\": \"option\", \"value\": \"low\", \"description\": \"Low priority\" } ] } ], \"header\": \"create task\", \"footer\": null, \"meta\": { \"confirmation_needed\": false }, \"method\": \"POST\", \"path\": \"/task/create\", \"type\": \"form\" } Notice the 'type': 'form' key value pair, which indicates the form response. So when the user sends a to access the New todo option item, as mentioned here ONEm will send a GET request to http://your-callback.url/task/create/ . This url should return something like the above json structure. The user will be taken through a wizard and it will look like: #TODO CREATE TASK Provide a description This is the first step and whatever the user replies with will be set as the task description. This is a string and it will be POST ed to path as indicated in the json structure. Notice there is no header or footer mentioned at this step, so form header and footer will be used as fallbacks. #TODO DUE DATE Provide a description This is the second step and the user needs to reply with a date. There is no callback path so no HTTP request will be performed after this step. The header is present here, so it will be displayed instead of the form header. #TODO PRIORITY A High priority B Low priority --Reply A-B This is the last step and the user needs to choose one option. After all steps have been processed, as indicated through method and path , the form will be serialized and an HTTP POST will be sent to the path which is relative to the callback url: http://your-callback.url/task/create/ So the POST will look like: ?descr=some_description&due_date=2019-10-10&prio=high","title":"Json Structure"},{"location":"building/forms/#type","text":"The response type should be equal to form to indicate a form response.","title":"Type"},{"location":"building/forms/#meta","text":"The meta key holds an object which can contain one of the following keys: confirmation_needed - if set to false, there won't be any confirmation screen at the end of the form (defaults to true) completion_status_show - if set to true, there will be a completion status shown (defaults to false) completion_status_in_header - if set to true, the status will be shown in the header (defaults to false, applicable only when status is shown)","title":"Meta"},{"location":"building/forms/#header","text":"The header of the form is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it.","title":"Header"},{"location":"building/forms/#footer","text":"The footer of the form is indicated through footer key and like the header of the form, it is not final and will be altered by the ONEm platform. If no footer is specified, a default might be set.","title":"Footer"},{"location":"building/forms/#body","text":"The body holds a sequence of dictionaries. Each dictoinary is called a form item and it is described through the below keys: type - the form item type: string, int, float, date, datetime, menu name - the form item name - this is an identifier and it is used in the information collection process description - the form item description path - if exists, an HTTP request will be made after the user submitted his choice method - indicates how the HTTP request will be made (GET, POST, etc...) header - indicates the header for this form item and will overwrite the form header footer - indicates the footer for this form item and will overwrite the form footer","title":"Body"},{"location":"building/forms/#form-item-menu","text":"Aside from the above mentioned form items (strings, integers, etc), a form body can contain a form item menu. Think of it as the select tag in the HTML world. Structure wise, this is a menu slightly modified: there is a name indicating the form item name the body contains menu items without any path for option items, just value which will be set as choice upon user selection","title":"Form Item Menu"},{"location":"building/html/","text":"HTML \\<--> SMS TBD intro Tags detailed description Tag Tag description Examples 1 <section></section> Declares a page (menu, text, wizard step). ATTRS : name - required when <section> is a <form> 's child header - optional footer - optional <section> ... </section> 2 <header></header> Declares the header of a page. It overwrites the header attribute from <section> A page does not need to declare a header, but the SMS will have a header anyway. It is displayed as the first text line of a page and it is preceded by # . ATTRS : None <section> <header> #SETUP ONEM NAME </header> ... </section> 3 <footer></footer> Declares the footer of a page. It overwrites the footer attribute from <section> . A page does not need to declare a footer, but the SMS will have a footer anyway. It should be relative short line of text and it is shown in the last chunk of a page, preceded by -- . ATTRS : None <section> ... <footer> --Reply with text </footer> </section> 4 <form></form> The equivalent of a Nautilus wizard. It must contain at least 1 page (WizardStep). See <section> tag. ATTRS : action - (required) method - (default \u201cPOST\u201d) header - (optional) footer - (optional) completionStatusShow - (optional) completionStatusInHeader - (optional) confirmationNeeded - (optional) <form action= \"/path-1\" method= \"POST\" > <!-- Wizard --> <section name= \"first-step\" > <!-- Wizard step --> ... </section> </form> 5 <input/> Used inside a <form></form> when the user is asked to send data of a certain type ATTRS : type - (required) One of: \u201ctext\u201d, \u201cdate\u201d, \u201cdatetime\u201d <form action= \"/path-2\" method= \"POST\" > <!-- Wizard --> <section name= \"first-step\" > <!-- Wizard step --> <header> # SETUP ONEM NAME </header> <label> Send your ONEm name </label> <input type= \"text\" /> <footer> Reply text </footer> </section> </form> 6 <label></label> Used inside forms to add text 7 <ul></ul> Declares a list (OptionList). It must contain at least 1 <li> tag.It can only be the child for a page (within a form or not). When rendered, it will be a numbered selectable list (preceded by a letter or a number). See <li> tag. ATTRS : None <section> ... <ul> ... </ul> ... </section> 8 <li></li> Declares a list item (OptionItem). It can stay only inside a <ul></ul> tag. If it contains an <a> tag, it will be selected (preceded by a letter or a number). Otherwise it\u2019s a separator item. ATTRS : value - (optional) if not inside a form it is ignored. If value is NULL, then the menu item is a separator item. If not NULL, the menu item is selectable. <section> ... <ul> <li> One option </li> <li> Another option </li> </ul> ... </section> 9 <a></a> It marks a numbered list item. ATTRS : href - (required) method - (optional) default \u201cGET\u201d <section> ... <ul> <li> <a href= \"/routes/1\" > Go to route 1 </a> </li> <li> Separator </li> <li> <a href= \"/routes/2\" > Go to route 2 </a> </li> </ul> ... </section> 10 <p></p> Renders a line of text. It can be used also as a label in a form. <section> ... <p> This is the first line </p> <p> This is the second line </p> ... </section> 11 <br/> Renders a new line. <section> ... <p> This is the first line </p> <br/> <p> This is the third line </p> ... </section> Examples Now let's glue everything together and see some real examples:","title":"HTML"},{"location":"building/html/#html-62-sms","text":"TBD intro","title":"HTML \\&lt;--> SMS"},{"location":"building/html/#tags-detailed-description","text":"Tag Tag description Examples 1 <section></section> Declares a page (menu, text, wizard step). ATTRS : name - required when <section> is a <form> 's child header - optional footer - optional <section> ... </section> 2 <header></header> Declares the header of a page. It overwrites the header attribute from <section> A page does not need to declare a header, but the SMS will have a header anyway. It is displayed as the first text line of a page and it is preceded by # . ATTRS : None <section> <header> #SETUP ONEM NAME </header> ... </section> 3 <footer></footer> Declares the footer of a page. It overwrites the footer attribute from <section> . A page does not need to declare a footer, but the SMS will have a footer anyway. It should be relative short line of text and it is shown in the last chunk of a page, preceded by -- . ATTRS : None <section> ... <footer> --Reply with text </footer> </section> 4 <form></form> The equivalent of a Nautilus wizard. It must contain at least 1 page (WizardStep). See <section> tag. ATTRS : action - (required) method - (default \u201cPOST\u201d) header - (optional) footer - (optional) completionStatusShow - (optional) completionStatusInHeader - (optional) confirmationNeeded - (optional) <form action= \"/path-1\" method= \"POST\" > <!-- Wizard --> <section name= \"first-step\" > <!-- Wizard step --> ... </section> </form> 5 <input/> Used inside a <form></form> when the user is asked to send data of a certain type ATTRS : type - (required) One of: \u201ctext\u201d, \u201cdate\u201d, \u201cdatetime\u201d <form action= \"/path-2\" method= \"POST\" > <!-- Wizard --> <section name= \"first-step\" > <!-- Wizard step --> <header> # SETUP ONEM NAME </header> <label> Send your ONEm name </label> <input type= \"text\" /> <footer> Reply text </footer> </section> </form> 6 <label></label> Used inside forms to add text 7 <ul></ul> Declares a list (OptionList). It must contain at least 1 <li> tag.It can only be the child for a page (within a form or not). When rendered, it will be a numbered selectable list (preceded by a letter or a number). See <li> tag. ATTRS : None <section> ... <ul> ... </ul> ... </section> 8 <li></li> Declares a list item (OptionItem). It can stay only inside a <ul></ul> tag. If it contains an <a> tag, it will be selected (preceded by a letter or a number). Otherwise it\u2019s a separator item. ATTRS : value - (optional) if not inside a form it is ignored. If value is NULL, then the menu item is a separator item. If not NULL, the menu item is selectable. <section> ... <ul> <li> One option </li> <li> Another option </li> </ul> ... </section> 9 <a></a> It marks a numbered list item. ATTRS : href - (required) method - (optional) default \u201cGET\u201d <section> ... <ul> <li> <a href= \"/routes/1\" > Go to route 1 </a> </li> <li> Separator </li> <li> <a href= \"/routes/2\" > Go to route 2 </a> </li> </ul> ... </section> 10 <p></p> Renders a line of text. It can be used also as a label in a form. <section> ... <p> This is the first line </p> <p> This is the second line </p> ... </section> 11 <br/> Renders a new line. <section> ... <p> This is the first line </p> <br/> <p> This is the third line </p> ... </section>","title":"Tags detailed description"},{"location":"building/html/#examples","text":"Now let's glue everything together and see some real examples:","title":"Examples"},{"location":"building/menus/","text":"A menu represents a type of response ONEm sends back to the user and it allows the user to select certain options you put in the menu. It is composed by a header , a body and a footer . The body can contain option or content items. When an option is being accessed, ONEm platform will perform an HTTP request to the callback path you set. Json Structure Your server must return a JSON response with the following structure: Menu type - (string) defaults to \"menu\" header - (string) The header of the menu body - (array) MenuItem objects - see below footer - (string) The footer of the menu meta - (object) MenuMeta object - see below MenuItem type - (string) enum: \"option\", \"content\" \"option\" - indicates an option and needs a path - see below \"content\" - shows content as indicated in description - see below description - (string) The description of this MenuItem path - (string) Next route callback path, accessed upon user selection method - (string) Http method indicating how to trigger the path MenuMeta auto_select - (bool) Auto selects option if the Menu has only one MenuItem of type option Example: { \"body\" : [ { \"description\" : \"New todo\" , \"method\" : \"GET\" , \"path\" : \"/task/create/\" , \"type\" : \"option\" }, { \"description\" : \"Done(0)\" , \"method\" : \"GET\" , \"path\" : \"/task/list/done/\" , \"type\" : \"option\" }, { \"description\" : \"Todo(1)\" , \"method\" : null , \"path\" : null , \"type\" : \"content\" }, { \"description\" : \"buy coffee 2019-07-01\" , \"method\" : \"GET\" , \"path\" : \"/task/7/\" , \"type\" : \"option\" } ], \"footer\" : null , \"header\" : \"home\" , \"type\" : \"menu\" } Notice the 'type': 'menu' key value pair, which indicates the menu response. So when the user accesses your todo app, by sending #todo , ONEm will send a GET request to the callback_url as mentioned in here . Your url should return something like the above json structure. The response back to the user will be an SMS which will look like: #TODO HOME A New todo B Done(0) Todo(1) C buy coffee 2019-07-01 --Reply A-C Type The response type should be equal to menu to indicate a menu response. Header The header of the menu is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it. Body The body of the menu is indicated through body key and it is a sequence of dictionaries. Each dictionary can be an option or a content item and this is set through the type key. A content type item does not need a path nor a method since these are not selectable by the user. However an option item needs a callback path and this is relative to the callback_url set in the app schema in the developer portal. If the method is not present, it will default to GET. NOTE: A body composed of only content items could be used for display purposes only. This is called a raw response. Footer The footer of the menu is indicated through footer key and like the header of the menu, it is not final and will be altered by the ONEm platform. If no footer is specified, a default is set like in the above example.","title":"Menus"},{"location":"building/menus/#json-structure","text":"Your server must return a JSON response with the following structure: Menu type - (string) defaults to \"menu\" header - (string) The header of the menu body - (array) MenuItem objects - see below footer - (string) The footer of the menu meta - (object) MenuMeta object - see below MenuItem type - (string) enum: \"option\", \"content\" \"option\" - indicates an option and needs a path - see below \"content\" - shows content as indicated in description - see below description - (string) The description of this MenuItem path - (string) Next route callback path, accessed upon user selection method - (string) Http method indicating how to trigger the path MenuMeta auto_select - (bool) Auto selects option if the Menu has only one MenuItem of type option Example: { \"body\" : [ { \"description\" : \"New todo\" , \"method\" : \"GET\" , \"path\" : \"/task/create/\" , \"type\" : \"option\" }, { \"description\" : \"Done(0)\" , \"method\" : \"GET\" , \"path\" : \"/task/list/done/\" , \"type\" : \"option\" }, { \"description\" : \"Todo(1)\" , \"method\" : null , \"path\" : null , \"type\" : \"content\" }, { \"description\" : \"buy coffee 2019-07-01\" , \"method\" : \"GET\" , \"path\" : \"/task/7/\" , \"type\" : \"option\" } ], \"footer\" : null , \"header\" : \"home\" , \"type\" : \"menu\" } Notice the 'type': 'menu' key value pair, which indicates the menu response. So when the user accesses your todo app, by sending #todo , ONEm will send a GET request to the callback_url as mentioned in here . Your url should return something like the above json structure. The response back to the user will be an SMS which will look like: #TODO HOME A New todo B Done(0) Todo(1) C buy coffee 2019-07-01 --Reply A-C","title":"Json Structure"},{"location":"building/menus/#type","text":"The response type should be equal to menu to indicate a menu response.","title":"Type"},{"location":"building/menus/#header","text":"The header of the menu is indicated through header key. This value is not final and will be altered by the ONEm platform, by making it uppercased and placing the name of your app in front of it.","title":"Header"},{"location":"building/menus/#body","text":"The body of the menu is indicated through body key and it is a sequence of dictionaries. Each dictionary can be an option or a content item and this is set through the type key. A content type item does not need a path nor a method since these are not selectable by the user. However an option item needs a callback path and this is relative to the callback_url set in the app schema in the developer portal. If the method is not present, it will default to GET. NOTE: A body composed of only content items could be used for display purposes only. This is called a raw response.","title":"Body"},{"location":"building/menus/#footer","text":"The footer of the menu is indicated through footer key and like the header of the menu, it is not final and will be altered by the ONEm platform. If no footer is specified, a default is set like in the above example.","title":"Footer"},{"location":"building/raw/","text":"A raw response is a just a plain menu , that is the body of the menu does not contain any option items. This means that no path or method are needed in the content item of the body , since the user cannot select anything as there are no options available like in a menu. Json Structure Your server must return a JSON response with the following structure: Menu type - (string) defaults to \"menu\" header - (string) The header of the menu body - (array) MenuItem objects - see below footer - (string) The footer of the menu MenuItem type - (string) enum: \"content\" \"content\" - shows content as indicated in description - see below description - (string) The description of this MenuItem Example: {'body': [{'description': 'Your task has been created!', 'type': 'content'}], 'header': 'done', 'footer': None, 'type': 'menu'} The response back to the user will be an SMS which will look like: #TODO DONE Your task has been created!","title":"Raw"},{"location":"building/raw/#json-structure","text":"Your server must return a JSON response with the following structure: Menu type - (string) defaults to \"menu\" header - (string) The header of the menu body - (array) MenuItem objects - see below footer - (string) The footer of the menu MenuItem type - (string) enum: \"content\" \"content\" - shows content as indicated in description - see below description - (string) The description of this MenuItem Example: {'body': [{'description': 'Your task has been created!', 'type': 'content'}], 'header': 'done', 'footer': None, 'type': 'menu'} The response back to the user will be an SMS which will look like: #TODO DONE Your task has been created!","title":"Json Structure"},{"location":"building/register/","text":"TODO","title":"How to register your app"},{"location":"building/webhooks/","text":"Webhooks App webhooks enable you to receive notifications when certain events happen. Webhook notifications are sent as HTTP POST requests to a URL of your choosing. To integrate with webhooks, you need to implement a server endpoint that receives and handles these requests. As a minimum, when you register your app on the developer portal , you will need to define a user_action webhook so that your app can receive notifications whenever your users perform actions that your app must handle. Currently, the user_action webhook is triggered when your users: Select a menu option Send a pre-defined verb Submit a form In the future, more webhooks will be added, so stay tuned.","title":"Webhooks"},{"location":"building/webhooks/#webhooks","text":"App webhooks enable you to receive notifications when certain events happen. Webhook notifications are sent as HTTP POST requests to a URL of your choosing. To integrate with webhooks, you need to implement a server endpoint that receives and handles these requests. As a minimum, when you register your app on the developer portal , you will need to define a user_action webhook so that your app can receive notifications whenever your users perform actions that your app must handle. Currently, the user_action webhook is triggered when your users: Select a menu option Send a pre-defined verb Submit a form In the future, more webhooks will be added, so stay tuned.","title":"Webhooks"},{"location":"getting-started/getting-started-python/","text":"Getting Started with python Introduction This page will be updated soon.","title":"Getting Started with python"},{"location":"getting-started/getting-started-python/#getting-started-with-python","text":"","title":"Getting Started with python"},{"location":"getting-started/getting-started-python/#introduction","text":"This page will be updated soon.","title":"Introduction"},{"location":"getting-started/getting-started/","text":"Getting Started on ONEm Step-by-step guides for deploying your first app and mastering the basics of ONEm Follow the guide for your favourite language: Getting started with NodeJS 1. Sign-up Use either a Google or Facebook account. If you do not have a Google or facebook use these links to get a free one. After you sign in you will be asked the following: Create you ONEm name Your ONEm name is your identity on the ONEm platform. It is used for direct messaging (like an email) @john Hi how are you? 2. Create your first app Sign-up Use either a Google or Facebook account. If you do not have one they are easy to create. Sign-up Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Getting started"},{"location":"getting-started/getting-started/#getting-started-on-onem","text":"Step-by-step guides for deploying your first app and mastering the basics of ONEm Follow the guide for your favourite language: Getting started with NodeJS","title":"Getting Started on ONEm"},{"location":"getting-started/getting-started/#1-sign-up","text":"Use either a Google or Facebook account. If you do not have a Google or facebook use these links to get a free one. After you sign in you will be asked the following:","title":"1. Sign-up"},{"location":"getting-started/getting-started/#create-you-onem-name","text":"Your ONEm name is your identity on the ONEm platform. It is used for direct messaging (like an email) @john Hi how are you?","title":"Create you ONEm name"},{"location":"getting-started/getting-started/#2-create-your-first-app","text":"","title":"2. Create your first app"},{"location":"getting-started/getting-started/#sign-up","text":"Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Sign-up"},{"location":"getting-started/getting-started/#sign-up_1","text":"Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Sign-up"},{"location":"getting_started/glance/","text":"New to ONEm apps? Alright, you came to the right place. Here is what you need to know: First you need to have a webserver able to return specific json http responses link to building Then you will need to register your app here Once you have done the above, you can access your application on the ONEm platform. link to what are ONEm apps Checkout our Python or Node.js tutorials for more in depth details. Learn about building, deploying, and managing your apps with ONEm Choose your favourite language Getting started Node.js Getting started python New to ONEm? Sign-up for a free developer account","title":"At a glance"},{"location":"getting_started/glance/#learn-about-building-deploying-and-managing-your-apps-with-onem","text":"","title":"Learn about building, deploying, and managing your apps with ONEm"},{"location":"getting_started/glance/#choose-your-favourite-language","text":"Getting started Node.js Getting started python New to ONEm? Sign-up for a free developer account","title":"Choose your favourite language"},{"location":"getting_started/nodejs/","text":"Introduction This tutorial will have you deploying a Node.js app to ONEm in minutes. In this tutorial items marked in yellow are essential and should be noted for completing certain processes. The tutorial assumes that you have a free or paid ONEm account , and that you have the following prerequisites installed locally: Node.js npm which is installed with Node.js git ngrok Visual Studio Code Set up on localhost To start with, we will be running all commands locally on your own PC. Your app will initially be hosted there for local development, then later you will learn how to host your app with a hosting provider for use on production. Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: $ node --version v10.15.3 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: $ npm --version 6 .9.0 Now check that you have git installed: $ git --version git version 2 .15.1 We will use ngrok to provide a secure tunnel between your app running on localhost and the ONEm servers. Check it's installed: $ ./ngrok --version ngrok version 2 .3.29 Prepare the app In this step, you will prepare a simple Hello World application. To clone a local version of the sample application, execute the following command in your local command shell or terminal: $ git clone https://github.com/chrishornmem/hello-world.git && cd hello-world You now have a functioning git repository that contains the Hello World application as well as a package.json file, which is used by npm (Node\u2019s dependency manager). Install the package dependencies with npm: $ npm install Configure the app The Hello World example application listens on the HTTP port defined by the environment variable PORT or 8080 by default. You can change the port by creating a .env file in your app's root directory and specifying the desired port value: Port PORT=8080 Token secret Webhooks triggered by the ONEm platform contain a JWT token in the authorzation header. The JWT token carries the unique identity of the ONEm user so that your app can differentiate requests from different users. In order to verify jwt tokens that are sent by the ONEm platform, the token secret should be configured. For the sandbox, this secret is 87654321 . Configure the secret in the .env file: TOKEN_SECRET=87654321 Run the app Start the app with: $ npm run start You should see output similar to the following in the console: Listening on port 8080 Now run ngrok so that your app is visible to the ONEm servers. $ ./ngrok http 8080 ngrok will launch a continuous display to the console. Make a note of the http or https forwarding address. In the example below the address is http://6e3f3fce.ngrok.io : Forwarding http://6e3f3fce.ngrok.io -> http://localhost:8080 Navigate to the forwarding link on your browser and you should see a Hello World greeting. The Hello World example app expects to receive HTTP requests as users perform certain actions. We call this the user_action webhook . The app expects to receive user action notifications on the base path: /api . The ONEm platform will need to be configured with the fully qualified URL of this endpoint, including the base path. In our example above, the user_action webhook URL would be http://6e3f3fce.ngrok.io/api Make a note of your user_action URL, you will need it in the next step. Register the app with ONEm Sandbox Portal If you have not already done so, sign-up for a free ONEm developer account on the sandbox. Register your app on the ONEm Sandbox Portal. You will need to provide: A unique one-word name for your app, e.g hello A description of your app A link to your website The user_action URL you obtained from the previous step Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials. Make sure the details are saved correctly in the portal. Test the app Head over to our sandbox test tool , we call it ONEm Zone . Sign-up and then in the input field, enter # followed by your app's name, for example #HELLO if your app is called hello . If you have completed everything correctly, the ONEm system should respond with a menu, similar to the below: #HELLO WORLD A First option B Second option C Third option --Reply A-C If you see the above, congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better. If you don't see the above done worry, go back and check that each step has been followed properly and your program will soon be up and running. Running your app in production Choose a hosting platform Your app will need to be hosted on the internet so that ONEm's platform can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure Install and deploy your app on production Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku you would use: $ heroku create $ git push heroku master Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080 Register the app with ONEm Production Portal You will need to edit your App details and update the user_action URL field, provide the fully qualified URL of your application's base API path. You can access your account here . Remember to add /api to your url so the ONEm platform can reach to your app. Verifying on production Head over to our production verification site onem.zone and verify that your app is responding as expected. If you haven't already signed up you will need to have a mobile ands register using a google or facebook account.","title":"Nodejs"},{"location":"getting_started/nodejs/#introduction","text":"This tutorial will have you deploying a Node.js app to ONEm in minutes. In this tutorial items marked in yellow are essential and should be noted for completing certain processes. The tutorial assumes that you have a free or paid ONEm account , and that you have the following prerequisites installed locally: Node.js npm which is installed with Node.js git ngrok Visual Studio Code","title":"Introduction"},{"location":"getting_started/nodejs/#set-up-on-localhost","text":"To start with, we will be running all commands locally on your own PC. Your app will initially be hosted there for local development, then later you will learn how to host your app with a hosting provider for use on production. Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: $ node --version v10.15.3 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: $ npm --version 6 .9.0 Now check that you have git installed: $ git --version git version 2 .15.1 We will use ngrok to provide a secure tunnel between your app running on localhost and the ONEm servers. Check it's installed: $ ./ngrok --version ngrok version 2 .3.29","title":"Set up on localhost"},{"location":"getting_started/nodejs/#prepare-the-app","text":"In this step, you will prepare a simple Hello World application. To clone a local version of the sample application, execute the following command in your local command shell or terminal: $ git clone https://github.com/chrishornmem/hello-world.git && cd hello-world You now have a functioning git repository that contains the Hello World application as well as a package.json file, which is used by npm (Node\u2019s dependency manager). Install the package dependencies with npm: $ npm install","title":"Prepare the app"},{"location":"getting_started/nodejs/#configure-the-app","text":"The Hello World example application listens on the HTTP port defined by the environment variable PORT or 8080 by default. You can change the port by creating a .env file in your app's root directory and specifying the desired port value:","title":"Configure the app"},{"location":"getting_started/nodejs/#port","text":"PORT=8080","title":"Port"},{"location":"getting_started/nodejs/#token-secret","text":"Webhooks triggered by the ONEm platform contain a JWT token in the authorzation header. The JWT token carries the unique identity of the ONEm user so that your app can differentiate requests from different users. In order to verify jwt tokens that are sent by the ONEm platform, the token secret should be configured. For the sandbox, this secret is 87654321 . Configure the secret in the .env file: TOKEN_SECRET=87654321","title":"Token secret"},{"location":"getting_started/nodejs/#run-the-app","text":"Start the app with: $ npm run start You should see output similar to the following in the console: Listening on port 8080 Now run ngrok so that your app is visible to the ONEm servers. $ ./ngrok http 8080 ngrok will launch a continuous display to the console. Make a note of the http or https forwarding address. In the example below the address is http://6e3f3fce.ngrok.io : Forwarding http://6e3f3fce.ngrok.io -> http://localhost:8080 Navigate to the forwarding link on your browser and you should see a Hello World greeting. The Hello World example app expects to receive HTTP requests as users perform certain actions. We call this the user_action webhook . The app expects to receive user action notifications on the base path: /api . The ONEm platform will need to be configured with the fully qualified URL of this endpoint, including the base path. In our example above, the user_action webhook URL would be http://6e3f3fce.ngrok.io/api Make a note of your user_action URL, you will need it in the next step.","title":"Run the app"},{"location":"getting_started/nodejs/#register-the-app-with-onem-sandbox-portal","text":"If you have not already done so, sign-up for a free ONEm developer account on the sandbox. Register your app on the ONEm Sandbox Portal. You will need to provide: A unique one-word name for your app, e.g hello A description of your app A link to your website The user_action URL you obtained from the previous step Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials. Make sure the details are saved correctly in the portal.","title":"Register the app with ONEm Sandbox Portal"},{"location":"getting_started/nodejs/#test-the-app","text":"Head over to our sandbox test tool , we call it ONEm Zone . Sign-up and then in the input field, enter # followed by your app's name, for example #HELLO if your app is called hello . If you have completed everything correctly, the ONEm system should respond with a menu, similar to the below: #HELLO WORLD A First option B Second option C Third option --Reply A-C If you see the above, congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better. If you don't see the above done worry, go back and check that each step has been followed properly and your program will soon be up and running.","title":"Test the app"},{"location":"getting_started/nodejs/#running-your-app-in-production","text":"","title":"Running your app in production"},{"location":"getting_started/nodejs/#choose-a-hosting-platform","text":"Your app will need to be hosted on the internet so that ONEm's platform can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure","title":"Choose a hosting platform"},{"location":"getting_started/nodejs/#install-and-deploy-your-app-on-production","text":"Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku you would use: $ heroku create $ git push heroku master Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080","title":"Install and deploy your app on production"},{"location":"getting_started/nodejs/#register-the-app-with-onem-production-portal","text":"You will need to edit your App details and update the user_action URL field, provide the fully qualified URL of your application's base API path. You can access your account here . Remember to add /api to your url so the ONEm platform can reach to your app.","title":"Register the app with ONEm Production Portal"},{"location":"getting_started/nodejs/#verifying-on-production","text":"Head over to our production verification site onem.zone and verify that your app is responding as expected. If you haven't already signed up you will need to have a mobile ands register using a google or facebook account.","title":"Verifying on production"},{"location":"getting_started/nodejs_linux/","text":"Pre requisites In order to be able to run a NodeJS application for ONEm on your machine please make sure you have installed the following: NodeJS (v8.0.0 or above) git ngrok optionally, an IDE that supports JavaScript language if you want to edit the source code Install nodejs Please follow one of the next articles to install the latest NodeJS: Debian: How to Install Latest Nodejs & NPM on Debian Centos: How To Install Latest Nodejs on CentOS Install git Run the following command in your terminal Debian: $ sudo apt-get install git Centos: $ sudo yum install git Install ngrok Please download and install ngrok as described on the official website . Install an IDE If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Webstorm - 30 days free trial Atom - free and open source Visual Studio Code - free and open source etc Run an existing application Download source code Install dependencies Start the server Expose your server publicly Run ngrok Obtain callback URL Access the applications Register the application Access simulator Tweak the application Redeploy","title":"Node.js how to"},{"location":"getting_started/nodejs_linux/#pre-requisites","text":"In order to be able to run a NodeJS application for ONEm on your machine please make sure you have installed the following: NodeJS (v8.0.0 or above) git ngrok optionally, an IDE that supports JavaScript language if you want to edit the source code","title":"Pre requisites"},{"location":"getting_started/nodejs_linux/#install-nodejs","text":"Please follow one of the next articles to install the latest NodeJS: Debian: How to Install Latest Nodejs & NPM on Debian Centos: How To Install Latest Nodejs on CentOS","title":"Install nodejs"},{"location":"getting_started/nodejs_linux/#install-git","text":"Run the following command in your terminal Debian: $ sudo apt-get install git Centos: $ sudo yum install git","title":"Install git"},{"location":"getting_started/nodejs_linux/#install-ngrok","text":"Please download and install ngrok as described on the official website .","title":"Install ngrok"},{"location":"getting_started/nodejs_linux/#install-an-ide","text":"If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Webstorm - 30 days free trial Atom - free and open source Visual Studio Code - free and open source etc","title":"Install an IDE"},{"location":"getting_started/nodejs_linux/#run-an-existing-application","text":"","title":"Run an existing application"},{"location":"getting_started/nodejs_linux/#download-source-code","text":"","title":"Download source code"},{"location":"getting_started/nodejs_linux/#install-dependencies","text":"","title":"Install dependencies"},{"location":"getting_started/nodejs_linux/#start-the-server","text":"","title":"Start the server"},{"location":"getting_started/nodejs_linux/#expose-your-server-publicly","text":"","title":"Expose your server publicly"},{"location":"getting_started/nodejs_linux/#run-ngrok","text":"","title":"Run ngrok"},{"location":"getting_started/nodejs_linux/#obtain-callback-url","text":"","title":"Obtain callback URL"},{"location":"getting_started/nodejs_linux/#access-the-applications","text":"","title":"Access the applications"},{"location":"getting_started/nodejs_linux/#register-the-application","text":"","title":"Register the application"},{"location":"getting_started/nodejs_linux/#access-simulator","text":"","title":"Access simulator"},{"location":"getting_started/nodejs_linux/#tweak-the-application","text":"","title":"Tweak the application"},{"location":"getting_started/nodejs_linux/#redeploy","text":"","title":"Redeploy"},{"location":"getting_started/python/","text":"Ok, let's create a Todo application in Python. We will be using Ubuntu 18.04, Python 3.6.8 and the following: virtualenvwrapper to create a virtual environment Django to quickly build our web server ngrok to expose our web server publicly so ONEm platform can communicate with it So once virtualenvwrapper is installed we will create our virtual environment: mkvirtualenv todo The above will create the virtual environment and activate it at the same time. Now let's install Django and start our project in our home folder: pip install Django == 2 .2.3 cd ~ django-admin startproject todo Next step is for us to create a Django app: cd ~/todo/todo django-admin startapp todo Now open settings.py and add todo.todo to INSTALLED_APPS Next step is to create a model for our Todos. We will place it in ~todo/todo/todo/models.py and will call it Task from django.db import models from django.contrib.auth.models import User from django.urls import reverse class Task ( models . Model ): user = models . ForeignKey ( User , models . CASCADE ) descr = models . CharField ( max_length = 12 ) due_date = models . DateField () done = models . BooleanField ( default = False ) HIGH = 'high' LOW = 'low' PRIO = ( ( HIGH , HIGH ), ( LOW , LOW ), ) prio = models . CharField ( max_length = 4 , choices = PRIO , default = LOW ) def get_absolute_url ( self ): return reverse ( 'task_detail' , args = ( self . id ,)) Now we need to create a migration for the above model and apply it: cd ~/todo python manage.py makemigrations todo.todo python manage.py migrate We are almost there. We need to add some urls and views to handle the urls. Open ~/todo/todo/urls.py and add path('', include('todo.urls')) to your existing urlpatterns Your ~/todo/todo/todo/urls.py should look like this: from django.urls import path from . import views urlpatterns = [ path ( '' , views . HomeView . as_view (), name = 'home' ), path ( 'task/create/' , views . TaskCreateView . as_view (), name = 'task_create' ), path ( 'task/list/done/' , views . TaskListDoneView . as_view (), name = 'task_list_done' ), path ( 'task/<int:id>/' , views . TaskDetailView . as_view (), name = 'task_detail' ), ] Last step is to create the views.py file. This will be a rather larger file and the content is omitted here, but it can be found at this link","title":"Python"},{"location":"getting_started/python_linux/","text":"Pre requisites In order to be able to run a Python application for ONEm on your machine please make sure you have installed the following: Python (v3.7 or above) git ngrok optionally, an IDE that supports Python language if you want to edit the source code Install git Run the following command in your terminal Debian: $ sudo apt-get install git Centos: $ sudo yum install git Mac OS: $ brew install git Install python >= 3.7 Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv. Install Python dependencies: Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos: $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: $ xcode-select --install You'll then receive: $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / Install pyenv : Debian $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac os: $ brew install pyenv Add pyenv initializer to shell startup script $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile $ source ~/.bash_profile Install python 3.7 or above using pyenv Example: $ pyenv install 3 .7.0 Install pipenv for an easier virtual environment management Debian $ sudo pip install pipenv Mac OS $ brew install pipenv or use: $ pip install pipenv --user python Install ngrok Please download and install ngrok as described on the official website . Install an IDE If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc Run an existing application Download source code Install dependencies Start the server Expose your server publicly Run ngrok Obtain callback URL Access the applications Register the application Access simulator Tweak the application Redeploy","title":"Python how to"},{"location":"getting_started/python_linux/#pre-requisites","text":"In order to be able to run a Python application for ONEm on your machine please make sure you have installed the following: Python (v3.7 or above) git ngrok optionally, an IDE that supports Python language if you want to edit the source code","title":"Pre requisites"},{"location":"getting_started/python_linux/#install-git","text":"Run the following command in your terminal Debian: $ sudo apt-get install git Centos: $ sudo yum install git Mac OS: $ brew install git","title":"Install git"},{"location":"getting_started/python_linux/#install-python-37","text":"Developing a ONEm application requires at least python 3.7. Not to mess up with your other projects that might need a different python version, we suggest using pyenv.","title":"Install python &gt;= 3.7"},{"location":"getting_started/python_linux/#install-python-dependencies","text":"Before you install pyenv itself, you need to install some dependencies that are required because pyenv installs Python by building from source. Here's what you need to do. Debian: $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get dist-upgrade $ sudo apt-get install build-essential checkinstall python-dev \\ python-setuptools python-pip python-smbus $ sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev $ sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev $ sudo apt-get install libssl-dev openssl Centos: $ sudo yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite \\ sqlite-devel openssl-devel xz xz-devel libffi-devel Mac OS: $ brew install openssl readline sqlite3 xz zlib When running Mojave you will also need to install the additional SDK headers: $ xcode-select --install You'll then receive: $ xcode-select: note: install requested for command line developer tools and be prompted in a window to update Xcode Command Line tools. After the update is completed, open a new terminal window and type: $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /","title":"Install Python dependencies:"},{"location":"getting_started/python_linux/#install-pyenv","text":"Debian $ curl https://pyenv.run | bash Restart your shell so the path changes take effect. See pyenv-installer for more info. Mac os: $ brew install pyenv Add pyenv initializer to shell startup script $ echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile Reload your profile $ source ~/.bash_profile","title":"Install pyenv:"},{"location":"getting_started/python_linux/#install-python-37-or-above-using-pyenv","text":"Example: $ pyenv install 3 .7.0","title":"Install python 3.7 or above using pyenv"},{"location":"getting_started/python_linux/#install-pipenv-for-an-easier-virtual-environment-management","text":"Debian $ sudo pip install pipenv Mac OS $ brew install pipenv or use: $ pip install pipenv --user python","title":"Install pipenv for an easier virtual environment management"},{"location":"getting_started/python_linux/#install-ngrok","text":"Please download and install ngrok as described on the official website .","title":"Install ngrok"},{"location":"getting_started/python_linux/#install-an-ide","text":"If you don't already have a preferred IDE, there is plenty you can choose from. Here is a list of IDEs in no particular order: Pycharm - Community or Professional Atom - free and open source Visual Studio Code - free and open source etc","title":"Install an IDE"},{"location":"getting_started/python_linux/#run-an-existing-application","text":"","title":"Run an existing application"},{"location":"getting_started/python_linux/#download-source-code","text":"","title":"Download source code"},{"location":"getting_started/python_linux/#install-dependencies","text":"","title":"Install dependencies"},{"location":"getting_started/python_linux/#start-the-server","text":"","title":"Start the server"},{"location":"getting_started/python_linux/#expose-your-server-publicly","text":"","title":"Expose your server publicly"},{"location":"getting_started/python_linux/#run-ngrok","text":"","title":"Run ngrok"},{"location":"getting_started/python_linux/#obtain-callback-url","text":"","title":"Obtain callback URL"},{"location":"getting_started/python_linux/#access-the-applications","text":"","title":"Access the applications"},{"location":"getting_started/python_linux/#register-the-application","text":"","title":"Register the application"},{"location":"getting_started/python_linux/#access-simulator","text":"","title":"Access simulator"},{"location":"getting_started/python_linux/#tweak-the-application","text":"","title":"Tweak the application"},{"location":"getting_started/python_linux/#redeploy","text":"","title":"Redeploy"},{"location":"getting_started/run_heroku/","text":"","title":"Run an application remotely"},{"location":"intro/core_concepts/","text":"Core concepts Let's start with the basics. Follow along the steps to ramp up or watch as we create a working Todo application. Developer Account Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. As a ONEm developer, after you create and register your application on the developer portal you should follow the necessary steps to configure it to return standardised JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users. Your app Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app. SDK Framework API","title":"Core concepts"},{"location":"intro/core_concepts/#core-concepts","text":"Let's start with the basics. Follow along the steps to ramp up or watch as we create a working Todo application.","title":"Core concepts"},{"location":"intro/core_concepts/#developer-account","text":"Head over to the developer portal and create your account. Once you have an account, go to Applications section and create your app. As a ONEm developer, after you create and register your application on the developer portal you should follow the necessary steps to configure it to return standardised JSON responses upon ONEm requests. These requests are launched by the ONEm platform on behalf of your users.","title":"Developer Account"},{"location":"intro/core_concepts/#your-app","text":"Your app is identified by the name you give it and it can be accessed through the ONEm platform by prefixing it with a hashtag. When your app is being accessed by the user, ONEm platform is performing an HTTP GET request to the callback_url defined in the developer portal. This must return a JSON http response and will be used by ONEm platform to compute an sms and send it to the user as a response from your app.","title":"Your app"},{"location":"intro/core_concepts/#sdk","text":"","title":"SDK"},{"location":"intro/core_concepts/#framework","text":"","title":"Framework"},{"location":"intro/core_concepts/#api","text":"","title":"API"},{"location":"intro/onem_apps/","text":"What are ONEm apps? The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based Platform that provides SMS connectivity to mobile networks around the globe. Once you register as a developer, based on ONEm principles, you can create your own application and reach the ONEm ecosystem. The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web. How services work ONEm's goal is to have a service that is easy and intuitive to use. It is important for users to have a seamless experience when accessing the ONEm platform. Different functionalities and content types are grouped in applications, also called services, accessible through the Platform, similar to websites via internet. Each service is defined by a unique name, similar to a web-address, and follows a general structure, allowing users to easily interact with the platform via text messages. Similar to a website, the application will have a landing page and will provide a navigation structure using menus, selectable outlines, paging mechanism and the possibility to capture user input. To access a certain application/service, users will use # before application name, eg #my_application. The Platform will automatically recognise the user input and will display the application's landing screen. Usability principles are implemented, so in case of an unrecognised user input, the Platform will respond with the best feedback or guideline. To allow us to create an ecosystem, the users will be automatically registered when sending their first message to the platform. Their profile will be created and based on setup they will be able to access the available applications. Obviously, an opt out mechanism is in place. Let's dig further into the anatomy of a ONEm application Before dissecting the structure of applications, keep in mind that SMS does not facilitate the use of images or media files as web does. Though ONEm applications work also over internet, we offer users the same experience and interface. A standard SMS is 140 8bit characters. For full compatibility the applications should display the information to the users in one SMS. As explained in the previous section, the web-address is transposed to #application_name. A website/web application provides pages, navigation system, hints and, most important, content. Let's see how those are translated to a ONEm application. Every response message from ONEm Platform will have the following structure: HEADER - each messages will have a header that indicates the name of the application and the section of the displayed content. This will allow users to get localised into the application serving as page title and/or breadcrumbs. BODY - the body is the most important section of the message and handles the content being displayed to the user. It may consist of text or selectable options. The end of the body will have the number of chunks remaining in the content selection. Will explain the chunks later on. The body can display a MENU , a simple text or a FORM . FOOTER - the footer is where information like 'hints' is attached to the bottom of the message. In here, users will find guidelines regarding next available actions. All this might be more intuitive with an example from #onem application: #ONEM MENU A My account B Invite friends to chat C Create SMS group chats (xGroup) D Services E How to use --Reply A-E The above message is the landing page of #onem application, also considered the main menu. The first message presents user with the main options that can be accessed and offers a navigation possibility. As you probably figured out, the user can access account information, chat with friends, see available services or follow a tutorial on how to use ONEm features. Each available option has a letter attached to it to facilitate user response. As hinted in the footer, the user can send one of the letters to access the corresponding menu item. This is the MENU concept. Each option is displayed on a new line and has associated an action to it that will result in another message displayed to the user. Let's follow on the example and say that the user will choose to reply to ONEm Platform with a message containing D letter. This translates in choosing to access menu item D, available services and the Platform's response will be a list of available service categories. Notice the header changed and so did the hints in the footer. #ONEM SERVICES A Search B Information C Tools D Business E Entertainment F Social --Reply option/\"#\" Let's get back to message body. The amount of information displayed to the user, along with header and footer, can exceed the sms size. In this case, the ONEm platform will split body information in several messages called chunks, adding a paging system that allows users to access more than can fit one single SMS. At the end of each sms body, right before the footer, there will be automatically added information about current chunk and total number of chunks in which the message was split. This mechanism applies both to simple text, like a news article, and options lists that are too long to be displayed in one message. A great example for this mechanism can be extracted from our #wiki application. The article's introduction about SMS is paginated in 8 chunks and the first 2 are presented below. The hint from footer - \"more\" - is used to navigate to the next chunk. #WIKI (ENGLISH) SMS SEARCH SMS (short message service) is a text messaging service component of most telephone, Internet, and mobile device systems. It uses standardized ..1/8 --MORE/BACK >> more communication protocols to enable mobile devices to exchange short text messages. An intermediary service can facilitate a text-to-voice conversion to be sent to landlines. SMS was ..2/8 --MORE/BACK Another important topic to talk about regards capturing user input. Any webpage or web application will present users with a form to complete and submit. This is rather difficult in the SMS version of ONEm applications, but getting help from wizards, forms are completed step by step, each form field translates in a new message asking user for a free response or choose from a list of options. When all information is gathered, the user can review and submit the form through a supplementary confirmation step. No worries, we dedicated an entire section to forms and how you can create one [here][ ] To see all these concepts at work, with real ONEm examples, and much more you can watch this Platform Demo","title":"What are ONEm apps?"},{"location":"intro/onem_apps/#what-are-onem-apps","text":"The ONEm Framework provides a set of APIs and tools that allow you to rapidly build local or global SMS and web based applications that solve a myriad of business problems. ONEm Framework is a layer on top of ONEm's cloud-based Platform that provides SMS connectivity to mobile networks around the globe. Once you register as a developer, based on ONEm principles, you can create your own application and reach the ONEm ecosystem. The great thing about ONEm Framework is that you can use your favourite programming language and with one codebase, quickly deploy an easy-to-use, dynamic application that is instantly available on SMS and the Web.","title":"What are ONEm apps?"},{"location":"intro/onem_apps/#how-services-work","text":"ONEm's goal is to have a service that is easy and intuitive to use. It is important for users to have a seamless experience when accessing the ONEm platform. Different functionalities and content types are grouped in applications, also called services, accessible through the Platform, similar to websites via internet. Each service is defined by a unique name, similar to a web-address, and follows a general structure, allowing users to easily interact with the platform via text messages. Similar to a website, the application will have a landing page and will provide a navigation structure using menus, selectable outlines, paging mechanism and the possibility to capture user input. To access a certain application/service, users will use # before application name, eg #my_application. The Platform will automatically recognise the user input and will display the application's landing screen. Usability principles are implemented, so in case of an unrecognised user input, the Platform will respond with the best feedback or guideline. To allow us to create an ecosystem, the users will be automatically registered when sending their first message to the platform. Their profile will be created and based on setup they will be able to access the available applications. Obviously, an opt out mechanism is in place.","title":"How services work"},{"location":"intro/onem_apps/#lets-dig-further-into-the-anatomy-of-a-onem-application","text":"Before dissecting the structure of applications, keep in mind that SMS does not facilitate the use of images or media files as web does. Though ONEm applications work also over internet, we offer users the same experience and interface. A standard SMS is 140 8bit characters. For full compatibility the applications should display the information to the users in one SMS. As explained in the previous section, the web-address is transposed to #application_name. A website/web application provides pages, navigation system, hints and, most important, content. Let's see how those are translated to a ONEm application. Every response message from ONEm Platform will have the following structure: HEADER - each messages will have a header that indicates the name of the application and the section of the displayed content. This will allow users to get localised into the application serving as page title and/or breadcrumbs. BODY - the body is the most important section of the message and handles the content being displayed to the user. It may consist of text or selectable options. The end of the body will have the number of chunks remaining in the content selection. Will explain the chunks later on. The body can display a MENU , a simple text or a FORM . FOOTER - the footer is where information like 'hints' is attached to the bottom of the message. In here, users will find guidelines regarding next available actions. All this might be more intuitive with an example from #onem application: #ONEM MENU A My account B Invite friends to chat C Create SMS group chats (xGroup) D Services E How to use --Reply A-E The above message is the landing page of #onem application, also considered the main menu. The first message presents user with the main options that can be accessed and offers a navigation possibility. As you probably figured out, the user can access account information, chat with friends, see available services or follow a tutorial on how to use ONEm features. Each available option has a letter attached to it to facilitate user response. As hinted in the footer, the user can send one of the letters to access the corresponding menu item. This is the MENU concept. Each option is displayed on a new line and has associated an action to it that will result in another message displayed to the user. Let's follow on the example and say that the user will choose to reply to ONEm Platform with a message containing D letter. This translates in choosing to access menu item D, available services and the Platform's response will be a list of available service categories. Notice the header changed and so did the hints in the footer. #ONEM SERVICES A Search B Information C Tools D Business E Entertainment F Social --Reply option/\"#\" Let's get back to message body. The amount of information displayed to the user, along with header and footer, can exceed the sms size. In this case, the ONEm platform will split body information in several messages called chunks, adding a paging system that allows users to access more than can fit one single SMS. At the end of each sms body, right before the footer, there will be automatically added information about current chunk and total number of chunks in which the message was split. This mechanism applies both to simple text, like a news article, and options lists that are too long to be displayed in one message. A great example for this mechanism can be extracted from our #wiki application. The article's introduction about SMS is paginated in 8 chunks and the first 2 are presented below. The hint from footer - \"more\" - is used to navigate to the next chunk. #WIKI (ENGLISH) SMS SEARCH SMS (short message service) is a text messaging service component of most telephone, Internet, and mobile device systems. It uses standardized ..1/8 --MORE/BACK >> more communication protocols to enable mobile devices to exchange short text messages. An intermediary service can facilitate a text-to-voice conversion to be sent to landlines. SMS was ..2/8 --MORE/BACK Another important topic to talk about regards capturing user input. Any webpage or web application will present users with a form to complete and submit. This is rather difficult in the SMS version of ONEm applications, but getting help from wizards, forms are completed step by step, each form field translates in a new message asking user for a free response or choose from a list of options. When all information is gathered, the user can review and submit the form through a supplementary confirmation step. No worries, we dedicated an entire section to forms and how you can create one [here][ ] To see all these concepts at work, with real ONEm examples, and much more you can watch this Platform Demo","title":"Let's dig further into the anatomy of a ONEm application"},{"location":"intro/onem_platform/","text":"What is ONEm Platform ONEm has created a global multi-service Platform that provides innovative services using core connectivity as SMS and Voice. We provide first of a kind interactive services and user generated content on the mobile. It\u2019s not about replacing or even competing with the internet, it\u2019s all about taking what already exists and putting it to a better use. ONEm allows people to communicate in a completely new way through simple interaction with an intelligent platform that works on their behalf behind the scenes to connect, find, process and present communications, content and services across all types of networks and to any type of mobile device. Whether accessed through SMS or a web browser, the ONEm Platform manages user's identities and profile, delivers intelligent content and allows users to collaborate and interact in an unconventional way. Mission and vision We are building a Mobile Ecosystem first of a kind with interactive services, that will transform the way people communicate and get access to information on any mobile, including the 3 billion people who have no access to internet, who have no way to share nor create their own content. We aim to provide access to information and to make our services available to everyone.","title":"What is ONEm Platform?"},{"location":"intro/onem_platform/#what-is-onem-platform","text":"ONEm has created a global multi-service Platform that provides innovative services using core connectivity as SMS and Voice. We provide first of a kind interactive services and user generated content on the mobile. It\u2019s not about replacing or even competing with the internet, it\u2019s all about taking what already exists and putting it to a better use. ONEm allows people to communicate in a completely new way through simple interaction with an intelligent platform that works on their behalf behind the scenes to connect, find, process and present communications, content and services across all types of networks and to any type of mobile device. Whether accessed through SMS or a web browser, the ONEm Platform manages user's identities and profile, delivers intelligent content and allows users to collaborate and interact in an unconventional way.","title":"What is ONEm Platform"},{"location":"intro/onem_platform/#mission-and-vision","text":"We are building a Mobile Ecosystem first of a kind with interactive services, that will transform the way people communicate and get access to information on any mobile, including the 3 billion people who have no access to internet, who have no way to share nor create their own content. We aim to provide access to information and to make our services available to everyone.","title":"Mission and vision"},{"location":"limits/app_naming/","text":"Application naming When registering your applications, make sure you keep in mind the following: - the name must be unique; this is enforced by the create application form - the name should have one word, or multiple without spaces - choose a significant and easy to remember name; keep in mind that users will use # followed by the name you choose to access your application For free plans, the name will be automatically assigned to your application.","title":"App naming"},{"location":"limits/app_naming/#application-naming","text":"When registering your applications, make sure you keep in mind the following: - the name must be unique; this is enforced by the create application form - the name should have one word, or multiple without spaces - choose a significant and easy to remember name; keep in mind that users will use # followed by the name you choose to access your application For free plans, the name will be automatically assigned to your application.","title":"Application naming"},{"location":"limits/limitations/","text":"Limitations and resource usage Once you followed the building steps and tutorials, feel free to create your own application. There are several limitations in place you should know about.","title":"Limitations and resource usage"},{"location":"limits/limitations/#limitations-and-resource-usage","text":"Once you followed the building steps and tutorials, feel free to create your own application. There are several limitations in place you should know about.","title":"Limitations and resource usage"},{"location":"limits/pub_prv_apps/","text":"Public and private applications Depending on your developer account, your application/s can be public or private. Public application: TBD Private application: TBD","title":"Public and private apps"},{"location":"limits/pub_prv_apps/#public-and-private-applications","text":"Depending on your developer account, your application/s can be public or private. Public application: TBD Private application: TBD","title":"Public and private applications"},{"location":"limits/sys_verbs/","text":"System verbs There is a list of system verbs that are implemented to the ONEm Platform level and cannot be used or override. These verbs will automatically work in your application and you need to keep this in mind when defining your own verbs. ONEm system verbs: - menu - back - options - more - go - size","title":"System verbs"},{"location":"limits/sys_verbs/#system-verbs","text":"There is a list of system verbs that are implemented to the ONEm Platform level and cannot be used or override. These verbs will automatically work in your application and you need to keep this in mind when defining your own verbs. ONEm system verbs: - menu - back - options - more - go - size","title":"System verbs"},{"location":"limits/topup/","text":"Billing and top up","title":"Topup for messages"},{"location":"limits/topup/#billing-and-top-up","text":"","title":"Billing and top up"},{"location":"portal/create_account/","text":"","title":"Create developer account"},{"location":"portal/register_app/","text":"","title":"Register an application"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn about building, deploying, and managing your apps with ONEm Choose your favourite language Getting started Node.js Getting started python New to ONEm? Sign-up for a free developer account","title":"Home"},{"location":"#learn-about-building-deploying-and-managing-your-apps-with-onem","text":"","title":"Learn about building, deploying, and managing your apps with ONEm"},{"location":"#choose-your-favourite-language","text":"Getting started Node.js Getting started python New to ONEm? Sign-up for a free developer account","title":"Choose your favourite language"},{"location":"add-ons/","text":"v1.6.1 07/12/2018 Fixed parsing tags other than links #24 (Fix loading of a href element) v1.6.0 02/22/2018 Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files v1.5.3 02/18/2017 Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR) v1.5.2 02/17/2017 Added Russian translations #16 (Thanks to @ktaranov ) v1.5.1 02/10/2017 Fixed error in getting the remote image size v1.5.0 02/09/2017 Use tabs in admin panel settings for better user experience Use toggle buttons for page settings v1.4.4 01/11/2017 Fixed CURLOPT_AUTOREFERER constant v1.4.3 10/31/2016 Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing) v1.4.2 12/06/2015 Added French translations #8 (Thanks to @MATsxm ) v1.4.1 11/18/2015 Page specific options now respect the default configurations set in the admin panel v1.4.0 11/17/2015 Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function v1.3.1 09/09/2015 Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints) v1.3.0 08/08/2015 Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters) v1.2.2 05/10/2015 PSR fixes v1.2.1 03/24/2015 Fixed active mode condition v1.2.0 02/21/2015 Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code v1.1.3 02/10/2015 Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5) v1.1.2 02/10/2015 By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin) v1.1.1 02/06/2015 Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method v1.1.0 02/05/2015","title":"v1.6.1"},{"location":"add-ons/#v161","text":"","title":"v1.6.1"},{"location":"add-ons/#07122018","text":"Fixed parsing tags other than links #24 (Fix loading of a href element)","title":"07/12/2018"},{"location":"add-ons/#v160","text":"","title":"v1.6.0"},{"location":"add-ons/#02222018","text":"Check for page redirects #22 (Check for redirecting pages if links.redirects is enabled, thanks to @karfau ) Set rel=\"noopener noreferrer\" to all external links #21 Updated French translation strings #19 Improved README.md and YAML files","title":"02/22/2018"},{"location":"add-ons/#v153","text":"","title":"v1.5.3"},{"location":"add-ons/#02182017","text":"Fixed Russian translation strings #17 (Thanks to @geschke for the fast PR)","title":"02/18/2017"},{"location":"add-ons/#v152","text":"","title":"v1.5.2"},{"location":"add-ons/#02172017","text":"Added Russian translations #16 (Thanks to @ktaranov )","title":"02/17/2017"},{"location":"add-ons/#v151","text":"","title":"v1.5.1"},{"location":"add-ons/#02102017","text":"Fixed error in getting the remote image size","title":"02/10/2017"},{"location":"add-ons/#v150","text":"","title":"v1.5.0"},{"location":"add-ons/#02092017","text":"Use tabs in admin panel settings for better user experience Use toggle buttons for page settings","title":"02/09/2017"},{"location":"add-ons/#v144","text":"","title":"v1.4.4"},{"location":"add-ons/#01112017","text":"Fixed CURLOPT_AUTOREFERER constant","title":"01/11/2017"},{"location":"add-ons/#v143","text":"","title":"v1.4.3"},{"location":"add-ons/#10312016","text":"Fixed #11 (Not working with cache enabling) (see PR #15 ) Fixed #13 (Preferences Not Showing)","title":"10/31/2016"},{"location":"add-ons/#v142","text":"","title":"v1.4.2"},{"location":"add-ons/#12062015","text":"Added French translations #8 (Thanks to @MATsxm )","title":"12/06/2015"},{"location":"add-ons/#v141","text":"","title":"v1.4.1"},{"location":"add-ons/#11182015","text":"Page specific options now respect the default configurations set in the admin panel","title":"11/18/2015"},{"location":"add-ons/#v140","text":"","title":"v1.4.0"},{"location":"add-ons/#11172015","text":"Added External Links options to page options tab Improved isExternalUrl function to allow custom schemes and whether to evaluate links beginning with .www or not Added more blueprint options Improved code Updated docs Fixed #7 (Possible issue with malformed URLs) Fixes external_links filter function","title":"11/17/2015"},{"location":"add-ons/#v131","text":"","title":"v1.3.1"},{"location":"add-ons/#09092015","text":"Added blueprints for Grav Admin plugin Fixed #5 (Works on first page displayed) Fixed #6 (Validation failed: title is not defined in blueprints)","title":"09/09/2015"},{"location":"add-ons/#v130","text":"","title":"v1.3.0"},{"location":"add-ons/#08082015","text":"Added admin configurations (requires Grav 0.9.34+) Added multi-language support (requires Grav 0.9.33+) Added default title message for external links Switched to onBuildPagesInitialized event (requires Grav 0.9.29+) Updated README.md Fixed #4 (Problem with non UTF-8 characters)","title":"08/08/2015"},{"location":"add-ons/#v122","text":"","title":"v1.2.2"},{"location":"add-ons/#05102015","text":"PSR fixes","title":"05/10/2015"},{"location":"add-ons/#v121","text":"","title":"v1.2.1"},{"location":"add-ons/#03242015","text":"Fixed active mode condition","title":"03/24/2015"},{"location":"add-ons/#v120","text":"","title":"v1.2.0"},{"location":"add-ons/#02212015","text":"Added option mode to parse links passively (where no CSS classes are set) and actively Allow multiple classes to exclude in option exclude.classes Improved process engine to ensure not to alter HTML tags or HTML entities in content Refactored code","title":"02/21/2015"},{"location":"add-ons/#v113","text":"","title":"v1.1.3"},{"location":"add-ons/#02102015","text":"Fixed self-closing tags in HTML5 and ensured to return contents compliant to HTML(5)","title":"02/10/2015"},{"location":"add-ons/#v112","text":"","title":"v1.1.2"},{"location":"add-ons/#02102015_1","text":"By default External Links now uses the class external-links for CSS styling; using external is still possible e.g. for manually markup external links Improved usage example in README.md Fixed #1 (Issue with LightSlider plugin)","title":"02/10/2015"},{"location":"add-ons/#v111","text":"","title":"v1.1.1"},{"location":"add-ons/#02062015","text":"Added usage example in README.md Add icons next to external links via CSS when using class external only Added support for HHVM (requires Grav 0.9.17+) Added modular pages support Fixed regular expression in isExternalUrl($url) method","title":"02/06/2015"},{"location":"add-ons/#v110","text":"","title":"v1.1.0"},{"location":"add-ons/#02052015","text":"","title":"02/05/2015"},{"location":"blockchain/","text":"Lorem markdownum vides aram est sui istis excipis Danai elusaque manu fores. Illa hunc primo pinum pertulit conplevit portusque pace tacuit sincera. Iam tamen licentia exsulta patruelibus quam, deorum capit; vultu. Est Philomela qua sanguine fremit rigidos teneri cacumina anguis hospitio incidere sceptroque telum spectatorem at aequor. if (cssDawP >= station) { dllCdmaCpc += 919754; } else { superscalar += -3 + phishing; } pup_ram_bloatware(2 * network(linkedin)); var vfatWhite = serpXmp + paperPitchPermalink(enterprise_and) - 5; systemBandwidthAtm = 9 + station; rw_menu_enterprise *= on_midi / interpreter.adPpp( correctionIntegratedBalancing, bar, real) - user_remote_zebibyte( desktop(lun_flops_wamp, technology_peripheral_dv, spriteHit)); Prochytenque ergo ait aequoreo causa ardere, ex vinaque est, accingere, abest nunc sanguine. Est forma admissum adspexit pharetraque regat prece fremit clamat memorantur evanuit foret ferinas, senserat infringat illa incumbere excipit ulnas. Est undis soror animi diem continuo videres fratres ? Meo iam mihi miserum fateor, in votum iuvenis, aures? Qui labor nulla telluris valerem erat hoc, sedula. if (bus_overclocking_server > 891985) { compression = textWep - gatePlatform; } else { fileTweak += file + so_mouse_sram; pda_radcab_eup = tcp_opengl_refresh(network_phishing - realityDel, 5, 5); bounce_monitor_dns = 4; } fddi_virtualization_file *= drag_infringement(minicomputerServlet + -1 + gif_white(utf, blog, cloud), dvdMacintosh - radcab_horizontal + cpu_recycle_quicktime(ascii)); ad += tableCapsTime - 5 + keyboard_card - -2 + cc; if (raw_bloatware_compression < script_expression) { fiBps(printer_php); ipx = biometricsFullDvi(bootComponentAnsi, 929326, 38); } Dent et ignavus constant tamque Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Advanced Topic 2"},{"location":"blockchain/#dent-et-ignavus-constant-tamque","text":"Harenosi praenovimus illa homines, sumit levem et Minyeias genu finita ne quae capi vidisse concipit. Fera carmine sinistro in licet? Quoque nam an pereat pro; seu male mens favorem, illa! Longo tuas: una medioque caespite nomen. Et amor artes Est tempore nupta generumque olivae stabat. Fuit vasto sit, rite bellatricemque misceri . Amore tauri qua laborum Iovique est terra sic et aut eminus pretiosior conveniant possit . Tyranni procos. Ipsa dracones carinam, ultima, pelagi Boreae quodque, teli dictu volucres: quaeratur ostendit debere validisne? Abdita cingere dixit amat pinguis vultus securim, venter in cognoscere prima da ? Cavis in pro suspicere multis, moto neve vibrataque nitidum cessit dignabitur pater similis exercet Procne, Anius, nec? Risit luserat meumque; ubi et chlamydem inque: id mihi. Populi et emicat et pectora concussit precibus qui et Hector flammis. Pergama tenebrisque certe arbiter superfusis genetrix fama; cornu conlato foedere adspexisse rivos quoque nec profugos nunc, meritisne carbasa .","title":"Dent et ignavus constant tamque"},{"location":"menus-and-forms/","text":"Menus and Forms Think of a micro app menu as a kind of multiple choice survey that uses A-Z as options. Let's start with a copy of the standard todo app. Use a basic code editor like Sublime Text or Visual Studio Code . If you don't have one click on the links. Download it here","title":"Menus and Forms"},{"location":"menus-and-forms/#menus-and-forms","text":"Think of a micro app menu as a kind of multiple choice survey that uses A-Z as options. Let's start with a copy of the standard todo app. Use a basic code editor like Sublime Text or Visual Studio Code . If you don't have one click on the links. Download it here","title":"Menus and Forms"},{"location":"text-audio-video/","text":"Text Audio and Video What is it? ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs. Features Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running. Requirements argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it). Usage ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline ) @generate_doc Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. generate_doc() Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. from argdoc import generate_doc def main(): parser = argparse.ArgumentParser(whatevs) parser.add_argument() ... generate_doc(parser) generate_doc (commandline) Finally, if preferred, you can run argDoc as a commandline tool. $user python argdoc.py --f pdf name_of_script_to_document.py Contact Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com Sample Output Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like. QuickValidate.py Validates all HTML/CSS in projects folder(s) How To Use Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. $ python calc.py --saveresults myfile.txt 38 / 2 Documentation Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Text audio video"},{"location":"text-audio-video/#text-audio-and-video","text":"","title":"Text Audio and Video"},{"location":"text-audio-video/#what-is-it","text":"ArgDoc is a documentation generator (of the (hopefully) aesthetic variety) for command line programs.","title":"What is it?"},{"location":"text-audio-video/#features","text":"Generate documentation in Markdown or HTML . Has detailed, ready-made instructions non-techie end-users. (enable with the noob flag). ArgDoc came to be when I started freelancing building one-off scripts for clients. The documentation needed to be gentle, friendly, non-ugly, and above all else non-techie freindly. So, with those needs in mind, I added an option for including detailed instructions on the basic \"how to\" of command line programs. It answers questions such as \"what is a flag,\" and \"How do I run this.\" Basic stuff to get someone unfamiliar with the command line up and running.","title":"Features"},{"location":"text-audio-video/#requirements","text":"argparse ArgDoc works by parsing the Python AST and pulling out references to argparse.ArgumentParser , so the older optparse module will not work (though support could be wrangled in if anyone needs it).","title":"Requirements"},{"location":"text-audio-video/#usage","text":"ArgDoc comes in three flavors; all of them named generate_doc @generate_doc ( decorator ) generate_doc() ( function ) generate_doc ( commandline )","title":"Usage"},{"location":"text-audio-video/#generate_doc","text":"Suggested method. Simply decorate your main function with @generate_doc and everytime you run your program up-to-date documentation will be generated. To run with default settings: @generate_doc def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code.. or with settings of your choice. @generate_doc(format='pdf', noob=True) def main(): parser = argparse.ArgumentParser(bla bla bla) # rest of code..","title":"@generate_doc"},{"location":"text-audio-video/#generate_doc_1","text":"Alternatively, you can pass your ArgumentParser object to the generate_doc function directly. from argdoc import generate_doc def main(): parser = argparse.ArgumentParser(whatevs) parser.add_argument() ... generate_doc(parser)","title":"generate_doc()"},{"location":"text-audio-video/#generate_doc-commandline","text":"Finally, if preferred, you can run argDoc as a commandline tool. $user python argdoc.py --f pdf name_of_script_to_document.py","title":"generate_doc (commandline)"},{"location":"text-audio-video/#contact","text":"Feature request? Bug? Hate it? Drop me a line at audionautic@gmail.com","title":"Contact"},{"location":"text-audio-video/#sample-output","text":"Below is a sample output for a HTML/CSS validator tool. It has the noob instructions enabled so you can get a feel for what the whole document looks like.","title":"Sample Output"},{"location":"text-audio-video/#quickvalidatepy","text":"Validates all HTML/CSS in projects folder(s)","title":"QuickValidate.py"},{"location":"text-audio-video/#how-to-use","text":"Command line programs have three main parts: Program Name Flags (optional) Arguments Program Name Simply the name of the program you want to run. $ python test_input.py Flags Flags are completely optional. They can be used to modify the way the program is run. For instance, to change where an output file is saved. They are preceded by two dashes and the name of the flag. --outfile myfilename.txt Flags can also be set via a shortened form which consists of a single dash, and (commonly) the first letter of the flag name. -o myfilename.txt Arguments If required by the program, arguments are used to give information that the program needs to do its work. For instance, in a calculator application, Arguments would be the numbers and operators that you give to the program to calculate $ calc.exe 5 + 2 Example Using all of the above info, here is an example of running a command line program with both flags and arguments. $ python calc.py --saveresults myfile.txt 38 / 2","title":"How To Use"},{"location":"text-audio-video/#documentation","text":"Option String Required Choices Default Option Summary ['-h', '--help'] False None ==SUPPRESS== show this help message and exit ['-v', '--ver'] False None None Set Doctype version to validate against ['-a', '--auto'] True None None Attempt to automatically detect Doctype ['-o', '--out'] False None None Save output to text file ['-c', '--css'] False None True Set check CSS to False ['-m', '--html'] False None True Set check HTML to False ['-r', '--rec'] True None None Recursively walk through all folders in the project directory ['-g', '--verbose'] True None False Toggle verbose output on ['-l', '--highlight'] False None None Highlight reported errors in HTML files [] True None None Filename(s) to validate","title":"Documentation"},{"location":"SDK/NodeJS/","text":"onem-nodejs-api Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object onem-nodejs-api~Service Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object new Service(serviceName) Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service service.addForm(template, data) \u21d2 object Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection service.addMenu(template, data) \u21d2 object Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection onem-nodejs-api~Form(index, template, data) Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~Menu(index, template, data) Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~Form : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form form.header([header]) \u21d2 boolean | string Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header form.footer([footer]) \u21d2 boolean | string Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer form.render() \u21d2 Form Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object onem-nodejs-api~FormBody : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission onem-nodejs-api~FormItem : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation onem-nodejs-api~Menu : object Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu menu.header([header]) \u21d2 boolean | string Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header menu.footer([footer]) \u21d2 boolean | string Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer menu.render() \u21d2 Menu Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object onem-nodejs-api~MenuItem : object Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"NodeJS"},{"location":"SDK/NodeJS/#onem-nodejs-api","text":"Node.js SDK for ONEm API onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form ~FormBody : object ~FormItem : object ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu ~MenuItem : object","title":"onem-nodejs-api"},{"location":"SDK/NodeJS/#onem-nodejs-apiservice","text":"Kind : inner class of onem-nodejs-api ~Service new Service(serviceName) .addForm(template, data) \u21d2 object .addMenu(template, data) \u21d2 object","title":"onem-nodejs-api~Service"},{"location":"SDK/NodeJS/#new-serviceservicename","text":"Instantiates a new Service with given name and optional verbs list Param Type Description serviceName string name of the service","title":"new Service(serviceName)"},{"location":"SDK/NodeJS/#serviceaddformtemplate-data-object","text":"Adds a new form to the service with given pug template and data object Kind : instance method of Service Returns : object - form object that was added Param Type Description template string reference to the pug template file data object form variables for injection","title":"service.addForm(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#serviceaddmenutemplate-data-object","text":"Adds a new menu to the service with given pug template and data object Kind : instance method of Service Returns : object - menu object that was added Param Type Description template string reference to the pug template file data object menu variables for injection","title":"service.addMenu(template, data) \u21d2 object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformindex-template-data","text":"Instantiates a new Form with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of forms that this form instance references template string file reference of the pug template data object form variables for injection ~Form(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form(index, template, data)"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuindex-template-data","text":"Instantiates a new Menu with given name and optional verbs list Kind : inner method of onem-nodejs-api Param Type Description index number index to the array of menu items that this form instance references template string file reference of the pug template data object form variables for injection ~Menu(index, template, data) .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu(index, template, data)"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apiform-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'form' 'Form' [header] string header value body FormBody form body object [footer] string footer value ~Form : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Form","title":"onem-nodejs-api~Form : object"},{"location":"SDK/NodeJS/#formheaderheader-boolean-124-string_1","text":"Getter/setter for a custom form header Kind : instance method of Form Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"form.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formfooterfooter-boolean-124-string_1","text":"Getter/setter for a custom form footer Kind : instance method of Form Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"form.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#formrender-form_1","text":"Processes the pug template for this form using the Form's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Form Returns : Form - JSON object","title":"form.render() \u21d2 Form"},{"location":"SDK/NodeJS/#onem-nodejs-apiformbody-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description formItems Array.FormItem nextRoute string method 'get' | 'post' | 'put' | 'delete' HTTP method that should be used when redirecting after successful form submission","title":"onem-nodejs-api~FormBody : object"},{"location":"SDK/NodeJS/#onem-nodejs-apiformitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description description string description of the form item which will appear as a prompt to the user name string name of the form property which will appear in the footer by default type 'string' | 'number' | 'date' used for field validation","title":"onem-nodejs-api~FormItem : object"},{"location":"SDK/NodeJS/#onem-nodejs-apimenu-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Description type 'menu' 'Menu' [header] string header value body Array.MenuItem form body object [footer] string footer value ~Menu : object .header([header]) \u21d2 boolean | string .footer([footer]) \u21d2 boolean | string .render() \u21d2 Menu","title":"onem-nodejs-api~Menu : object"},{"location":"SDK/NodeJS/#menuheaderheader-boolean-124-string_1","text":"Getter/setter for a custom menu header Kind : instance method of Menu Returns : boolean | string - true indicating header was set or the current value of the header Param Type Description [header] string optional value of the header","title":"menu.header([header]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menufooterfooter-boolean-124-string_1","text":"Getter/setter for a custom menu footer Kind : instance method of Menu Returns : boolean | string - true indicating footer was set or the current value of the footer Param Type Description [footer] string optional value of the footer","title":"menu.footer([footer]) \u21d2 boolean | string"},{"location":"SDK/NodeJS/#menurender-menu_1","text":"Processes the pug template for this menu using the menu's this.data object as input and returns a JSON object ready for sending on the ONEm connection Kind : instance method of Menu Returns : Menu - JSON object","title":"menu.render() \u21d2 Menu"},{"location":"SDK/NodeJS/#onem-nodejs-apimenuitem-object","text":"Kind : inner typedef of onem-nodejs-api Properties Name Type Default Description type 'option' | 'content' indicating menu option or plain content description string [nextRoute] string For menu options only. Path to be used for HTTP callback (added to base path configured in app's settings in developer portal) [method] 'get' | 'post' | 'put' | 'delete' get For menu options only. HTTP method that should be used when redirecting after successful menu option submission","title":"onem-nodejs-api~MenuItem : object"},{"location":"getting-started/getting-started-nodejs/","text":"Getting Started with Node.js Introduction This tutorial will have you deploying a Node.js app to ONEm in minutes. The tutorial assumes that you have a free ONEm account , and that you have Node.js , npm and git installed locally. Choose a hosting platform Your app will need to be hosted on the internet so that ONEm's servers can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure Set up To use ONEm effectively, we recommend you install git. Git is a popular version control system and will allow you to clone the examples and access our APIs. Install Git . Run the First-time setup steps Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: $ node --version v10.13.0 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: $ npm --version $ 6.9.0 Now check that you have git installed: $ git --version git version 2.15.1 Prepare the app In this step, you will prepare a simple Hello World application that\u2019s ready to be deployed to ONEm. To clone a local version of the sample application that you can then deploy to your hosting provider, execute the following commands in your local command shell or terminal: $ git clone https://github.com/chrishornmem/hello-world.git $ cd hello-world You now have a functioning git repository that contains a simple application as well as a package.json file, which is used by npm (Node\u2019s dependency manager). Install and Deploy your app Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku would execute: $ heroku create $ git push heroku master Install the package dependencies with npm: $ npm install Configure the app The Hello World example application by default listens on the HTTP port defined by the environment varible PORT or 8080 by default. Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080 Run the app Start the app with: $ npm run start You should see the following output: Listening on port 8080 Register the app with ONEm If you have not already done so, sign-up for a free ONEm developer account here . Register your app on the ONEm portal. On the portal you will need to: Give your app a unique name Provide a description for your app. Provide a link to your website Provide the fully qualified URL+port to your app in the CallBack URL field Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials. Test the app Head over to our sandbox . In the input field, enter # followed by your app's name, for example #HELLO if you app is called Hello. You should get back a MENU, similar to the below: #HELLO WORLD A First option B Second option C Third option --Reply A-C Congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better.","title":"NodeJS"},{"location":"getting-started/getting-started-nodejs/#getting-started-with-nodejs","text":"","title":"Getting Started with Node.js"},{"location":"getting-started/getting-started-nodejs/#introduction","text":"This tutorial will have you deploying a Node.js app to ONEm in minutes. The tutorial assumes that you have a free ONEm account , and that you have Node.js , npm and git installed locally.","title":"Introduction"},{"location":"getting-started/getting-started-nodejs/#choose-a-hosting-platform","text":"Your app will need to be hosted on the internet so that ONEm's servers can access it. Choose a hosting provider. Hosting provider requirements: Public static IP or a permanent DNS host name Optional - access to local or cloud database services such as PostgreSQL or MongoDB In general, ONEm apps can be hosted on any platform, it's entirely up to you which provider you use. Some popular providers you might consider: Heroku DigitalOcean Amazon Web Services (AWS) Microsoft Azure","title":"Choose a hosting platform"},{"location":"getting-started/getting-started-nodejs/#set-up","text":"To use ONEm effectively, we recommend you install git. Git is a popular version control system and will allow you to clone the examples and access our APIs. Install Git . Run the First-time setup steps Before you continue, check that you have the prerequisites installed properly. Type each command below and make sure it displays the version you have installed. Your versions might differ from the example. If an error is returned, go back check the installation before continuing. This tutorial will work for any version of Node greater than 8 - check that it\u2019s there: $ node --version v10.13.0 npm is installed with Node, so check that it\u2019s there. If you don\u2019t have it, install a more recent version of Node: $ npm --version $ 6.9.0 Now check that you have git installed: $ git --version git version 2.15.1","title":"Set up"},{"location":"getting-started/getting-started-nodejs/#prepare-the-app","text":"In this step, you will prepare a simple Hello World application that\u2019s ready to be deployed to ONEm. To clone a local version of the sample application that you can then deploy to your hosting provider, execute the following commands in your local command shell or terminal: $ git clone https://github.com/chrishornmem/hello-world.git $ cd hello-world You now have a functioning git repository that contains a simple application as well as a package.json file, which is used by npm (Node\u2019s dependency manager).","title":"Prepare the app"},{"location":"getting-started/getting-started-nodejs/#install-and-deploy-your-app","text":"Make sure your app is deployed and running on your favourite provider. For example to deploy on heroku would execute: $ heroku create $ git push heroku master Install the package dependencies with npm: $ npm install","title":"Install and Deploy your app"},{"location":"getting-started/getting-started-nodejs/#configure-the-app","text":"The Hello World example application by default listens on the HTTP port defined by the environment varible PORT or 8080 by default. Make a note of the IP address or fully qualified URL of your application from your provider together with the port. For example with heroku, it might be something like: https://example.herokuapp.com:8080 or with DigitalOcean it might be http://63.x.y.z:8080","title":"Configure the app"},{"location":"getting-started/getting-started-nodejs/#run-the-app","text":"Start the app with: $ npm run start You should see the following output: Listening on port 8080","title":"Run the app"},{"location":"getting-started/getting-started-nodejs/#register-the-app-with-onem","text":"If you have not already done so, sign-up for a free ONEm developer account here . Register your app on the ONEm portal. On the portal you will need to: Give your app a unique name Provide a description for your app. Provide a link to your website Provide the fully qualified URL+port to your app in the CallBack URL field Don't worry about the other app details at this stage (verbs, permissions), we will use them later in the advanced tutorials.","title":"Register the app with ONEm"},{"location":"getting-started/getting-started-nodejs/#test-the-app","text":"Head over to our sandbox . In the input field, enter # followed by your app's name, for example #HELLO if you app is called Hello. You should get back a MENU, similar to the below: #HELLO WORLD A First option B Second option C Third option --Reply A-C Congratulations, you have successfully installed your first app. Give yourself a pat on the back and then head over to the advanced tutorials to get to know ONEm better.","title":"Test the app"},{"location":"getting-started/getting-started-python/","text":"Welcome to ONEm For full documentation visit mkdocs.org . Inline With Reference Link Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Python"},{"location":"getting-started/getting-started-python/#welcome-to-onem","text":"For full documentation visit mkdocs.org . Inline With Reference Link","title":"Welcome to ONEm"},{"location":"getting-started/getting-started-python/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"getting-started/getting-started-python/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"getting-started/getting-started/","text":"Getting Started on ONEm Step-by-step guides for deploying your first app and mastering the basics of ONEm Follow the guide for your favourite language: Getting started with NodeJS 1. Sign-up Use either a Google or Facebook account. If you do not have a Google or facebook use these links to get a free one. After you sign in you will be asked the following: Create you ONEm name Your ONEm name is your identity on the ONEm platform. It is used for direct messaging (like an email) @john Hi how are you? 2. Create your first app Sign-up Use either a Google or Facebook account. If you do not have one they are easy to create. Sign-up Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Getting started"},{"location":"getting-started/getting-started/#getting-started-on-onem","text":"Step-by-step guides for deploying your first app and mastering the basics of ONEm Follow the guide for your favourite language: Getting started with NodeJS","title":"Getting Started on ONEm"},{"location":"getting-started/getting-started/#1-sign-up","text":"Use either a Google or Facebook account. If you do not have a Google or facebook use these links to get a free one. After you sign in you will be asked the following:","title":"1. Sign-up"},{"location":"getting-started/getting-started/#create-you-onem-name","text":"Your ONEm name is your identity on the ONEm platform. It is used for direct messaging (like an email) @john Hi how are you?","title":"Create you ONEm name"},{"location":"getting-started/getting-started/#2-create-your-first-app","text":"","title":"2. Create your first app"},{"location":"getting-started/getting-started/#sign-up","text":"Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Sign-up"},{"location":"getting-started/getting-started/#sign-up_1","text":"Use either a Google or Facebook account. If you do not have one they are easy to create.","title":"Sign-up"}]}